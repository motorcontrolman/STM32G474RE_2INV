
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009798  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc0  08009dc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dc8  08009dc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000070  08009e40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08009e40  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001992f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e95  00000000  00000000  000399cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292de  00000000  00000000  0003f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b64  00000000  00000000  00068526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001127f9  00000000  00000000  0008208a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f58  00000000  00000000  001948d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009958 	.word	0x08009958

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08009958 	.word	0x08009958

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	ed87 0a03 	vstr	s0, [r7, #12]
 8000526:	edc7 0a02 	vstr	s1, [r7, #8]
 800052a:	ed87 1a01 	vstr	s2, [r7, #4]
 800052e:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	ed93 7a00 	vldr	s14, [r3]
 8000536:	edd7 6a03 	vldr	s13, [r7, #12]
 800053a:	edd7 7a01 	vldr	s15, [r7, #4]
 800053e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 800054c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000550:	edd7 7a03 	vldr	s15, [r7, #12]
 8000554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	ee07 3a90 	vmov	s15, r3
}
 800056c:	eeb0 0a67 	vmov.f32	s0, s15
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlogalVariables.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	ed87 0a03 	vstr	s0, [r7, #12]
 8000584:	edc7 0a02 	vstr	s1, [r7, #8]
 8000588:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 800058c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	db0b      	blt.n	80005b2 <gfDivideAvoidZero+0x38>
 800059a:	ed97 7a02 	vldr	s14, [r7, #8]
 800059e:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	d502      	bpl.n	80005b2 <gfDivideAvoidZero+0x38>
		den = threshold;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e017      	b.n	80005e2 <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80005b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	d510      	bpl.n	80005e2 <gfDivideAvoidZero+0x68>
 80005c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c4:	eef1 7a67 	vneg.f32	s15, s15
 80005c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80005cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	dd05      	ble.n	80005e2 <gfDivideAvoidZero+0x68>
		den = -threshold;
 80005d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005da:	eef1 7a67 	vneg.f32	s15, s15
 80005de:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80005e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80005e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ee:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000612:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000678 <gfWrapTheta+0x70>
 8000616:	ed97 0a01 	vldr	s0, [r7, #4]
 800061a:	f008 fa4f 	bl	8008abc <fmodf>
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800067c <gfWrapTheta+0x74>
 800062a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	dd08      	ble.n	8000646 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000634:	edd7 7a01 	vldr	s15, [r7, #4]
 8000638:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000678 <gfWrapTheta+0x70>
 800063c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000640:	edc7 7a01 	vstr	s15, [r7, #4]
 8000644:	e010      	b.n	8000668 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000646:	edd7 7a01 	vldr	s15, [r7, #4]
 800064a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000680 <gfWrapTheta+0x78>
 800064e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000656:	d507      	bpl.n	8000668 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000658:	edd7 7a01 	vldr	s15, [r7, #4]
 800065c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000678 <gfWrapTheta+0x70>
 8000660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000664:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	ee07 3a90 	vmov	s15, r3
}
 800066e:	eeb0 0a67 	vmov.f32	s0, s15
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40c90fdb 	.word	0x40c90fdb
 800067c:	40490fdb 	.word	0x40490fdb
 8000680:	c0490fdb 	.word	0xc0490fdb

08000684 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	ed87 0a03 	vstr	s0, [r7, #12]
 800068e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000692:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000696:	ed97 7a03 	vldr	s14, [r7, #12]
 800069a:	edd7 7a02 	vldr	s15, [r7, #8]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	dd01      	ble.n	80006ac <gUpperLowerLimit+0x28>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80006ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006bc:	d501      	bpl.n	80006c2 <gUpperLowerLimit+0x3e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
	return input;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	ee07 3a90 	vmov	s15, r3
}
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	3302      	adds	r3, #2
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f04f 0200 	mov.w	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3304      	adds	r3, #4
 8000702:	f04f 0200 	mov.w	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3308      	adds	r3, #8
 800070c:	f04f 0200 	mov.w	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800071e:	b480      	push	{r7}
 8000720:	b087      	sub	sp, #28
 8000722:	af00      	add	r7, sp, #0
 8000724:	ed87 0a03 	vstr	s0, [r7, #12]
 8000728:	edc7 0a02 	vstr	s1, [r7, #8]
 800072c:	ed87 1a01 	vstr	s2, [r7, #4]
 8000730:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 8000732:	ed97 7a02 	vldr	s14, [r7, #8]
 8000736:	edd7 7a01 	vldr	s15, [r7, #4]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800074c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000754:	edd7 7a04 	vldr	s15, [r7, #16]
 8000758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800075c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000760:	edd7 7a03 	vldr	s15, [r7, #12]
 8000764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	edc3 7a00 	vstr	s15, [r3]
}
 8000772:	bf00      	nop
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <Sequence>:
static void slctPosModeForSensorless(uint8_t button, uint8_t* posMode);
static void slctDrvModeForSensorless(uint8_t button, uint8_t* drvMode);
static void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo);
static void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode);

void Sequence(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	if(sInitCnt < 500){
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <Sequence+0x88>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800078c:	d210      	bcs.n	80007b0 <Sequence+0x30>
		sInitCnt++;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <Sequence+0x88>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	b29a      	uxth	r2, r3
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <Sequence+0x88>)
 8000798:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <Sequence+0x8c>)
 800079c:	2202      	movs	r2, #2
 800079e:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <Sequence+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <Sequence+0x94>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	e012      	b.n	80007d6 <Sequence+0x56>
	}
	else {
	//slctPosMode(gElectFreq, &sPosMode);
	//slctDrvMode(gElectFreq, &sDrvMode);

	sElectAngVeloRef = 320.0f;// * gVolume;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <Sequence+0x98>)
 80007b2:	4a1a      	ldr	r2, [pc, #104]	; (800081c <Sequence+0x9c>)
 80007b4:	601a      	str	r2, [r3, #0]
	//gRateLimit(sElectAngVeloRef, 100.0f, CARRIERCYCLE, &sElectAngVeloRefRateLimit);
	sElectAngVeloRefRateLimit = sElectAngVeloRef;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <Sequence+0x98>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <Sequence+0x94>)
 80007bc:	6013      	str	r3, [r2, #0]

	slctPosModeForSensorless(gButton1, &sPosMode);
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <Sequence+0xa0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4912      	ldr	r1, [pc, #72]	; (800080c <Sequence+0x8c>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f839 	bl	800083c <slctPosModeForSensorless>
	slctDrvModeForSensorless(gButton1, &sDrvMode);
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <Sequence+0xa0>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4910      	ldr	r1, [pc, #64]	; (8000810 <Sequence+0x90>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f855 	bl	8000880 <slctDrvModeForSensorless>
	}

	slctElectAngleFromPosMode(sPosMode, &sElectAngle, &sElectAngVelo);
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <Sequence+0x8c>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <Sequence+0xa4>)
 80007dc:	4912      	ldr	r1, [pc, #72]	; (8000828 <Sequence+0xa8>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f880 	bl	80008e4 <slctElectAngleFromPosMode>
	gTheta = sElectAngle;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <Sequence+0xa8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a10      	ldr	r2, [pc, #64]	; (800082c <Sequence+0xac>)
 80007ea:	6013      	str	r3, [r2, #0]
	gElectAngVelo = sElectAngVelo;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <Sequence+0xa4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <Sequence+0xb0>)
 80007f2:	6013      	str	r3, [r2, #0]
	slctCntlFromDrvMode(sDrvMode, sDuty, sOutputMode);
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <Sequence+0x90>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <Sequence+0xb4>)
 80007fa:	490f      	ldr	r1, [pc, #60]	; (8000838 <Sequence+0xb8>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f8e7 	bl	80009d0 <slctCntlFromDrvMode>
	//writeOutputMode(sOutputMode);
	// call writeDuty in VectorControl for Debug.
	//writeDuty(sDuty);
	//writeDuty8(sDuty);

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000d0 	.word	0x200000d0
 800080c:	200000ce 	.word	0x200000ce
 8000810:	200000cf 	.word	0x200000cf
 8000814:	200000e0 	.word	0x200000e0
 8000818:	200000dc 	.word	0x200000dc
 800081c:	43a00000 	.word	0x43a00000
 8000820:	20000090 	.word	0x20000090
 8000824:	200000d8 	.word	0x200000d8
 8000828:	200000d4 	.word	0x200000d4
 800082c:	20000094 	.word	0x20000094
 8000830:	20000098 	.word	0x20000098
 8000834:	200000e4 	.word	0x200000e4
 8000838:	200000e8 	.word	0x200000e8

0800083c <slctPosModeForSensorless>:
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}

static void slctPosModeForSensorless(uint8_t button, uint8_t* posMode){
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
	if (sElectAngVeloRefRateLimit < 1000.0f)
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <slctPosModeForSensorless+0x3c>)
 800084a:	edd3 7a00 	vldr	s15, [r3]
 800084e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800087c <slctPosModeForSensorless+0x40>
 8000852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085a:	d503      	bpl.n	8000864 <slctPosModeForSensorless+0x28>
		*posMode = POSMODE_FREERUN;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
	else
		*posMode = POSMODE_SENSORLESS;
}
 8000862:	e002      	b.n	800086a <slctPosModeForSensorless+0x2e>
		*posMode = POSMODE_SENSORLESS;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2204      	movs	r2, #4
 8000868:	701a      	strb	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	200000e0 	.word	0x200000e0
 800087c:	447a0000 	.word	0x447a0000

08000880 <slctDrvModeForSensorless>:

static void slctDrvModeForSensorless(uint8_t button, uint8_t* drvMode){
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
	if (sElectAngVeloRefRateLimit < 1000.0f)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <slctDrvModeForSensorless+0x58>)
 800088e:	edd3 7a00 	vldr	s15, [r3]
 8000892:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80008dc <slctDrvModeForSensorless+0x5c>
 8000896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d503      	bpl.n	80008a8 <slctDrvModeForSensorless+0x28>
		*drvMode = DRVMODE_OPENLOOP;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	2202      	movs	r2, #2
 80008a4:	701a      	strb	r2, [r3, #0]
	else if(sElectAngVeloRefRateLimit < 2000.0f)
		*drvMode = DRVMODE_OPENLOOP_SENSORLESS;
	else
		*drvMode = DRVMODE_VECTORCONTROL;
}
 80008a6:	e010      	b.n	80008ca <slctDrvModeForSensorless+0x4a>
	else if(sElectAngVeloRefRateLimit < 2000.0f)
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <slctDrvModeForSensorless+0x58>)
 80008aa:	edd3 7a00 	vldr	s15, [r3]
 80008ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80008e0 <slctDrvModeForSensorless+0x60>
 80008b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	d503      	bpl.n	80008c4 <slctDrvModeForSensorless+0x44>
		*drvMode = DRVMODE_OPENLOOP_SENSORLESS;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	2203      	movs	r2, #3
 80008c0:	701a      	strb	r2, [r3, #0]
}
 80008c2:	e002      	b.n	80008ca <slctDrvModeForSensorless+0x4a>
		*drvMode = DRVMODE_VECTORCONTROL;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	2204      	movs	r2, #4
 80008c8:	701a      	strb	r2, [r3, #0]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200000e0 	.word	0x200000e0
 80008dc:	447a0000 	.word	0x447a0000
 80008e0:	44fa0000 	.word	0x44fa0000

080008e4 <slctElectAngleFromPosMode>:

void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	73fb      	strb	r3, [r7, #15]
	uint8_t flgPLL;

	switch(posMode){
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d033      	beq.n	8000960 <slctElectAngleFromPosMode+0x7c>
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	dc53      	bgt.n	80009a4 <slctElectAngleFromPosMode+0xc0>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <slctElectAngleFromPosMode+0x22>
 8000900:	2b01      	cmp	r3, #1
 8000902:	d00d      	beq.n	8000920 <slctElectAngleFromPosMode+0x3c>
 8000904:	e04e      	b.n	80009a4 <slctElectAngleFromPosMode+0xc0>
	case POSMODE_STOP:
		*electAngle = 0.0f;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0.0f;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f04f 0200 	mov.w	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
		sElectAngVeloRef = 0.0f;
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <slctElectAngleFromPosMode+0xdc>)
 8000918:	f04f 0200 	mov.w	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
		break;
 800091e:	e04a      	b.n	80009b6 <slctElectAngleFromPosMode+0xd2>

	case POSMODE_FREERUN:
		*electAngVelo = sElectAngVeloRefRateLimit;
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <slctElectAngleFromPosMode+0xe0>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
		sElectAngle = sElectAngle + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <slctElectAngleFromPosMode+0xe0>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80009c8 <slctElectAngleFromPosMode+0xe4>
 8000932:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <slctElectAngleFromPosMode+0xe8>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <slctElectAngleFromPosMode+0xe8>)
 8000942:	edc3 7a00 	vstr	s15, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <slctElectAngleFromPosMode+0xe8>)
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f7ff fe5a 	bl	8000608 <gfWrapTheta>
 8000954:	eef0 7a40 	vmov.f32	s15, s0
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800095e:	e02a      	b.n	80009b6 <slctElectAngleFromPosMode+0xd2>
		flgPLL = 1;
		calcElectAngle(flgPLL, electAngle, electAngVelo);
		break;
		*/
	case POSMODE_SENSORLESS:
		flgPLL = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	75fb      	strb	r3, [r7, #23]
		*electAngVelo = sElectAngVeloRefRateLimit;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <slctElectAngleFromPosMode+0xe0>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	601a      	str	r2, [r3, #0]
		sElectAngle = sElectAngle + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <slctElectAngleFromPosMode+0xe0>)
 800096e:	edd3 7a00 	vldr	s15, [r3]
 8000972:	eddf 6a15 	vldr	s13, [pc, #84]	; 80009c8 <slctElectAngleFromPosMode+0xe4>
 8000976:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <slctElectAngleFromPosMode+0xe8>)
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <slctElectAngleFromPosMode+0xe8>)
 8000986:	edc3 7a00 	vstr	s15, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <slctElectAngleFromPosMode+0xe8>)
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	eeb0 0a67 	vmov.f32	s0, s15
 8000994:	f7ff fe38 	bl	8000608 <gfWrapTheta>
 8000998:	eef0 7a40 	vmov.f32	s15, s0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	edc3 7a00 	vstr	s15, [r3]

		break;
 80009a2:	e008      	b.n	80009b6 <slctElectAngleFromPosMode+0xd2>
	default:
		*electAngle = 0;
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
		break;
 80009b4:	bf00      	nop
	}
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000dc 	.word	0x200000dc
 80009c4:	200000e0 	.word	0x200000e0
 80009c8:	4684d000 	.word	0x4684d000
 80009cc:	200000d4 	.word	0x200000d4

080009d0 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	4603      	mov	r3, r0
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	73fb      	strb	r3, [r7, #15]
	uint8_t flgFB;
	uint8_t flgPLL;
	// MotorDrive

	float Idq_ref[2];
	Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
	Idq_ref[1] = IQREFMAX * gVolume;
 80009e4:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <slctCntlFromDrvMode+0x144>)
 80009e6:	edd3 7a00 	vldr	s15, [r3]
 80009ea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80009ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f2:	edc7 7a06 	vstr	s15, [r7, #24]

	switch(drvMode){
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	f200 8081 	bhi.w	8000b00 <slctCntlFromDrvMode+0x130>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <slctCntlFromDrvMode+0x34>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a19 	.word	0x08000a19
 8000a08:	08000b01 	.word	0x08000b01
 8000a0c:	08000a23 	.word	0x08000a23
 8000a10:	08000a6d 	.word	0x08000a6d
 8000a14:	08000ab7 	.word	0x08000ab7
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	68b8      	ldr	r0, [r7, #8]
 8000a1c:	f7ff fe5b 	bl	80006d6 <gOffDuty>
			break;
 8000a20:	e073      	b.n	8000b0a <slctCntlFromDrvMode+0x13a>
		case DRVMODE_OPENLOOP:
			flgFB = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	77fb      	strb	r3, [r7, #31]
			flgPLL = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	77bb      	strb	r3, [r7, #30]
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 8000a2a:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <slctCntlFromDrvMode+0x148>)
 8000a2c:	edd3 7a00 	vldr	s15, [r3]
 8000a30:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <slctCntlFromDrvMode+0x14c>)
 8000a32:	ed93 7a00 	vldr	s14, [r3]
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <slctCntlFromDrvMode+0x150>)
 8000a38:	edd3 6a00 	vldr	s13, [r3]
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <slctCntlFromDrvMode+0x154>)
 8000a3e:	ed93 6a00 	vldr	s12, [r3]
 8000a42:	7fb9      	ldrb	r1, [r7, #30]
 8000a44:	7ffa      	ldrb	r2, [r7, #31]
 8000a46:	f107 0014 	add.w	r0, r7, #20
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	460b      	mov	r3, r1
 8000a54:	eef0 1a46 	vmov.f32	s3, s12
 8000a58:	eeb0 1a66 	vmov.f32	s2, s13
 8000a5c:	4932      	ldr	r1, [pc, #200]	; (8000b28 <slctCntlFromDrvMode+0x158>)
 8000a5e:	eef0 0a47 	vmov.f32	s1, s14
 8000a62:	eeb0 0a67 	vmov.f32	s0, s15
 8000a66:	f000 fa5f 	bl	8000f28 <VectorControlTasks>
			break;
 8000a6a:	e04e      	b.n	8000b0a <slctCntlFromDrvMode+0x13a>
		case DRVMODE_OPENLOOP_SENSORLESS:
			flgFB = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	77fb      	strb	r3, [r7, #31]
			flgPLL = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	77bb      	strb	r3, [r7, #30]
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <slctCntlFromDrvMode+0x148>)
 8000a76:	edd3 7a00 	vldr	s15, [r3]
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <slctCntlFromDrvMode+0x14c>)
 8000a7c:	ed93 7a00 	vldr	s14, [r3]
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <slctCntlFromDrvMode+0x150>)
 8000a82:	edd3 6a00 	vldr	s13, [r3]
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <slctCntlFromDrvMode+0x154>)
 8000a88:	ed93 6a00 	vldr	s12, [r3]
 8000a8c:	7fb9      	ldrb	r1, [r7, #30]
 8000a8e:	7ffa      	ldrb	r2, [r7, #31]
 8000a90:	f107 0014 	add.w	r0, r7, #20
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	eef0 1a46 	vmov.f32	s3, s12
 8000aa2:	eeb0 1a66 	vmov.f32	s2, s13
 8000aa6:	4920      	ldr	r1, [pc, #128]	; (8000b28 <slctCntlFromDrvMode+0x158>)
 8000aa8:	eef0 0a47 	vmov.f32	s1, s14
 8000aac:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab0:	f000 fa3a 	bl	8000f28 <VectorControlTasks>
			break;
 8000ab4:	e029      	b.n	8000b0a <slctCntlFromDrvMode+0x13a>
		case DRVMODE_VECTORCONTROL:
			flgFB = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	77fb      	strb	r3, [r7, #31]
			flgPLL = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	77bb      	strb	r3, [r7, #30]
			VectorControlTasks(Idq_ref, sElectAngle, sElectAngVeloRefRateLimit, gIuvw, gVdc, gTwoDivVdc, flgFB, flgPLL, Duty, outputMode);
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <slctCntlFromDrvMode+0x148>)
 8000ac0:	edd3 7a00 	vldr	s15, [r3]
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <slctCntlFromDrvMode+0x14c>)
 8000ac6:	ed93 7a00 	vldr	s14, [r3]
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <slctCntlFromDrvMode+0x150>)
 8000acc:	edd3 6a00 	vldr	s13, [r3]
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <slctCntlFromDrvMode+0x154>)
 8000ad2:	ed93 6a00 	vldr	s12, [r3]
 8000ad6:	7fb9      	ldrb	r1, [r7, #30]
 8000ad8:	7ffa      	ldrb	r2, [r7, #31]
 8000ada:	f107 0014 	add.w	r0, r7, #20
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	eef0 1a46 	vmov.f32	s3, s12
 8000aec:	eeb0 1a66 	vmov.f32	s2, s13
 8000af0:	490d      	ldr	r1, [pc, #52]	; (8000b28 <slctCntlFromDrvMode+0x158>)
 8000af2:	eef0 0a47 	vmov.f32	s1, s14
 8000af6:	eeb0 0a67 	vmov.f32	s0, s15
 8000afa:	f000 fa15 	bl	8000f28 <VectorControlTasks>
			break;
 8000afe:	e004      	b.n	8000b0a <slctCntlFromDrvMode+0x13a>
		default :
			gOffDuty(Duty, outputMode);
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	68b8      	ldr	r0, [r7, #8]
 8000b04:	f7ff fde7 	bl	80006d6 <gOffDuty>
	}
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000a4 	.word	0x200000a4
 8000b18:	200000d4 	.word	0x200000d4
 8000b1c:	200000e0 	.word	0x200000e0
 8000b20:	2000009c 	.word	0x2000009c
 8000b24:	200000a0 	.word	0x200000a0
 8000b28:	200000a8 	.word	0x200000a8

08000b2c <readButton1>:
#include "SignalReadWrite.h"


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <readButton1+0x20>)
 8000b38:	f004 feea 	bl	8005910 <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
	return B1;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	b2db      	uxtb	r3, r3
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	48000800 	.word	0x48000800

08000b50 <readVolume>:
	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}

float readVolume(void){
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <readVolume+0x50>)
 8000b58:	885b      	ldrh	r3, [r3, #2]
 8000b5a:	807b      	strh	r3, [r7, #2]

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 8000b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b60:	3b63      	subs	r3, #99	; 0x63
 8000b62:	ee07 3a90 	vmov	s15, r3
 8000b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b6a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000ba4 <readVolume+0x54>
 8000b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b72:	edc7 7a01 	vstr	s15, [r7, #4]
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 8000b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d502      	bpl.n	8000b8a <readVolume+0x3a>
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
	return Volume;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	ee07 3a90 	vmov	s15, r3
}
 8000b90:	eeb0 0a67 	vmov.f32	s0, s15
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000008c 	.word	0x2000008c
 8000ba4:	398007f8 	.word	0x398007f8

08000ba8 <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000bb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bc4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	b292      	uxth	r2, r2
 8000bce:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	b292      	uxth	r2, r2
 8000bde:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bec:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c5c <readCurrent+0xb4>
 8000bf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bf4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000c60 <readCurrent+0xb8>
 8000bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3302      	adds	r3, #2
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c10:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000c64 <readCurrent+0xbc>
 8000c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c60 <readCurrent+0xb8>
 8000c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c24:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c36:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000c68 <readCurrent+0xc0>
 8000c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3308      	adds	r3, #8
 8000c42:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c60 <readCurrent+0xb8>
 8000c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4a:	edc3 7a00 	vstr	s15, [r3]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	44fac000 	.word	0x44fac000
 8000c60:	bc71f4bc 	.word	0xbc71f4bc
 8000c64:	44f90000 	.word	0x44f90000
 8000c68:	44fc4000 	.word	0x44fc4000

08000c6c <readCurrent2>:

void readCurrent2(uint16_t* Iuvw_AD, float* Iuvw){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC2 -> JDR1; // Iu
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <readCurrent2+0xac>)
 8000c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC2 -> JDR2; // Iv
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <readCurrent2+0xac>)
 8000c84:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	b292      	uxth	r2, r2
 8000c8e:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC2 -> JDR3; // Iw
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <readCurrent2+0xac>)
 8000c92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU2_ADOffSET) * AD2CURRENT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000caa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000d1c <readCurrent2+0xb0>
 8000cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cb2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000d20 <readCurrent2+0xb4>
 8000cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000d24 <readCurrent2+0xb8>
 8000cd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d20 <readCurrent2+0xb4>
 8000cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce2:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000d28 <readCurrent2+0xbc>
 8000cf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	3308      	adds	r3, #8
 8000d00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000d20 <readCurrent2+0xb4>
 8000d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d08:	edc3 7a00 	vstr	s15, [r3]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	50000100 	.word	0x50000100
 8000d1c:	44f84000 	.word	0x44f84000
 8000d20:	bc71f4bc 	.word	0xbc71f4bc
 8000d24:	44f5e000 	.word	0x44f5e000
 8000d28:	44f6c000 	.word	0x44f6c000

08000d2c <writeDutyforOpenWinding>:
	TIM8 -> CCR1 = Duty[0] * (TIM8 -> ARR);
	TIM8 -> CCR2 = Duty[1] * (TIM8 -> ARR);
	TIM8 -> CCR3 = Duty[2] * (TIM8 -> ARR);
}

void writeDutyforOpenWinding(float* Duty){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(Duty[0] > 0){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d42:	dd21      	ble.n	8000d88 <writeDutyforOpenWinding+0x5c>
		TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	ed93 7a00 	vldr	s14, [r3]
 8000d4a:	4b74      	ldr	r3, [pc, #464]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d5a:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d60:	ee17 2a90 	vmov	r2, s15
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
		TIM8 -> CCR1 = 0.0f * (TIM8 -> ARR);
 8000d66:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d72:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000f24 <writeDutyforOpenWinding+0x1f8>
 8000d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d7a:	4b69      	ldr	r3, [pc, #420]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d80:	ee17 2a90 	vmov	r2, s15
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	e022      	b.n	8000dce <writeDutyforOpenWinding+0xa2>
	}
	else{
		TIM1 -> CCR1 = 0.0f * (TIM1 -> ARR);
 8000d88:	4b64      	ldr	r3, [pc, #400]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d94:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000f24 <writeDutyforOpenWinding+0x1f8>
 8000d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9c:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da2:	ee17 2a90 	vmov	r2, s15
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM8 -> CCR1 = -1.0f * Duty[0] * (TIM8 -> ARR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	eeb1 7a67 	vneg.f32	s14, s15
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc8:	ee17 2a90 	vmov	r2, s15
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		TIM1 -> CCR2 = 0.0f * (TIM1 -> ARR);
		TIM8 -> CCR2 = -1.0f * Duty[1] * (TIM8 -> ARR);
	}
	*/
	if(Duty[1] > 0){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	edd3 7a00 	vldr	s15, [r3]
 8000dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dde:	dd22      	ble.n	8000e26 <writeDutyforOpenWinding+0xfa>
		TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3304      	adds	r3, #4
 8000de4:	ed93 7a00 	vldr	s14, [r3]
 8000de8:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df8:	4b48      	ldr	r3, [pc, #288]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dfe:	ee17 2a90 	vmov	r2, s15
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8 -> CCR2 = 0.0f * (TIM8 -> ARR);
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e10:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000f24 <writeDutyforOpenWinding+0x1f8>
 8000e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e18:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e1e:	ee17 2a90 	vmov	r2, s15
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
 8000e24:	e023      	b.n	8000e6e <writeDutyforOpenWinding+0x142>
	}
	else{
		TIM1 -> CCR2 = 0.0f * (TIM1 -> ARR);
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e32:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000f24 <writeDutyforOpenWinding+0x1f8>
 8000e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e40:	ee17 2a90 	vmov	r2, s15
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8 -> CCR2 = -1.0f * Duty[1] * (TIM8 -> ARR);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb1 7a67 	vneg.f32	s14, s15
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	ee07 3a90 	vmov	s15, r3
 8000e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e68:	ee17 2a90 	vmov	r2, s15
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if(Duty[2] > 0){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3308      	adds	r3, #8
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	dd22      	ble.n	8000ec6 <writeDutyforOpenWinding+0x19a>
		TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3308      	adds	r3, #8
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 2a90 	vmov	r2, s15
 8000ea2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM8 -> CCR3 = 0.0f * (TIM8 -> ARR);
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f24 <writeDutyforOpenWinding+0x1f8>
 8000eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ebe:	ee17 2a90 	vmov	r2, s15
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else{
		TIM1 -> CCR3 = 0.0f * (TIM1 -> ARR);
		TIM8 -> CCR3 = -1.0f * Duty[2] * (TIM8 -> ARR);
	}
}
 8000ec4:	e023      	b.n	8000f0e <writeDutyforOpenWinding+0x1e2>
		TIM1 -> CCR3 = 0.0f * (TIM1 -> ARR);
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f24 <writeDutyforOpenWinding+0x1f8>
 8000ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <writeDutyforOpenWinding+0x1f0>)
 8000edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee0:	ee17 2a90 	vmov	r2, s15
 8000ee4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM8 -> CCR3 = -1.0f * Duty[2] * (TIM8 -> ARR);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3308      	adds	r3, #8
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	eeb1 7a67 	vneg.f32	s14, s15
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <writeDutyforOpenWinding+0x1f4>)
 8000f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f08:	ee17 2a90 	vmov	r2, s15
 8000f0c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40012c00 	.word	0x40012c00
 8000f20:	40013400 	.word	0x40013400
 8000f24:	00000000 	.word	0x00000000

08000f28 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, float *Igd, float electAngVelo, float Vdc, float *Vgd, float* Vamp);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo, float* Egd);
static inline void calcElectAngleEstimate(uint8_t flgPLL, float electAngle, float electAngVelo, float *electAngleEstimate, float *electAngVeloEstimate);

void VectorControlTasks(float *Idq_ref, float electAngle, float electAngVelo, float *Iuvw, float Vdc, float twoDivVdc, uint8_t flgFB, uint8_t flgPLL, float* Duty, int8_t* outputMode){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	61f8      	str	r0, [r7, #28]
 8000f30:	ed87 0a06 	vstr	s0, [r7, #24]
 8000f34:	edc7 0a05 	vstr	s1, [r7, #20]
 8000f38:	6139      	str	r1, [r7, #16]
 8000f3a:	ed87 1a03 	vstr	s2, [r7, #12]
 8000f3e:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	460b      	mov	r3, r1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	71bb      	strb	r3, [r7, #6]

	float Vq_ref_open;
	float theta;
	float omega;

	calcElectAngleEstimate(flgPLL, electAngle, electAngVelo, &sElectAngleEstimate, &sElectAngVeloEstimate);
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	4a5f      	ldr	r2, [pc, #380]	; (80010d0 <VectorControlTasks+0x1a8>)
 8000f52:	4960      	ldr	r1, [pc, #384]	; (80010d4 <VectorControlTasks+0x1ac>)
 8000f54:	edd7 0a05 	vldr	s1, [r7, #20]
 8000f58:	ed97 0a06 	vldr	s0, [r7, #24]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fd69 	bl	8001a34 <calcElectAngleEstimate>

	theta = sElectAngleEstimate;
 8000f62:	4b5c      	ldr	r3, [pc, #368]	; (80010d4 <VectorControlTasks+0x1ac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	omega = sElectAngVeloEstimate;
 8000f68:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <VectorControlTasks+0x1a8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28

	if ( flgFB == 0 ){
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d122      	bne.n	8000fba <VectorControlTasks+0x92>
		Vq_ref_open = Vdc * SQRT3DIV2_DIV2 * 0.4f;//gVolume;
 8000f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f78:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80010d8 <VectorControlTasks+0x1b0>
 8000f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f80:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80010dc <VectorControlTasks+0x1b4>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		OpenLoopTasks(Vq_ref_open, theta, Iuvw, twoDivVdc, Duty, outputMode);
 8000f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f90:	ed97 1a02 	vldr	s2, [r7, #8]
 8000f94:	6938      	ldr	r0, [r7, #16]
 8000f96:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8000f9a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000f9e:	f000 f8c3 	bl	8001128 <OpenLoopTasks>
		sVdq_i[0] = 0.0f;
 8000fa2:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <VectorControlTasks+0x1b8>)
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
		sVdq_i[1] = Vq_ref_open;
 8000faa:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <VectorControlTasks+0x1b8>)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	6053      	str	r3, [r2, #4]
		sIq_ref_LPF = sIq_LPF;
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <VectorControlTasks+0x1bc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <VectorControlTasks+0x1c0>)
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e07a      	b.n	80010b0 <VectorControlTasks+0x188>
		}
	else{

		outputMode[0] = OUTPUTMODE_POSITIVE;
 8000fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
		outputMode[1] = OUTPUTMODE_POSITIVE;
 8000fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		outputMode[2] = OUTPUTMODE_POSITIVE;
 8000fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fca:	3302      	adds	r3, #2
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]


		uvw2ab(gIuvw, sIab);
 8000fd0:	4946      	ldr	r1, [pc, #280]	; (80010ec <VectorControlTasks+0x1c4>)
 8000fd2:	4847      	ldr	r0, [pc, #284]	; (80010f0 <VectorControlTasks+0x1c8>)
 8000fd4:	f000 f914 	bl	8001200 <uvw2ab>
		ab2dq(theta, sIab, sIdq);
 8000fd8:	4946      	ldr	r1, [pc, #280]	; (80010f4 <VectorControlTasks+0x1cc>)
 8000fda:	4844      	ldr	r0, [pc, #272]	; (80010ec <VectorControlTasks+0x1c4>)
 8000fdc:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000fe0:	f000 f9b0 	bl	8001344 <ab2dq>

		gLPF(Idq_ref[1], 62.8f, CARRIERCYCLE, &sIq_ref_LPF);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	483e      	ldr	r0, [pc, #248]	; (80010e8 <VectorControlTasks+0x1c0>)
 8000fee:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80010f8 <VectorControlTasks+0x1d0>
 8000ff2:	eddf 0a42 	vldr	s1, [pc, #264]	; 80010fc <VectorControlTasks+0x1d4>
 8000ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffa:	f7ff fb90 	bl	800071e <gLPF>
		Idq_ref[1] = sIq_ref_LPF; // zanteisyori
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	4a39      	ldr	r2, [pc, #228]	; (80010e8 <VectorControlTasks+0x1c0>)
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	601a      	str	r2, [r3, #0]
		CurrentFbControl(Idq_ref, sIdq, omega, Vdc, sVdq, &sVamp);
 8001008:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <VectorControlTasks+0x1d8>)
 800100a:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <VectorControlTasks+0x1dc>)
 800100c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001010:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001014:	4937      	ldr	r1, [pc, #220]	; (80010f4 <VectorControlTasks+0x1cc>)
 8001016:	69f8      	ldr	r0, [r7, #28]
 8001018:	f000 fbc8 	bl	80017ac <CurrentFbControl>
		sMod = calcModFromVamp(sVamp, gTwoDivVdc);
 800101c:	4b38      	ldr	r3, [pc, #224]	; (8001100 <VectorControlTasks+0x1d8>)
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	4b39      	ldr	r3, [pc, #228]	; (8001108 <VectorControlTasks+0x1e0>)
 8001024:	ed93 7a00 	vldr	s14, [r3]
 8001028:	eef0 0a47 	vmov.f32	s1, s14
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	f000 f9f2 	bl	8001418 <calcModFromVamp>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	4b34      	ldr	r3, [pc, #208]	; (800110c <VectorControlTasks+0x1e4>)
 800103a:	edc3 7a00 	vstr	s15, [r3]

		dq2ab(theta, sVdq, sVab);
 800103e:	4934      	ldr	r1, [pc, #208]	; (8001110 <VectorControlTasks+0x1e8>)
 8001040:	4830      	ldr	r0, [pc, #192]	; (8001104 <VectorControlTasks+0x1dc>)
 8001042:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001046:	f000 fa07 	bl	8001458 <dq2ab>
		ab2uvw(sVab, sVuvw);
 800104a:	4932      	ldr	r1, [pc, #200]	; (8001114 <VectorControlTasks+0x1ec>)
 800104c:	4830      	ldr	r0, [pc, #192]	; (8001110 <VectorControlTasks+0x1e8>)
 800104e:	f000 f937 	bl	80012c0 <ab2uvw>

		Vuvw2Duty(twoDivVdc, sVuvw, Duty);
 8001052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001054:	482f      	ldr	r0, [pc, #188]	; (8001114 <VectorControlTasks+0x1ec>)
 8001056:	ed97 0a02 	vldr	s0, [r7, #8]
 800105a:	f000 fa3d 	bl	80014d8 <Vuvw2Duty>

		sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001118 <VectorControlTasks+0x1f0>
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <VectorControlTasks+0x1f4>)
 800106e:	edc3 7a00 	vstr	s15, [r3]
		sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001118 <VectorControlTasks+0x1f0>
 800107e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <VectorControlTasks+0x1f4>)
 8001084:	edc3 7a01 	vstr	s15, [r3, #4]
		sIdq_1000[0] = sIdq[0] * 1000.0f;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <VectorControlTasks+0x1cc>)
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001118 <VectorControlTasks+0x1f0>
 8001092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <VectorControlTasks+0x1f8>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
		sIdq_1000[1] = sIdq[1] * 1000.0f;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <VectorControlTasks+0x1cc>)
 800109e:	edd3 7a01 	vldr	s15, [r3, #4]
 80010a2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001118 <VectorControlTasks+0x1f0>
 80010a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <VectorControlTasks+0x1f8>)
 80010ac:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	gLPF(sIdq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <VectorControlTasks+0x1cc>)
 80010b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <VectorControlTasks+0x1bc>)
 80010b8:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 80010f8 <VectorControlTasks+0x1d0>
 80010bc:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001124 <VectorControlTasks+0x1fc>
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	f7ff fb2b 	bl	800071e <gLPF>

}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000015c 	.word	0x2000015c
 80010d4:	20000154 	.word	0x20000154
 80010d8:	3f1cc471 	.word	0x3f1cc471
 80010dc:	3ecccccd 	.word	0x3ecccccd
 80010e0:	20000128 	.word	0x20000128
 80010e4:	20000108 	.word	0x20000108
 80010e8:	2000010c 	.word	0x2000010c
 80010ec:	200000f4 	.word	0x200000f4
 80010f0:	200000a8 	.word	0x200000a8
 80010f4:	20000100 	.word	0x20000100
 80010f8:	3876b949 	.word	0x3876b949
 80010fc:	427b3333 	.word	0x427b3333
 8001100:	20000144 	.word	0x20000144
 8001104:	20000120 	.word	0x20000120
 8001108:	200000a0 	.word	0x200000a0
 800110c:	20000148 	.word	0x20000148
 8001110:	20000130 	.word	0x20000130
 8001114:	20000138 	.word	0x20000138
 8001118:	447a0000 	.word	0x447a0000
 800111c:	20000110 	.word	0x20000110
 8001120:	20000118 	.word	0x20000118
 8001124:	42fb3333 	.word	0x42fb3333

08001128 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float twoDivVdc, float* Duty, int8_t* outputMode){
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001132:	edc7 0a04 	vstr	s1, [r7, #16]
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	ed87 1a02 	vstr	s2, [r7, #8]
 800113c:	6079      	str	r1, [r7, #4]
 800113e:	603a      	str	r2, [r7, #0]
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3302      	adds	r3, #2
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

	uvw2ab(gIuvw, sIab);
 8001156:	4921      	ldr	r1, [pc, #132]	; (80011dc <OpenLoopTasks+0xb4>)
 8001158:	4821      	ldr	r0, [pc, #132]	; (80011e0 <OpenLoopTasks+0xb8>)
 800115a:	f000 f851 	bl	8001200 <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 800115e:	4921      	ldr	r1, [pc, #132]	; (80011e4 <OpenLoopTasks+0xbc>)
 8001160:	481e      	ldr	r0, [pc, #120]	; (80011dc <OpenLoopTasks+0xb4>)
 8001162:	ed97 0a04 	vldr	s0, [r7, #16]
 8001166:	f000 f8ed 	bl	8001344 <ab2dq>
	sVdq[0] = 0.0f;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <OpenLoopTasks+0xc0>)
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
	sVdq[1] = VamRef;
 8001172:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <OpenLoopTasks+0xc0>)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	6053      	str	r3, [r2, #4]

	dq2ab(theta + PIDIV12, sVdq, sVab);
 8001178:	edd7 7a04 	vldr	s15, [r7, #16]
 800117c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80011ec <OpenLoopTasks+0xc4>
 8001180:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001184:	491a      	ldr	r1, [pc, #104]	; (80011f0 <OpenLoopTasks+0xc8>)
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <OpenLoopTasks+0xc0>)
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	f000 f964 	bl	8001458 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001190:	4918      	ldr	r1, [pc, #96]	; (80011f4 <OpenLoopTasks+0xcc>)
 8001192:	4817      	ldr	r0, [pc, #92]	; (80011f0 <OpenLoopTasks+0xc8>)
 8001194:	f000 f894 	bl	80012c0 <ab2uvw>
	//Vuvw2Duty(twoDivVdc, sVuvw, Duty);
	Vuvw2DutyforOpenWinding(twoDivVdc, sVuvw, Duty);
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <OpenLoopTasks+0xcc>)
 800119c:	ed97 0a02 	vldr	s0, [r7, #8]
 80011a0:	f000 fa96 	bl	80016d0 <Vuvw2DutyforOpenWinding>
	// for Debug
	//writeDuty(Duty);
	writeDutyforOpenWinding(Duty);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fdc1 	bl	8000d2c <writeDutyforOpenWinding>
	Vuvw2Duty(twoDivVdc, sVuvw, Duty);
	// for Debug
	writeDuty8(Duty);
	*/

	sIdq_1000[0] = sIdq[0] * 1000.0f;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <OpenLoopTasks+0xbc>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011f8 <OpenLoopTasks+0xd0>
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <OpenLoopTasks+0xd4>)
 80011ba:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <OpenLoopTasks+0xbc>)
 80011c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80011f8 <OpenLoopTasks+0xd0>
 80011c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <OpenLoopTasks+0xd4>)
 80011ce:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000f4 	.word	0x200000f4
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	20000100 	.word	0x20000100
 80011e8:	20000120 	.word	0x20000120
 80011ec:	3e860a92 	.word	0x3e860a92
 80011f0:	20000130 	.word	0x20000130
 80011f4:	20000138 	.word	0x20000138
 80011f8:	447a0000 	.word	0x447a0000
 80011fc:	20000118 	.word	0x20000118

08001200 <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	ed93 7a00 	vldr	s14, [r3]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3304      	adds	r3, #4
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800121c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001220:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3308      	adds	r3, #8
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001230:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80012b4 <uvw2ab+0xb4>
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3304      	adds	r3, #4
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012b8 <uvw2ab+0xb8>
 8001252:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3308      	adds	r3, #8
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	eddf 6a16 	vldr	s13, [pc, #88]	; 80012b8 <uvw2ab+0xb8>
 8001262:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3304      	adds	r3, #4
 800126e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012b4 <uvw2ab+0xb4>
 8001272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001276:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	ed93 7a00 	vldr	s14, [r3]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3304      	adds	r3, #4
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3308      	adds	r3, #8
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	3308      	adds	r3, #8
 800129c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012bc <uvw2ab+0xbc>
 80012a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a4:	edc3 7a00 	vstr	s15, [r3]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	3f5105ec 	.word	0x3f5105ec
 80012b8:	3f5db3d7 	.word	0x3f5db3d7
 80012bc:	3f13cd3a 	.word	0x3f13cd3a

080012c0 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800133c <ab2uvw+0x7c>
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80012e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3304      	adds	r3, #4
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001340 <ab2uvw+0x80>
 80012f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3304      	adds	r3, #4
 8001304:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800133c <ab2uvw+0x7c>
 8001308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130c:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb1 7a67 	vneg.f32	s14, s15
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3304      	adds	r3, #4
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	3308      	adds	r3, #8
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	edc3 7a00 	vstr	s15, [r3]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	3f5105ec 	.word	0x3f5105ec
 8001340:	3f5db3d7 	.word	0x3f5db3d7

08001344 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	ed87 0a03 	vstr	s0, [r7, #12]
 800134e:	60b8      	str	r0, [r7, #8]
 8001350:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001352:	ed97 0a03 	vldr	s0, [r7, #12]
 8001356:	f007 fb69 	bl	8008a2c <sinf>
 800135a:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 800135e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001362:	f007 fb1f 	bl	80089a4 <cosf>
 8001366:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	edd7 7a04 	vldr	s15, [r7, #16]
 8001374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3304      	adds	r3, #4
 800137c:	edd3 6a00 	vldr	s13, [r3]
 8001380:	edd7 7a05 	vldr	s15, [r7, #20]
 8001384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	eeb1 7a67 	vneg.f32	s14, s15
 800139c:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3304      	adds	r3, #4
 80013a8:	edd3 6a00 	vldr	s13, [r3]
 80013ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3304      	adds	r3, #4
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	edc3 7a00 	vstr	s15, [r3]
}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3304      	adds	r3, #4
 80013e4:	edd3 6a00 	vldr	s13, [r3]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3304      	adds	r3, #4
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 80013fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001400:	f007 fb7c 	bl	8008afc <sqrtf>
 8001404:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	ee07 3a90 	vmov	s15, r3
}
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001422:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8001426:	ed97 7a01 	vldr	s14, [r7, #4]
 800142a:	edd7 7a00 	vldr	s15, [r7]
 800142e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001432:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001454 <calcModFromVamp+0x3c>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ee07 3a90 	vmov	s15, r3
}
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	3f5105ec 	.word	0x3f5105ec

08001458 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001462:	60b8      	str	r0, [r7, #8]
 8001464:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001466:	ed97 0a03 	vldr	s0, [r7, #12]
 800146a:	f007 fadf 	bl	8008a2c <sinf>
 800146e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001472:	ed97 0a03 	vldr	s0, [r7, #12]
 8001476:	f007 fa95 	bl	80089a4 <cosf>
 800147a:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	ed93 7a00 	vldr	s14, [r3]
 8001484:	edd7 7a04 	vldr	s15, [r7, #16]
 8001488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3304      	adds	r3, #4
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	edd7 7a05 	vldr	s15, [r7, #20]
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	3304      	adds	r3, #4
 80014b8:	edd3 6a00 	vldr	s13, [r3]
 80014bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc3 7a00 	vstr	s15, [r3]
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	ed87 0a03 	vstr	s0, [r7, #12]
 80014e2:	60b8      	str	r0, [r7, #8]
 80014e4:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3304      	adds	r3, #4
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d502      	bpl.n	8001508 <Vuvw2Duty+0x30>
		max = Vuvw[1];
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3308      	adds	r3, #8
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ed97 7a07 	vldr	s14, [r7, #28]
 8001514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d502      	bpl.n	8001524 <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3304      	adds	r3, #4
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a06 	vldr	s14, [r7, #24]
 8001536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	dd02      	ble.n	8001546 <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3308      	adds	r3, #8
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	dd02      	ble.n	8001562 <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	61bb      	str	r3, [r7, #24]

	vo = (max + min) * 0.5f;
 8001562:	ed97 7a07 	vldr	s14, [r7, #28]
 8001566:	edd7 7a06 	vldr	s15, [r7, #24]
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001576:	edc7 7a05 	vstr	s15, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	edd7 7a05 	vldr	s15, [r7, #20]
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3304      	adds	r3, #4
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3304      	adds	r3, #4
 800159a:	edd7 7a05 	vldr	s15, [r7, #20]
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3308      	adds	r3, #8
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3308      	adds	r3, #8
 80015b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ba:	edc3 7a00 	vstr	s15, [r3]



	Duty[0] = (Vuvw[0] * twoDivVdc);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3304      	adds	r3, #4
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e6:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3308      	adds	r3, #8
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3308      	adds	r3, #8
 80015f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800160c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f7ff f836 	bl	8000684 <gUpperLowerLimit>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	1d1c      	adds	r4, r3, #4
 800162e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001632:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	f7ff f823 	bl	8000684 <gUpperLowerLimit>
 800163e:	eef0 7a40 	vmov.f32	s15, s0
 8001642:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3308      	adds	r3, #8
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f103 0408 	add.w	r4, r3, #8
 8001654:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001658:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	f7ff f810 	bl	8000684 <gUpperLowerLimit>
 8001664:	eef0 7a40 	vmov.f32	s15, s0
 8001668:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800167e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3304      	adds	r3, #4
 800169c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a4:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3308      	adds	r3, #8
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3308      	adds	r3, #8
 80016bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016c4:	edc3 7a00 	vstr	s15, [r3]

}
 80016c8:	bf00      	nop
 80016ca:	3724      	adds	r7, #36	; 0x24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <Vuvw2DutyforOpenWinding>:

static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty){
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80016da:	60b8      	str	r0, [r7, #8]
 80016dc:	6079      	str	r1, [r7, #4]



	Duty[0] = (Vuvw[0] * twoDivVdc * 0.5f);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	ed93 7a00 	vldr	s14, [r3]
 80016e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc * 0.5f);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3304      	adds	r3, #4
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	edd7 7a03 	vldr	s15, [r7, #12]
 8001706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001716:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc * 0.5f);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3308      	adds	r3, #8
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	edd7 7a03 	vldr	s15, [r7, #12]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3308      	adds	r3, #8
 800172e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001744:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	f7fe ff9a 	bl	8000684 <gUpperLowerLimit>
 8001750:	eef0 7a40 	vmov.f32	s15, s0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3304      	adds	r3, #4
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	1d1c      	adds	r4, r3, #4
 8001766:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800176a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800176e:	eeb0 0a67 	vmov.f32	s0, s15
 8001772:	f7fe ff87 	bl	8000684 <gUpperLowerLimit>
 8001776:	eef0 7a40 	vmov.f32	s15, s0
 800177a:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3308      	adds	r3, #8
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f103 0408 	add.w	r4, r3, #8
 800178c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001790:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	f7fe ff74 	bl	8000684 <gUpperLowerLimit>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	edc4 7a00 	vstr	s15, [r4]

}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <CurrentFbControl>:


static void CurrentFbControl(float* Igd_ref, float* Igd, float electAngVelo, float Vdc, float* Vgd, float* Vamp){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6178      	str	r0, [r7, #20]
 80017b4:	6139      	str	r1, [r7, #16]
 80017b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80017ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
	float Kid;
	float VampLimit;
	float Vphase;
	float wc;

	wc = 10.0f * TWOPI;
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <CurrentFbControl+0x1a4>)
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34

	Kp = La * wc;
 80017c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017ca:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001954 <CurrentFbControl+0x1a8>
 80017ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	Kig = Ra * wc * CARRIERCYCLE;
 80017d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017da:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001958 <CurrentFbControl+0x1ac>
 80017de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017e2:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800195c <CurrentFbControl+0x1b0>
 80017e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Kid = Kig;
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28

	Ierr[0] = Igd_ref[0] - Igd[0];
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001802:	edc7 7a06 	vstr	s15, [r7, #24]
	Ierr[1] = Igd_ref[1] - Igd[1];
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3304      	adds	r3, #4
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	3304      	adds	r3, #4
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	edc7 7a07 	vstr	s15, [r7, #28]

	sVdq_i[0] += Kig * Ierr[0];
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <CurrentFbControl+0x1b4>)
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	edd7 6a06 	vldr	s13, [r7, #24]
 8001828:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800182c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <CurrentFbControl+0x1b4>)
 8001836:	edc3 7a00 	vstr	s15, [r3]
	sVdq_i[1] += Kid * Ierr[1];
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <CurrentFbControl+0x1b4>)
 800183c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001840:	edd7 6a07 	vldr	s13, [r7, #28]
 8001844:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <CurrentFbControl+0x1b4>)
 8001852:	edc3 7a01 	vstr	s15, [r3, #4]

	Vgd[0] = Kp * Ierr[0] + sVdq_i[0];
 8001856:	ed97 7a06 	vldr	s14, [r7, #24]
 800185a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <CurrentFbControl+0x1b4>)
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edc3 7a00 	vstr	s15, [r3]
	Vgd[1] = Kp * Ierr[1] + sVdq_i[1];// + Ke * electAngVelo;// + Vgd[1] + Kid * Ierr[1] + ;
 8001872:	ed97 7a07 	vldr	s14, [r7, #28]
 8001876:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <CurrentFbControl+0x1b4>)
 8001880:	edd3 7a01 	vldr	s15, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3304      	adds	r3, #4
 8001888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188c:	edc3 7a00 	vstr	s15, [r3]

	Vphase = atan2f(Vgd[1], Vgd[0]);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	eef0 0a47 	vmov.f32	s1, s14
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	f007 f907 	bl	8008ab8 <atan2f>
 80018aa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	*Vamp = calcAmpFromVect(Vgd);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fd8a 	bl	80013c8 <calcAmpFromVect>
 80018b4:	eef0 7a40 	vmov.f32	s15, s0
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = Vdc * SQRT3DIV2_DIV2 * 1.15f;
 80018be:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001964 <CurrentFbControl+0x1b8>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ca:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001968 <CurrentFbControl+0x1bc>
 80018ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d2:	edc7 7a08 	vstr	s15, [r7, #32]
	if( *Vamp > VampLimit ){
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80018e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d400      	bmi.n	80018ec <CurrentFbControl+0x140>
		sVdq_i[0] = Vgd[0];
		Vgd[1] = VampLimit * sinf(Vphase);
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;

	}
}
 80018ea:	e02d      	b.n	8001948 <CurrentFbControl+0x19c>
		Vgd[0] = VampLimit * cosf(Vphase);
 80018ec:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80018f0:	f007 f858 	bl	80089a4 <cosf>
 80018f4:	eeb0 7a40 	vmov.f32	s14, s0
 80018f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[0] = Vgd[0];
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <CurrentFbControl+0x1b4>)
 800190c:	6013      	str	r3, [r2, #0]
		Vgd[1] = VampLimit * sinf(Vphase);
 800190e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001912:	f007 f88b 	bl	8008a2c <sinf>
 8001916:	eeb0 7a40 	vmov.f32	s14, s0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3304      	adds	r3, #4
 800191e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001926:	edc3 7a00 	vstr	s15, [r3]
		sVdq_i[1] = Vgd[1] -  Ke * electAngVelo;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	edd7 7a03 	vldr	s15, [r7, #12]
 8001936:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800196c <CurrentFbControl+0x1c0>
 800193a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800193e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <CurrentFbControl+0x1b4>)
 8001944:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001948:	bf00      	nop
 800194a:	3738      	adds	r7, #56	; 0x38
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	427b53d2 	.word	0x427b53d2
 8001954:	3849539c 	.word	0x3849539c
 8001958:	3cf5c28f 	.word	0x3cf5c28f
 800195c:	4684d000 	.word	0x4684d000
 8001960:	20000128 	.word	0x20000128
 8001964:	3f1cc471 	.word	0x3f1cc471
 8001968:	3f933333 	.word	0x3f933333
 800196c:	3c449ba6 	.word	0x3c449ba6

08001970 <FluxObserver>:


static float FluxObserver(float* Igd, float* Vgd, float electAngVelo, float* Egd){
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	ed87 0a01 	vstr	s0, [r7, #4]
 800197e:	603a      	str	r2, [r7, #0]
	float angleErr;
	//Egd[0] = Vgd[0] - Ra * Igd[0];
	//Egd[1] = Vgd[1] - Ra * Igd[1];
	Egd[0] = Vgd[0] - Ra * Igd[0] + La * electAngVelo * Igd[1];
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	ed93 7a00 	vldr	s14, [r3]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001a28 <FluxObserver+0xb8>
 8001990:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001994:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001998:	edd7 7a01 	vldr	s15, [r7, #4]
 800199c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001a2c <FluxObserver+0xbc>
 80019a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3304      	adds	r3, #4
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	edc3 7a00 	vstr	s15, [r3]
	Egd[1] = Vgd[1] - Ra * Igd[1] - La * electAngVelo * Igd[0];
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3304      	adds	r3, #4
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3304      	adds	r3, #4
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001a28 <FluxObserver+0xb8>
 80019ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019da:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a2c <FluxObserver+0xbc>
 80019de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3304      	adds	r3, #4
 80019f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f4:	edc3 7a00 	vstr	s15, [r3]
	angleErr = atan2f(-1.0f * sEdq[0], sEdq[1]); //推定q軸を基準とした実q軸との誤差を算出
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <FluxObserver+0xc0>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	eef1 7a67 	vneg.f32	s15, s15
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <FluxObserver+0xc0>)
 8001a04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a08:	eef0 0a47 	vmov.f32	s1, s14
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	f007 f852 	bl	8008ab8 <atan2f>
 8001a14:	ed87 0a05 	vstr	s0, [r7, #20]
	//arm_atan2_f32(Egd[0], Egd[1], &result);
	//Theta_est = atan2f(Egd[1], Egd[0]);
	return angleErr;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	ee07 3a90 	vmov	s15, r3
}
 8001a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	3cf5c28f 	.word	0x3cf5c28f
 8001a2c:	3849539c 	.word	0x3849539c
 8001a30:	2000014c 	.word	0x2000014c

08001a34 <calcElectAngleEstimate>:

static void calcElectAngleEstimate(uint8_t flgPLL, float electAngle, float electAngVelo, float *electAngleEstimate, float *electAngVeloEstimate){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a40:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	75fb      	strb	r3, [r7, #23]
	float wc_PLL;
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	sElectAngleErr = FluxObserver(sIdq, sVdq, *electAngleEstimate, sEdq);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	4a35      	ldr	r2, [pc, #212]	; (8001b28 <calcElectAngleEstimate+0xf4>)
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	4935      	ldr	r1, [pc, #212]	; (8001b2c <calcElectAngleEstimate+0xf8>)
 8001a58:	4835      	ldr	r0, [pc, #212]	; (8001b30 <calcElectAngleEstimate+0xfc>)
 8001a5a:	f7ff ff89 	bl	8001970 <FluxObserver>
 8001a5e:	eef0 7a40 	vmov.f32	s15, s0
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <calcElectAngleEstimate+0x100>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]

	if( flgPLL == 0){
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <calcElectAngleEstimate+0x4e>
		*electAngVeloEstimate = electAngVelo;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	601a      	str	r2, [r3, #0]
		*electAngleEstimate = electAngle;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]
		sIntegral_ElectAngleErr_Ki = electAngVelo;
 8001a7a:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <calcElectAngleEstimate+0x104>)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6013      	str	r3, [r2, #0]
		//PLL
		*electAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);

	}

}
 8001a80:	e04d      	b.n	8001b1e <calcElectAngleEstimate+0xea>
		wc_PLL = 50.0f * TWOPI;//sElectAngVeloEstimate * 0.5f;
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <calcElectAngleEstimate+0x108>)
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
		Ts_PLL = CARRIERCYCLE;
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <calcElectAngleEstimate+0x10c>)
 8001a88:	623b      	str	r3, [r7, #32]
		Kp_PLL = wc_PLL;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	61fb      	str	r3, [r7, #28]
		Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 8001a8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a92:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001b44 <calcElectAngleEstimate+0x110>
 8001a96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	edc7 7a06 	vstr	s15, [r7, #24]
		*electAngleEstimate += (*electAngVeloEstimate) * CARRIERCYCLE;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	ed93 7a00 	vldr	s14, [r3]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	edd3 6a00 	vldr	s13, [r3]
 8001aba:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8001b48 <calcElectAngleEstimate+0x114>
 8001abe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
		*electAngleEstimate = gfWrapTheta(*electAngleEstimate);
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad6:	f7fe fd97 	bl	8000608 <gfWrapTheta>
 8001ada:	eef0 7a40 	vmov.f32	s15, s0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <calcElectAngleEstimate+0x100>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	eeb0 0a67 	vmov.f32	s0, s15
 8001aee:	f7fe fd8b 	bl	8000608 <gfWrapTheta>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <calcElectAngleEstimate+0x100>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		*electAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <calcElectAngleEstimate+0x100>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <calcElectAngleEstimate+0x104>)
 8001b04:	ed97 1a06 	vldr	s2, [r7, #24]
 8001b08:	edd7 0a07 	vldr	s1, [r7, #28]
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	f7fe fd04 	bl	800051c <cfPhaseLockedLoop>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000014c 	.word	0x2000014c
 8001b2c:	20000120 	.word	0x20000120
 8001b30:	20000100 	.word	0x20000100
 8001b34:	20000160 	.word	0x20000160
 8001b38:	20000158 	.word	0x20000158
 8001b3c:	439d1463 	.word	0x439d1463
 8001b40:	3876b949 	.word	0x3876b949
 8001b44:	3e4ccccd 	.word	0x3e4ccccd
 8001b48:	4684d000 	.word	0x4684d000

08001b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b50:	f000 ffb9 	bl	8002ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b54:	f000 f89e 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b58:	f000 fc26 	bl	80023a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001b5c:	f000 fa68 	bl	8002030 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001b60:	f000 f8e4 	bl	8001d2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b64:	f000 f9ac 	bl	8001ec0 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001b68:	f000 faac 	bl	80020c4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001b6c:	f000 fb62 	bl	8002234 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001b70:	4842      	ldr	r0, [pc, #264]	; (8001c7c <main+0x130>)
 8001b72:	f004 ff6b 	bl	8006a4c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001b76:	4842      	ldr	r0, [pc, #264]	; (8001c80 <main+0x134>)
 8001b78:	f002 fccc 	bl	8004514 <HAL_ADCEx_InjectedStart_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	483f      	ldr	r0, [pc, #252]	; (8001c7c <main+0x130>)
 8001b80:	f005 f834 	bl	8006bec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b84:	2100      	movs	r1, #0
 8001b86:	483d      	ldr	r0, [pc, #244]	; (8001c7c <main+0x130>)
 8001b88:	f005 fe5a 	bl	8007840 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	483b      	ldr	r0, [pc, #236]	; (8001c7c <main+0x130>)
 8001b90:	f005 f82c 	bl	8006bec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001b94:	2104      	movs	r1, #4
 8001b96:	4839      	ldr	r0, [pc, #228]	; (8001c7c <main+0x130>)
 8001b98:	f005 fe52 	bl	8007840 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4837      	ldr	r0, [pc, #220]	; (8001c7c <main+0x130>)
 8001ba0:	f005 f824 	bl	8006bec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	4835      	ldr	r0, [pc, #212]	; (8001c7c <main+0x130>)
 8001ba8:	f005 fe4a 	bl	8007840 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Base_Start_IT(&htim8);
 8001bac:	4835      	ldr	r0, [pc, #212]	; (8001c84 <main+0x138>)
 8001bae:	f004 ff4d 	bl	8006a4c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001bb2:	4835      	ldr	r0, [pc, #212]	; (8001c88 <main+0x13c>)
 8001bb4:	f002 fcae 	bl	8004514 <HAL_ADCEx_InjectedStart_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4832      	ldr	r0, [pc, #200]	; (8001c84 <main+0x138>)
 8001bbc:	f005 f816 	bl	8006bec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4830      	ldr	r0, [pc, #192]	; (8001c84 <main+0x138>)
 8001bc4:	f005 fe3c 	bl	8007840 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001bc8:	2104      	movs	r1, #4
 8001bca:	482e      	ldr	r0, [pc, #184]	; (8001c84 <main+0x138>)
 8001bcc:	f005 f80e 	bl	8006bec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	482c      	ldr	r0, [pc, #176]	; (8001c84 <main+0x138>)
 8001bd4:	f005 fe34 	bl	8007840 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001bd8:	2108      	movs	r1, #8
 8001bda:	482a      	ldr	r0, [pc, #168]	; (8001c84 <main+0x138>)
 8001bdc:	f005 f806 	bl	8006bec <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8001be0:	2108      	movs	r1, #8
 8001be2:	4828      	ldr	r0, [pc, #160]	; (8001c84 <main+0x138>)
 8001be4:	f005 fe2c 	bl	8007840 <HAL_TIMEx_PWMN_Start>

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <main+0x140>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <main+0x140>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <main+0x140>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <main+0x140>)
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <main+0x140>)
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <main+0x140>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <main+0x140>)
 8001c08:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c0c:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <main+0x140>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <main+0x140>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <main+0x140>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <main+0x140>)
 8001c20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c24:	6013      	str	r3, [r2, #0]
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <main+0x140>)
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <main+0x140>)
 8001c2c:	3b28      	subs	r3, #40	; 0x28
 8001c2e:	6413      	str	r3, [r2, #64]	; 0x40


  TIM8 -> RCR = 1;
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <main+0x144>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
  TIM8 -> EGR  |= TIM_EGR_UG;
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <main+0x144>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <main+0x144>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6153      	str	r3, [r2, #20]
  TIM8 -> CNT = TIM8 -> ARR;
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <main+0x144>)
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <main+0x144>)
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	6253      	str	r3, [r2, #36]	; 0x24
  TIM8 -> CR1 &= ~(TIM_CR1_CMS);
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <main+0x144>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <main+0x144>)
 8001c50:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c54:	6013      	str	r3, [r2, #0]
  TIM8 -> CR1 |= TIM_CR1_DIR;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <main+0x144>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <main+0x144>)
 8001c5c:	f043 0310 	orr.w	r3, r3, #16
 8001c60:	6013      	str	r3, [r2, #0]
  TIM8 -> CR1 |= TIM_CR1_CMS;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <main+0x144>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <main+0x144>)
 8001c68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c6c:	6013      	str	r3, [r2, #0]
  TIM8 -> CCR4 = (TIM8 -> ARR) - 40;//for Carrier Top Interrupt
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <main+0x144>)
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <main+0x144>)
 8001c74:	3b28      	subs	r3, #40	; 0x28
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <main+0x12c>
 8001c7a:	bf00      	nop
 8001c7c:	200002d0 	.word	0x200002d0
 8001c80:	20000164 	.word	0x20000164
 8001c84:	2000031c 	.word	0x2000031c
 8001c88:	200001d0 	.word	0x200001d0
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40013400 	.word	0x40013400

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	; 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	2238      	movs	r2, #56	; 0x38
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f006 fe76 	bl	8008994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f003 fe98 	bl	80059ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc6:	2340      	movs	r3, #64	; 0x40
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001cd6:	2355      	movs	r3, #85	; 0x55
 8001cd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce6:	f107 0318 	add.w	r3, r7, #24
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 ff32 	bl	8005b54 <HAL_RCC_OscConfig>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cf6:	f000 fbc5 	bl	8002484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cfa:	230f      	movs	r3, #15
 8001cfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2104      	movs	r1, #4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 fa30 	bl	8006178 <HAL_RCC_ClockConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d1e:	f000 fbb1 	bl	8002484 <Error_Handler>
  }
}
 8001d22:	bf00      	nop
 8001d24:	3750      	adds	r7, #80	; 0x50
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b09a      	sub	sp, #104	; 0x68
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d42:	2220      	movs	r2, #32
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f006 fe24 	bl	8008994 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	223c      	movs	r2, #60	; 0x3c
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f006 fe1e 	bl	8008994 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d58:	4b55      	ldr	r3, [pc, #340]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d68:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d6e:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d74:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d82:	2204      	movs	r2, #4
 8001d84:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d98:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001db4:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dc2:	483b      	ldr	r0, [pc, #236]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001dc4:	f001 f91c 	bl	8003000 <HAL_ADC_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001dce:	f000 fb59 	bl	8002484 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4834      	ldr	r0, [pc, #208]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001dde:	f003 f9fd 	bl	80051dc <HAL_ADCEx_MultiModeConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001de8:	f000 fb4c 	bl	8002484 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <MX_ADC1_Init+0x188>)
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df0:	2306      	movs	r3, #6
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001df4:	2300      	movs	r3, #0
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001df8:	237f      	movs	r3, #127	; 0x7f
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4829      	ldr	r0, [pc, #164]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001e0c:	f001 fd32 	bl	8003874 <HAL_ADC_ConfigChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001e16:	f000 fb35 	bl	8002484 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <MX_ADC1_Init+0x188>)
 8001e1c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001e1e:	2309      	movs	r3, #9
 8001e20:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001e26:	237f      	movs	r3, #127	; 0x7f
 8001e28:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001e32:	2303      	movs	r3, #3
 8001e34:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4815      	ldr	r0, [pc, #84]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001e5c:	f002 fc92 	bl	8004784 <HAL_ADCEx_InjectedConfigChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8001e66:	f000 fb0d 	bl	8002484 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_ADC1_Init+0x18c>)
 8001e6c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001e6e:	f240 130f 	movw	r3, #271	; 0x10f
 8001e72:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	4619      	mov	r1, r3
 8001e78:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001e7a:	f002 fc83 	bl	8004784 <HAL_ADCEx_InjectedConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8001e84:	f000 fafe 	bl	8002484 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_ADC1_Init+0x190>)
 8001e8a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001e8c:	f240 2315 	movw	r3, #533	; 0x215
 8001e90:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <MX_ADC1_Init+0x184>)
 8001e98:	f002 fc74 	bl	8004784 <HAL_ADCEx_InjectedConfigChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8001ea2:	f000 faef 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	3768      	adds	r7, #104	; 0x68
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000164 	.word	0x20000164
 8001eb4:	04300002 	.word	0x04300002
 8001eb8:	1d500080 	.word	0x1d500080
 8001ebc:	19200040 	.word	0x19200040

08001ec0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b098      	sub	sp, #96	; 0x60
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eca:	2220      	movs	r2, #32
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f006 fd60 	bl	8008994 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	223c      	movs	r2, #60	; 0x3c
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f006 fd5a 	bl	8008994 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ee0:	4b4e      	ldr	r3, [pc, #312]	; (800201c <MX_ADC2_Init+0x15c>)
 8001ee2:	4a4f      	ldr	r2, [pc, #316]	; (8002020 <MX_ADC2_Init+0x160>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	; (800201c <MX_ADC2_Init+0x15c>)
 8001ee8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001eec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001eee:	4b4b      	ldr	r3, [pc, #300]	; (800201c <MX_ADC2_Init+0x15c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef4:	4b49      	ldr	r3, [pc, #292]	; (800201c <MX_ADC2_Init+0x15c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001efa:	4b48      	ldr	r3, [pc, #288]	; (800201c <MX_ADC2_Init+0x15c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f06:	4b45      	ldr	r3, [pc, #276]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f08:	2204      	movs	r2, #4
 8001f0a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001f12:	4b42      	ldr	r3, [pc, #264]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001f18:	4b40      	ldr	r3, [pc, #256]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f48:	4834      	ldr	r0, [pc, #208]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f4a:	f001 f859 	bl	8003000 <HAL_ADC_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_ADC2_Init+0x98>
  {
    Error_Handler();
 8001f54:	f000 fa96 	bl	8002484 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f58:	4b32      	ldr	r3, [pc, #200]	; (8002024 <MX_ADC2_Init+0x164>)
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f5c:	2306      	movs	r3, #6
 8001f5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f60:	2300      	movs	r3, #0
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f64:	237f      	movs	r3, #127	; 0x7f
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.Offset = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f74:	4619      	mov	r1, r3
 8001f76:	4829      	ldr	r0, [pc, #164]	; (800201c <MX_ADC2_Init+0x15c>)
 8001f78:	f001 fc7c 	bl	8003874 <HAL_ADC_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001f82:	f000 fa7f 	bl	8002484 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <MX_ADC2_Init+0x164>)
 8001f88:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001f8a:	2309      	movs	r3, #9
 8001f8c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001f92:	237f      	movs	r3, #127	; 0x7f
 8001f94:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001f96:	2304      	movs	r3, #4
 8001f98:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T8_TRGO;
 8001fb4:	23a4      	movs	r3, #164	; 0xa4
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4815      	ldr	r0, [pc, #84]	; (800201c <MX_ADC2_Init+0x15c>)
 8001fc8:	f002 fbdc 	bl	8004784 <HAL_ADCEx_InjectedConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_ADC2_Init+0x116>
  {
    Error_Handler();
 8001fd2:	f000 fa57 	bl	8002484 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_ADC2_Init+0x168>)
 8001fd8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001fda:	f240 130f 	movw	r3, #271	; 0x10f
 8001fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480d      	ldr	r0, [pc, #52]	; (800201c <MX_ADC2_Init+0x15c>)
 8001fe6:	f002 fbcd 	bl	8004784 <HAL_ADCEx_InjectedConfigChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_ADC2_Init+0x134>
  {
    Error_Handler();
 8001ff0:	f000 fa48 	bl	8002484 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <MX_ADC2_Init+0x16c>)
 8001ff6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001ff8:	f240 2315 	movw	r3, #533	; 0x215
 8001ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4806      	ldr	r0, [pc, #24]	; (800201c <MX_ADC2_Init+0x15c>)
 8002004:	f002 fbbe 	bl	8004784 <HAL_ADCEx_InjectedConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 800200e:	f000 fa39 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	3760      	adds	r7, #96	; 0x60
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200001d0 	.word	0x200001d0
 8002020:	50000100 	.word	0x50000100
 8002024:	0c900008 	.word	0x0c900008
 8002028:	14f00020 	.word	0x14f00020
 800202c:	21800100 	.word	0x21800100

08002030 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <MX_LPUART1_UART_Init+0x90>)
 8002038:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 800203c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002040:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002056:	220c      	movs	r2, #12
 8002058:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002074:	f005 fdf5 	bl	8007c62 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800207e:	f000 fa01 	bl	8002484 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002082:	2100      	movs	r1, #0
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002086:	f006 fb91 	bl	80087ac <HAL_UARTEx_SetTxFifoThreshold>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002090:	f000 f9f8 	bl	8002484 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002094:	2100      	movs	r1, #0
 8002096:	4809      	ldr	r0, [pc, #36]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 8002098:	f006 fbc6 	bl	8008828 <HAL_UARTEx_SetRxFifoThreshold>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80020a2:	f000 f9ef 	bl	8002484 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_LPUART1_UART_Init+0x8c>)
 80020a8:	f006 fb47 	bl	800873a <HAL_UARTEx_DisableFifoMode>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80020b2:	f000 f9e7 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000023c 	.word	0x2000023c
 80020c0:	40008000 	.word	0x40008000

080020c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b098      	sub	sp, #96	; 0x60
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
 80020e6:	615a      	str	r2, [r3, #20]
 80020e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2234      	movs	r2, #52	; 0x34
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f006 fc4f 	bl	8008994 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020f6:	4b4d      	ldr	r3, [pc, #308]	; (800222c <MX_TIM1_Init+0x168>)
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <MX_TIM1_Init+0x16c>)
 80020fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020fc:	4b4b      	ldr	r3, [pc, #300]	; (800222c <MX_TIM1_Init+0x168>)
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002102:	4b4a      	ldr	r3, [pc, #296]	; (800222c <MX_TIM1_Init+0x168>)
 8002104:	2220      	movs	r2, #32
 8002106:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <MX_TIM1_Init+0x168>)
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002110:	4b46      	ldr	r3, [pc, #280]	; (800222c <MX_TIM1_Init+0x168>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002116:	4b45      	ldr	r3, [pc, #276]	; (800222c <MX_TIM1_Init+0x168>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b43      	ldr	r3, [pc, #268]	; (800222c <MX_TIM1_Init+0x168>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002122:	4842      	ldr	r0, [pc, #264]	; (800222c <MX_TIM1_Init+0x168>)
 8002124:	f004 fd0a 	bl	8006b3c <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800212e:	f000 f9a9 	bl	8002484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002132:	2370      	movs	r3, #112	; 0x70
 8002134:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002142:	4619      	mov	r1, r3
 8002144:	4839      	ldr	r0, [pc, #228]	; (800222c <MX_TIM1_Init+0x168>)
 8002146:	f005 fc3d 	bl	80079c4 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002150:	f000 f998 	bl	8002484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002154:	2360      	movs	r3, #96	; 0x60
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215c:	2300      	movs	r3, #0
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002160:	2300      	movs	r3, #0
 8002162:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002170:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002174:	2200      	movs	r2, #0
 8002176:	4619      	mov	r1, r3
 8002178:	482c      	ldr	r0, [pc, #176]	; (800222c <MX_TIM1_Init+0x168>)
 800217a:	f004 fe49 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002184:	f000 f97e 	bl	8002484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002188:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800218c:	2204      	movs	r2, #4
 800218e:	4619      	mov	r1, r3
 8002190:	4826      	ldr	r0, [pc, #152]	; (800222c <MX_TIM1_Init+0x168>)
 8002192:	f004 fe3d 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800219c:	f000 f972 	bl	8002484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021a4:	2208      	movs	r2, #8
 80021a6:	4619      	mov	r1, r3
 80021a8:	4820      	ldr	r0, [pc, #128]	; (800222c <MX_TIM1_Init+0x168>)
 80021aa:	f004 fe31 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80021b4:	f000 f966 	bl	8002484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021bc:	220c      	movs	r2, #12
 80021be:	4619      	mov	r1, r3
 80021c0:	481a      	ldr	r0, [pc, #104]	; (800222c <MX_TIM1_Init+0x168>)
 80021c2:	f004 fe25 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80021cc:	f000 f95a 	bl	8002484 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 80021dc:	2314      	movs	r3, #20
 80021de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	4619      	mov	r1, r3
 800220c:	4807      	ldr	r0, [pc, #28]	; (800222c <MX_TIM1_Init+0x168>)
 800220e:	f005 fc6f 	bl	8007af0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002218:	f000 f934 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800221c:	4803      	ldr	r0, [pc, #12]	; (800222c <MX_TIM1_Init+0x168>)
 800221e:	f000 facd 	bl	80027bc <HAL_TIM_MspPostInit>

}
 8002222:	bf00      	nop
 8002224:	3760      	adds	r7, #96	; 0x60
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200002d0 	.word	0x200002d0
 8002230:	40012c00 	.word	0x40012c00

08002234 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b098      	sub	sp, #96	; 0x60
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002246:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]
 8002256:	615a      	str	r2, [r3, #20]
 8002258:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2234      	movs	r2, #52	; 0x34
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f006 fb97 	bl	8008994 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002266:	4b4e      	ldr	r3, [pc, #312]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002268:	4a4e      	ldr	r2, [pc, #312]	; (80023a4 <MX_TIM8_Init+0x170>)
 800226a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800226c:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <MX_TIM8_Init+0x16c>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002272:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002274:	2220      	movs	r2, #32
 8002276:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5000;
 8002278:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <MX_TIM8_Init+0x16c>)
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228c:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <MX_TIM8_Init+0x16c>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002292:	4843      	ldr	r0, [pc, #268]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002294:	f004 fc52 	bl	8006b3c <HAL_TIM_PWM_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800229e:	f000 f8f1 	bl	8002484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80022a2:	2370      	movs	r3, #112	; 0x70
 80022a4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022b2:	4619      	mov	r1, r3
 80022b4:	483a      	ldr	r0, [pc, #232]	; (80023a0 <MX_TIM8_Init+0x16c>)
 80022b6:	f005 fb85 	bl	80079c4 <HAL_TIMEx_MasterConfigSynchronization>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80022c0:	f000 f8e0 	bl	8002484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c4:	2360      	movs	r3, #96	; 0x60
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022cc:	2300      	movs	r3, #0
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022d0:	2300      	movs	r3, #0
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	482d      	ldr	r0, [pc, #180]	; (80023a0 <MX_TIM8_Init+0x16c>)
 80022ea:	f004 fd91 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80022f4:	f000 f8c6 	bl	8002484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022fc:	2204      	movs	r2, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	4827      	ldr	r0, [pc, #156]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002302:	f004 fd85 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 800230c:	f000 f8ba 	bl	8002484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002310:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002314:	2208      	movs	r2, #8
 8002316:	4619      	mov	r1, r3
 8002318:	4821      	ldr	r0, [pc, #132]	; (80023a0 <MX_TIM8_Init+0x16c>)
 800231a:	f004 fd79 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8002324:	f000 f8ae 	bl	8002484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002328:	2370      	movs	r3, #112	; 0x70
 800232a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800232c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002330:	220c      	movs	r2, #12
 8002332:	4619      	mov	r1, r3
 8002334:	481a      	ldr	r0, [pc, #104]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002336:	f004 fd6b 	bl	8006e10 <HAL_TIM_PWM_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002340:	f000 f8a0 	bl	8002484 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8002350:	2314      	movs	r3, #20
 8002352:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800236a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4807      	ldr	r0, [pc, #28]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002382:	f005 fbb5 	bl	8007af0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 800238c:	f000 f87a 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <MX_TIM8_Init+0x16c>)
 8002392:	f000 fa13 	bl	80027bc <HAL_TIM_MspPostInit>

}
 8002396:	bf00      	nop
 8002398:	3760      	adds	r7, #96	; 0x60
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000031c 	.word	0x2000031c
 80023a4:	40013400 	.word	0x40013400

080023a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	609a      	str	r2, [r3, #8]
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <MX_GPIO_Init+0xd4>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	4a2e      	ldr	r2, [pc, #184]	; (800247c <MX_GPIO_Init+0xd4>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <MX_GPIO_Init+0xd4>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <MX_GPIO_Init+0xd4>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a28      	ldr	r2, [pc, #160]	; (800247c <MX_GPIO_Init+0xd4>)
 80023dc:	f043 0320 	orr.w	r3, r3, #32
 80023e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <MX_GPIO_Init+0xd4>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	4b23      	ldr	r3, [pc, #140]	; (800247c <MX_GPIO_Init+0xd4>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4a22      	ldr	r2, [pc, #136]	; (800247c <MX_GPIO_Init+0xd4>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <MX_GPIO_Init+0xd4>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <MX_GPIO_Init+0xd4>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a1c      	ldr	r2, [pc, #112]	; (800247c <MX_GPIO_Init+0xd4>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <MX_GPIO_Init+0xd4>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2120      	movs	r1, #32
 8002422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002426:	f003 fa8b 	bl	8005940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800242a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002430:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	480f      	ldr	r0, [pc, #60]	; (8002480 <MX_GPIO_Init+0xd8>)
 8002442:	f003 f8e3 	bl	800560c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002446:	2320      	movs	r3, #32
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002460:	f003 f8d4 	bl	800560c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2028      	movs	r0, #40	; 0x28
 800246a:	f003 f89a 	bl	80055a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800246e:	2028      	movs	r0, #40	; 0x28
 8002470:	f003 f8b1 	bl	80055d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	48000800 	.word	0x48000800

08002484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
}
 800248a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800248c:	e7fe      	b.n	800248c <Error_Handler+0x8>
	...

08002490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_MspInit+0x44>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <HAL_MspInit+0x44>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6613      	str	r3, [r2, #96]	; 0x60
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_MspInit+0x44>)
 80024a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_MspInit+0x44>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_MspInit+0x44>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_MspInit+0x44>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024c6:	f003 fb35 	bl	8005b34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b0a2      	sub	sp, #136	; 0x88
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f0:	f107 0320 	add.w	r3, r7, #32
 80024f4:	2254      	movs	r2, #84	; 0x54
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f006 fa4b 	bl	8008994 <memset>
  if(hadc->Instance==ADC1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002506:	d15e      	bne.n	80025c6 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800250e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002512:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002514:	f107 0320 	add.w	r3, r7, #32
 8002518:	4618      	mov	r0, r3
 800251a:	f004 f849 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002524:	f7ff ffae 	bl	8002484 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002528:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <HAL_ADC_MspInit+0x1bc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	4a59      	ldr	r2, [pc, #356]	; (8002694 <HAL_ADC_MspInit+0x1bc>)
 8002530:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002532:	4b58      	ldr	r3, [pc, #352]	; (8002694 <HAL_ADC_MspInit+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10b      	bne.n	8002552 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800253a:	4b57      	ldr	r3, [pc, #348]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	4a56      	ldr	r2, [pc, #344]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002546:	4b54      	ldr	r3, [pc, #336]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a50      	ldr	r2, [pc, #320]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002576:	4b48      	ldr	r3, [pc, #288]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002582:	230f      	movs	r3, #15
 8002584:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002586:	2303      	movs	r3, #3
 8002588:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002592:	4619      	mov	r1, r3
 8002594:	4841      	ldr	r0, [pc, #260]	; (800269c <HAL_ADC_MspInit+0x1c4>)
 8002596:	f003 f839 	bl	800560c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800259a:	2303      	movs	r3, #3
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800259e:	2303      	movs	r3, #3
 80025a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025aa:	4619      	mov	r1, r3
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b0:	f003 f82c 	bl	800560c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	2012      	movs	r0, #18
 80025ba:	f002 fff2 	bl	80055a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025be:	2012      	movs	r0, #18
 80025c0:	f003 f809 	bl	80055d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025c4:	e062      	b.n	800268c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <HAL_ADC_MspInit+0x1c8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d15d      	bne.n	800268c <HAL_ADC_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025dc:	f107 0320 	add.w	r3, r7, #32
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 ffe5 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_ADC_MspInit+0x118>
      Error_Handler();
 80025ec:	f7ff ff4a 	bl	8002484 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_ADC_MspInit+0x1bc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a27      	ldr	r2, [pc, #156]	; (8002694 <HAL_ADC_MspInit+0x1bc>)
 80025f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_ADC_MspInit+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10b      	bne.n	800261a <HAL_ADC_MspInit+0x142>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800260c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_ADC_MspInit+0x1c0>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800264a:	2314      	movs	r3, #20
 800264c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800264e:	2303      	movs	r3, #3
 8002650:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002656:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800265a:	4619      	mov	r1, r3
 800265c:	480f      	ldr	r0, [pc, #60]	; (800269c <HAL_ADC_MspInit+0x1c4>)
 800265e:	f002 ffd5 	bl	800560c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002662:	2340      	movs	r3, #64	; 0x40
 8002664:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002666:	2303      	movs	r3, #3
 8002668:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002672:	4619      	mov	r1, r3
 8002674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002678:	f002 ffc8 	bl	800560c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	2100      	movs	r1, #0
 8002680:	2012      	movs	r0, #18
 8002682:	f002 ff8e 	bl	80055a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002686:	2012      	movs	r0, #18
 8002688:	f002 ffa5 	bl	80055d6 <HAL_NVIC_EnableIRQ>
}
 800268c:	bf00      	nop
 800268e:	3788      	adds	r7, #136	; 0x88
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000368 	.word	0x20000368
 8002698:	40021000 	.word	0x40021000
 800269c:	48000800 	.word	0x48000800
 80026a0:	50000100 	.word	0x50000100

080026a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09e      	sub	sp, #120	; 0x78
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	2254      	movs	r2, #84	; 0x54
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f006 f965 	bl	8008994 <memset>
  if(huart->Instance==LPUART1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_UART_MspInit+0xa8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d136      	bne.n	8002742 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026d4:	2320      	movs	r3, #32
 80026d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 ff65 	bl	80065b0 <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026ec:	f7ff feca 	bl	8002484 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_UART_MspInit+0xac>)
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_UART_MspInit+0xac>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_UART_MspInit+0xac>)
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_UART_MspInit+0xac>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	4a10      	ldr	r2, [pc, #64]	; (8002750 <HAL_UART_MspInit+0xac>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_UART_MspInit+0xac>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002720:	230c      	movs	r3, #12
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002730:	230c      	movs	r3, #12
 8002732:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273e:	f002 ff65 	bl	800560c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002742:	bf00      	nop
 8002744:	3778      	adds	r7, #120	; 0x78
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40008000 	.word	0x40008000
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10c      	bne.n	8002780 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_TIM_PWM_MspInit+0x60>)
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_TIM_PWM_MspInit+0x60>)
 800276c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002770:	6613      	str	r3, [r2, #96]	; 0x60
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_TIM_PWM_MspInit+0x60>)
 8002774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800277e:	e010      	b.n	80027a2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10b      	bne.n	80027a2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_TIM_PWM_MspInit+0x60>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_TIM_PWM_MspInit+0x60>)
 8002790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002794:	6613      	str	r3, [r2, #96]	; 0x60
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_TIM_PWM_MspInit+0x60>)
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40013400 	.word	0x40013400

080027bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08c      	sub	sp, #48	; 0x30
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_TIM_MspPostInit+0x164>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d15d      	bne.n	800289a <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a50      	ldr	r2, [pc, #320]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f6:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a4a      	ldr	r2, [pc, #296]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b48      	ldr	r3, [pc, #288]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800280e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002820:	2306      	movs	r3, #6
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282e:	f002 feed 	bl	800560c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002832:	2301      	movs	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002842:	2306      	movs	r3, #6
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4836      	ldr	r0, [pc, #216]	; (8002928 <HAL_TIM_MspPostInit+0x16c>)
 800284e:	f002 fedd 	bl	800560c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8002864:	230b      	movs	r3, #11
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002872:	f002 fecb 	bl	800560c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002888:	230c      	movs	r3, #12
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	4619      	mov	r1, r3
 8002892:	4825      	ldr	r0, [pc, #148]	; (8002928 <HAL_TIM_MspPostInit+0x16c>)
 8002894:	f002 feba 	bl	800560c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002898:	e03e      	b.n	8002918 <HAL_TIM_MspPostInit+0x15c>
  else if(htim->Instance==TIM8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <HAL_TIM_MspPostInit+0x170>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d139      	bne.n	8002918 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a8:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80028b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_TIM_MspPostInit+0x168>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80028d4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80028e6:	2304      	movs	r3, #4
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	4619      	mov	r1, r3
 80028f0:	480f      	ldr	r0, [pc, #60]	; (8002930 <HAL_TIM_MspPostInit+0x174>)
 80028f2:	f002 fe8b 	bl	800560c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002908:	230a      	movs	r3, #10
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <HAL_TIM_MspPostInit+0x16c>)
 8002914:	f002 fe7a 	bl	800560c <HAL_GPIO_Init>
}
 8002918:	bf00      	nop
 800291a:	3730      	adds	r7, #48	; 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40021000 	.word	0x40021000
 8002928:	48000400 	.word	0x48000400
 800292c:	40013400 	.word	0x40013400
 8002930:	48000800 	.word	0x48000800

08002934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <NMI_Handler+0x4>

0800293a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293e:	e7fe      	b.n	800293e <HardFault_Handler+0x4>

08002940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002944:	e7fe      	b.n	8002944 <MemManage_Handler+0x4>

08002946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294a:	e7fe      	b.n	800294a <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002950:	e7fe      	b.n	8002950 <UsageFault_Handler+0x4>

08002952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002980:	f000 f8f4 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <ADC1_2_IRQHandler+0x88>)
 8002990:	60fb      	str	r3, [r7, #12]
	float Idq_ref[2];
	uint8_t leadAngleModeFlg;
	uint8_t flgFB;
	int8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002992:	4820      	ldr	r0, [pc, #128]	; (8002a14 <ADC1_2_IRQHandler+0x8c>)
 8002994:	f000 fcf0 	bl	8003378 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002998:	481f      	ldr	r0, [pc, #124]	; (8002a18 <ADC1_2_IRQHandler+0x90>)
 800299a:	f000 fced 	bl	8003378 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800299e:	2120      	movs	r1, #32
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a4:	f002 ffe4 	bl	8005970 <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 80029a8:	f7fe f8c0 	bl	8000b2c <readButton1>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <ADC1_2_IRQHandler+0x94>)
 80029b2:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 80029b4:	f7fe f8cc 	bl	8000b50 <readVolume>
 80029b8:	eef0 7a40 	vmov.f32	s15, s0
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <ADC1_2_IRQHandler+0x98>)
 80029be:	edc3 7a00 	vstr	s15, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 80029c2:	4918      	ldr	r1, [pc, #96]	; (8002a24 <ADC1_2_IRQHandler+0x9c>)
 80029c4:	4818      	ldr	r0, [pc, #96]	; (8002a28 <ADC1_2_IRQHandler+0xa0>)
 80029c6:	f7fe f8ef 	bl	8000ba8 <readCurrent>
	readCurrent2(gIuvw2_AD, gIuvw2);
 80029ca:	4918      	ldr	r1, [pc, #96]	; (8002a2c <ADC1_2_IRQHandler+0xa4>)
 80029cc:	4818      	ldr	r0, [pc, #96]	; (8002a30 <ADC1_2_IRQHandler+0xa8>)
 80029ce:	f7fe f94d 	bl	8000c6c <readCurrent2>

	gVdc = 13.0f;//readVdc();
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <ADC1_2_IRQHandler+0xac>)
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <ADC1_2_IRQHandler+0xb0>)
 80029d6:	601a      	str	r2, [r3, #0]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <ADC1_2_IRQHandler+0xac>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80029e2:	eef0 0a67 	vmov.f32	s1, s15
 80029e6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80029ea:	f7fd fdc6 	bl	800057a <gfDivideAvoidZero>
 80029ee:	eef0 7a40 	vmov.f32	s15, s0
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <ADC1_2_IRQHandler+0xb4>)
 80029f4:	edc3 7a00 	vstr	s15, [r3]

	// Sequence Control
	Sequence();
 80029f8:	f7fd fec2 	bl	8000780 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80029fc:	2120      	movs	r1, #32
 80029fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a02:	f002 ffb5 	bl	8005970 <HAL_GPIO_TogglePin>
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	42c80000 	.word	0x42c80000
 8002a14:	20000164 	.word	0x20000164
 8002a18:	200001d0 	.word	0x200001d0
 8002a1c:	20000090 	.word	0x20000090
 8002a20:	200000a4 	.word	0x200000a4
 8002a24:	200000a8 	.word	0x200000a8
 8002a28:	200000b4 	.word	0x200000b4
 8002a2c:	200000bc 	.word	0x200000bc
 8002a30:	200000c8 	.word	0x200000c8
 8002a34:	2000009c 	.word	0x2000009c
 8002a38:	41500000 	.word	0x41500000
 8002a3c:	200000a0 	.word	0x200000a0

08002a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a48:	f002 ffac 	bl	80059a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a78:	f7ff ffea 	bl	8002a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LoopForever+0xe>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <LoopForever+0x16>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f005 ff53 	bl	800894c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aa6:	f7ff f851 	bl	8001b4c <main>

08002aaa <LoopForever>:

LoopForever:
    b LoopForever
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
  ldr   r0, =_estack
 8002aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ab8:	08009dd0 	.word	0x08009dd0
  ldr r2, =_sbss
 8002abc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ac0:	20000370 	.word	0x20000370

08002ac4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC3_IRQHandler>

08002ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f002 fd5b 	bl	800558c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f000 f80e 	bl	8002af8 <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	e001      	b.n	8002aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ae8:	f7ff fcd2 	bl	8002490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aec:	79fb      	ldrb	r3, [r7, #7]

}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_InitTick+0x68>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d022      	beq.n	8002b52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_InitTick+0x6c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_InitTick+0x68>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fd66 	bl	80055f2 <HAL_SYSTICK_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10f      	bne.n	8002b4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	d809      	bhi.n	8002b46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b32:	2200      	movs	r2, #0
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3a:	f002 fd32 	bl	80055a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_InitTick+0x70>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e007      	b.n	8002b56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e004      	b.n	8002b56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000008 	.word	0x20000008
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_IncTick+0x1c>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_IncTick+0x20>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_IncTick+0x1c>)
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	2000036c 	.word	0x2000036c
 8002b8c:	20000008 	.word	0x20000008

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000036c 	.word	0x2000036c

08002ba8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <LL_ADC_SetOffset+0x44>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	03fff000 	.word	0x03fff000

08002c58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	461a      	mov	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3360      	adds	r3, #96	; 0x60
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3360      	adds	r3, #96	; 0x60
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	615a      	str	r2, [r3, #20]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3330      	adds	r3, #48	; 0x30
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	4413      	add	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	211f      	movs	r1, #31
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 011f 	and.w	r1, r3, #31
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	431a      	orrs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3314      	adds	r3, #20
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0e5b      	lsrs	r3, r3, #25
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	0d1b      	lsrs	r3, r3, #20
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2107      	movs	r1, #7
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0d1b      	lsrs	r3, r3, #20
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0318 	and.w	r3, r3, #24
 8002e6a:	4908      	ldr	r1, [pc, #32]	; (8002e8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e6c:	40d9      	lsrs	r1, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	400b      	ands	r3, r1
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	431a      	orrs	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	0007ffff 	.word	0x0007ffff

08002e90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6093      	str	r3, [r2, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f50:	d101      	bne.n	8002f56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_IsEnabled+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_IsEnabled+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d101      	bne.n	8002fca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1a9      	b.n	800336e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fa55 	bl	80024d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff53 	bl	8002eec <LL_ADC_IsDeepPowerDownEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff39 	bl	8002ec8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff6e 	bl	8002f3c <LL_ADC_IsInternalRegulatorEnabled>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d115      	bne.n	8003092 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff52 	bl	8002f14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003070:	4b9c      	ldr	r3, [pc, #624]	; (80032e4 <HAL_ADC_Init+0x2e4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	4a9c      	ldr	r2, [pc, #624]	; (80032e8 <HAL_ADC_Init+0x2e8>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003084:	e002      	b.n	800308c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f9      	bne.n	8003086 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff50 	bl	8002f3c <LL_ADC_IsInternalRegulatorEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	f043 0210 	orr.w	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff75 	bl	8002fb2 <LL_ADC_REG_IsConversionOngoing>
 80030c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 8142 	bne.w	800335c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 813e 	bne.w	800335c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030e8:	f043 0202 	orr.w	r2, r3, #2
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff49 	bl	8002f8c <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d141      	bne.n	8003184 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003108:	d004      	beq.n	8003114 <HAL_ADC_Init+0x114>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a77      	ldr	r2, [pc, #476]	; (80032ec <HAL_ADC_Init+0x2ec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10f      	bne.n	8003134 <HAL_ADC_Init+0x134>
 8003114:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003118:	f7ff ff38 	bl	8002f8c <LL_ADC_IsEnabled>
 800311c:	4604      	mov	r4, r0
 800311e:	4873      	ldr	r0, [pc, #460]	; (80032ec <HAL_ADC_Init+0x2ec>)
 8003120:	f7ff ff34 	bl	8002f8c <LL_ADC_IsEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	4323      	orrs	r3, r4
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e012      	b.n	800315a <HAL_ADC_Init+0x15a>
 8003134:	486e      	ldr	r0, [pc, #440]	; (80032f0 <HAL_ADC_Init+0x2f0>)
 8003136:	f7ff ff29 	bl	8002f8c <LL_ADC_IsEnabled>
 800313a:	4604      	mov	r4, r0
 800313c:	486d      	ldr	r0, [pc, #436]	; (80032f4 <HAL_ADC_Init+0x2f4>)
 800313e:	f7ff ff25 	bl	8002f8c <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	431c      	orrs	r4, r3
 8003146:	486c      	ldr	r0, [pc, #432]	; (80032f8 <HAL_ADC_Init+0x2f8>)
 8003148:	f7ff ff20 	bl	8002f8c <LL_ADC_IsEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	4323      	orrs	r3, r4
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d012      	beq.n	8003184 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003166:	d004      	beq.n	8003172 <HAL_ADC_Init+0x172>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5f      	ldr	r2, [pc, #380]	; (80032ec <HAL_ADC_Init+0x2ec>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Init+0x176>
 8003172:	4a62      	ldr	r2, [pc, #392]	; (80032fc <HAL_ADC_Init+0x2fc>)
 8003174:	e000      	b.n	8003178 <HAL_ADC_Init+0x178>
 8003176:	4a62      	ldr	r2, [pc, #392]	; (8003300 <HAL_ADC_Init+0x300>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff fd12 	bl	8002ba8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7f5b      	ldrb	r3, [r3, #29]
 8003188:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800318e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003194:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800319a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d106      	bne.n	80031c0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	045b      	lsls	r3, r3, #17
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	4b48      	ldr	r3, [pc, #288]	; (8003304 <HAL_ADC_Init+0x304>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	69b9      	ldr	r1, [r7, #24]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fee4 	bl	8002fd8 <LL_ADC_INJ_IsConversionOngoing>
 8003210:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d17f      	bne.n	8003318 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d17c      	bne.n	8003318 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003222:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323a:	f023 0302 	bic.w	r3, r3, #2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	430b      	orrs	r3, r1
 8003246:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800325e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003268:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800326c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6911      	ldr	r1, [r2, #16]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800327e:	e013      	b.n	80032a8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800328e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d12a      	bne.n	8003308 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032ce:	4311      	orrs	r1, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032d4:	430a      	orrs	r2, r1
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	e019      	b.n	8003318 <HAL_ADC_Init+0x318>
 80032e4:	20000000 	.word	0x20000000
 80032e8:	053e2d63 	.word	0x053e2d63
 80032ec:	50000100 	.word	0x50000100
 80032f0:	50000400 	.word	0x50000400
 80032f4:	50000500 	.word	0x50000500
 80032f8:	50000600 	.word	0x50000600
 80032fc:	50000300 	.word	0x50000300
 8003300:	50000700 	.word	0x50000700
 8003304:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10c      	bne.n	800333a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f023 010f 	bic.w	r1, r3, #15
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	1e5a      	subs	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	e007      	b.n	800334a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 020f 	bic.w	r2, r2, #15
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	65da      	str	r2, [r3, #92]	; 0x5c
 800335a:	e007      	b.n	800336c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800336c:	7ffb      	ldrb	r3, [r7, #31]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	; 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	bf00      	nop

08003378 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339c:	d004      	beq.n	80033a8 <HAL_ADC_IRQHandler+0x30>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a8e      	ldr	r2, [pc, #568]	; (80035dc <HAL_ADC_IRQHandler+0x264>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_IRQHandler+0x34>
 80033a8:	4b8d      	ldr	r3, [pc, #564]	; (80035e0 <HAL_ADC_IRQHandler+0x268>)
 80033aa:	e000      	b.n	80033ae <HAL_ADC_IRQHandler+0x36>
 80033ac:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <HAL_ADC_IRQHandler+0x26c>)
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fd6e 	bl	8002e90 <LL_ADC_GetMultimode>
 80033b4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d017      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x78>
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f001 f9c4 	bl	8004770 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2202      	movs	r2, #2
 80033ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_ADC_IRQHandler+0x8c>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8094 	beq.w	8003538 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 808e 	beq.w	8003538 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fc87 	bl	8002d4c <LL_ADC_REG_IsTriggerSourceSWStart>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d072      	beq.n	800352a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a64      	ldr	r2, [pc, #400]	; (80035dc <HAL_ADC_IRQHandler+0x264>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_ADC_IRQHandler+0xea>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a65      	ldr	r2, [pc, #404]	; (80035e8 <HAL_ADC_IRQHandler+0x270>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d002      	beq.n	800345e <HAL_ADC_IRQHandler+0xe6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e003      	b.n	8003466 <HAL_ADC_IRQHandler+0xee>
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_ADC_IRQHandler+0x274>)
 8003460:	e001      	b.n	8003466 <HAL_ADC_IRQHandler+0xee>
 8003462:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4293      	cmp	r3, r2
 800346c:	d008      	beq.n	8003480 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d002      	beq.n	8003480 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b09      	cmp	r3, #9
 800347e:	d104      	bne.n	800348a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	e014      	b.n	80034b4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a53      	ldr	r2, [pc, #332]	; (80035dc <HAL_ADC_IRQHandler+0x264>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d009      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x130>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a53      	ldr	r2, [pc, #332]	; (80035e8 <HAL_ADC_IRQHandler+0x270>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d002      	beq.n	80034a4 <HAL_ADC_IRQHandler+0x12c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	e003      	b.n	80034ac <HAL_ADC_IRQHandler+0x134>
 80034a4:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_ADC_IRQHandler+0x274>)
 80034a6:	e001      	b.n	80034ac <HAL_ADC_IRQHandler+0x134>
 80034a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d135      	bne.n	800352a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d12e      	bne.n	800352a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fd6e 	bl	8002fb2 <LL_ADC_REG_IsConversionOngoing>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d11a      	bne.n	8003512 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020c 	bic.w	r2, r2, #12
 80034ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d112      	bne.n	800352a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003510:	e00b      	b.n	800352a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	f043 0210 	orr.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f984 	bl	8003838 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	220c      	movs	r2, #12
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d004      	beq.n	800354c <HAL_ADC_IRQHandler+0x1d4>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80b3 	beq.w	80036be <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80ad 	beq.w	80036be <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fc22 	bl	8002dca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003586:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fbdd 	bl	8002d4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003592:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a10      	ldr	r2, [pc, #64]	; (80035dc <HAL_ADC_IRQHandler+0x264>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_ADC_IRQHandler+0x23a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_ADC_IRQHandler+0x270>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d002      	beq.n	80035ae <HAL_ADC_IRQHandler+0x236>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	e003      	b.n	80035b6 <HAL_ADC_IRQHandler+0x23e>
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_ADC_IRQHandler+0x274>)
 80035b0:	e001      	b.n	80035b6 <HAL_ADC_IRQHandler+0x23e>
 80035b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d008      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d002      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	d10f      	bne.n	80035f0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	e01f      	b.n	800361a <HAL_ADC_IRQHandler+0x2a2>
 80035da:	bf00      	nop
 80035dc:	50000100 	.word	0x50000100
 80035e0:	50000300 	.word	0x50000300
 80035e4:	50000700 	.word	0x50000700
 80035e8:	50000500 	.word	0x50000500
 80035ec:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a8b      	ldr	r2, [pc, #556]	; (8003824 <HAL_ADC_IRQHandler+0x4ac>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_ADC_IRQHandler+0x296>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a8a      	ldr	r2, [pc, #552]	; (8003828 <HAL_ADC_IRQHandler+0x4b0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d002      	beq.n	800360a <HAL_ADC_IRQHandler+0x292>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e003      	b.n	8003612 <HAL_ADC_IRQHandler+0x29a>
 800360a:	4b88      	ldr	r3, [pc, #544]	; (800382c <HAL_ADC_IRQHandler+0x4b4>)
 800360c:	e001      	b.n	8003612 <HAL_ADC_IRQHandler+0x29a>
 800360e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003612:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d047      	beq.n	80036b0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_ADC_IRQHandler+0x2c2>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03f      	beq.n	80036b0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	d13a      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d133      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d12e      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fcbe 	bl	8002fd8 <LL_ADC_INJ_IsConversionOngoing>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11a      	bne.n	8003698 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003670:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d112      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	65da      	str	r2, [r3, #92]	; 0x5c
 8003696:	e00b      	b.n	80036b0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f043 0210 	orr.w	r2, r3, #16
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f001 f835 	bl	8004720 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2260      	movs	r2, #96	; 0x60
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d011      	beq.n	80036ec <HAL_ADC_IRQHandler+0x374>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8b4 	bl	800384c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_ADC_IRQHandler+0x3a4>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f001 f81b 	bl	8004748 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d012      	beq.n	800374c <HAL_ADC_IRQHandler+0x3d4>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f001 f80d 	bl	800475c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d043      	beq.n	80037de <HAL_ADC_IRQHandler+0x466>
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d03e      	beq.n	80037de <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	e021      	b.n	80037b2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800377c:	d004      	beq.n	8003788 <HAL_ADC_IRQHandler+0x410>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_ADC_IRQHandler+0x4ac>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_ADC_IRQHandler+0x414>
 8003788:	4b29      	ldr	r3, [pc, #164]	; (8003830 <HAL_ADC_IRQHandler+0x4b8>)
 800378a:	e000      	b.n	800378e <HAL_ADC_IRQHandler+0x416>
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_ADC_IRQHandler+0x4bc>)
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fb8c 	bl	8002eac <LL_ADC_GetMultiDMATransfer>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800379a:	2301      	movs	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e008      	b.n	80037b2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80037ae:	2301      	movs	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d10e      	bne.n	80037d6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	f043 0202 	orr.w	r2, r3, #2
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f845 	bl	8003860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2210      	movs	r2, #16
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d018      	beq.n	800381a <HAL_ADC_IRQHandler+0x4a2>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	f043 0208 	orr.w	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003812:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 ff8d 	bl	8004734 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800381a:	bf00      	nop
 800381c:	3728      	adds	r7, #40	; 0x28
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	50000100 	.word	0x50000100
 8003828:	50000500 	.word	0x50000500
 800382c:	50000400 	.word	0x50000400
 8003830:	50000300 	.word	0x50000300
 8003834:	50000700 	.word	0x50000700

08003838 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b0b6      	sub	sp, #216	; 0xd8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800388e:	2b01      	cmp	r3, #1
 8003890:	d102      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x24>
 8003892:	2302      	movs	r3, #2
 8003894:	f000 bc13 	b.w	80040be <HAL_ADC_ConfigChannel+0x84a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fb84 	bl	8002fb2 <LL_ADC_REG_IsConversionOngoing>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f040 83f3 	bne.w	8004098 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f7ff fa57 	bl	8002d72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fb72 	bl	8002fb2 <LL_ADC_REG_IsConversionOngoing>
 80038ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fb7e 	bl	8002fd8 <LL_ADC_INJ_IsConversionOngoing>
 80038dc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 81d9 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 81d4 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038fc:	d10f      	bne.n	800391e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	4619      	mov	r1, r3
 800390a:	f7ff fa71 	bl	8002df0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fa05 	bl	8002d26 <LL_ADC_SetSamplingTimeCommonConfig>
 800391c:	e00e      	b.n	800393c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	461a      	mov	r2, r3
 800392c:	f7ff fa60 	bl	8002df0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f9f5 	bl	8002d26 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b04      	cmp	r3, #4
 800395c:	d022      	beq.n	80039a4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6919      	ldr	r1, [r3, #16]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800396e:	f7ff f94f 	bl	8002c10 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6919      	ldr	r1, [r3, #16]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	461a      	mov	r2, r3
 8003980:	f7ff f99b 	bl	8002cba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003990:	2b01      	cmp	r3, #1
 8003992:	d102      	bne.n	800399a <HAL_ADC_ConfigChannel+0x126>
 8003994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003998:	e000      	b.n	800399c <HAL_ADC_ConfigChannel+0x128>
 800399a:	2300      	movs	r3, #0
 800399c:	461a      	mov	r2, r3
 800399e:	f7ff f9a7 	bl	8002cf0 <LL_ADC_SetOffsetSaturation>
 80039a2:	e17b      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2100      	movs	r1, #0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f954 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x15c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff f949 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 80039c6:	4603      	mov	r3, r0
 80039c8:	0e9b      	lsrs	r3, r3, #26
 80039ca:	f003 021f 	and.w	r2, r3, #31
 80039ce:	e01e      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x19a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff f93e 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 80039dc:	4603      	mov	r3, r0
 80039de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80039fe:	2320      	movs	r3, #32
 8003a00:	e004      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x1b2>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	0e9b      	lsrs	r3, r3, #26
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	e018      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x1e4>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	e004      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d106      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff f90d 	bl	8002c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff f8f1 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x222>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff f8e6 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	0e9b      	lsrs	r3, r3, #26
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	e01e      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x260>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff f8db 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003ab4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	e004      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x278>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0e9b      	lsrs	r3, r3, #26
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	e018      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x2aa>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003b10:	2320      	movs	r3, #32
 8003b12:	e004      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d106      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff f8aa 	bl	8002c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff f88e 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x2e8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff f883 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003b52:	4603      	mov	r3, r0
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	f003 021f 	and.w	r2, r3, #31
 8003b5a:	e01e      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x326>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2102      	movs	r1, #2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f878 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	e004      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003b8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d105      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x33e>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	0e9b      	lsrs	r3, r3, #26
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	e016      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x36c>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	e004      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d106      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff f849 	bl	8002c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff f82d 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x3aa>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2103      	movs	r1, #3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f822 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	0e9b      	lsrs	r3, r3, #26
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	e017      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x3da>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2103      	movs	r1, #3
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff f817 	bl	8002c58 <LL_ADC_GetOffsetChannel>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x3f2>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	0e9b      	lsrs	r3, r3, #26
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	e011      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x416>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	e003      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d106      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	2103      	movs	r1, #3
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fff4 	bl	8002c84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff f973 	bl	8002f8c <LL_ADC_IsEnabled>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 813d 	bne.w	8003f28 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff f8c4 	bl	8002e48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4aa2      	ldr	r2, [pc, #648]	; (8003f50 <HAL_ADC_ConfigChannel+0x6dc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	f040 812e 	bne.w	8003f28 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x480>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e019      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x4b4>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e003      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	bf94      	ite	ls
 8003d22:	2301      	movls	r3, #1
 8003d24:	2300      	movhi	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d079      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x4d4>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	3301      	adds	r3, #1
 8003d40:	069b      	lsls	r3, r3, #26
 8003d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d46:	e015      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x500>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e003      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	069b      	lsls	r3, r3, #26
 8003d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x520>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0e9b      	lsrs	r3, r3, #26
 8003d86:	3301      	adds	r3, #1
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	e017      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x550>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e003      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	ea42 0103 	orr.w	r1, r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x576>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	051b      	lsls	r3, r3, #20
 8003de8:	e018      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x5a8>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003e02:	2320      	movs	r3, #32
 8003e04:	e003      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	e07e      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x5c8>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0e9b      	lsrs	r3, r3, #26
 8003e32:	3301      	adds	r3, #1
 8003e34:	069b      	lsls	r3, r3, #26
 8003e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e3a:	e015      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x5f4>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e003      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	069b      	lsls	r3, r3, #26
 8003e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x614>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	e017      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x644>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	61fb      	str	r3, [r7, #28]
  return result;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e003      	b.n	8003eac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	ea42 0103 	orr.w	r1, r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x670>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	3b1e      	subs	r3, #30
 8003edc:	051b      	lsls	r3, r3, #20
 8003ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	e01b      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x6a8>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	613b      	str	r3, [r7, #16]
  return result;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e003      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f003 021f 	and.w	r2, r3, #31
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	3b1e      	subs	r3, #30
 8003f16:	051b      	lsls	r3, r3, #20
 8003f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7fe ff64 	bl	8002df0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_ADC_ConfigChannel+0x6e0>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80be 	beq.w	80040b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3e:	d004      	beq.n	8003f4a <HAL_ADC_ConfigChannel+0x6d6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_ADC_ConfigChannel+0x6e4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10a      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x6ec>
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <HAL_ADC_ConfigChannel+0x6e8>)
 8003f4c:	e009      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x6ee>
 8003f4e:	bf00      	nop
 8003f50:	407f0000 	.word	0x407f0000
 8003f54:	80080000 	.word	0x80080000
 8003f58:	50000100 	.word	0x50000100
 8003f5c:	50000300 	.word	0x50000300
 8003f60:	4b59      	ldr	r3, [pc, #356]	; (80040c8 <HAL_ADC_ConfigChannel+0x854>)
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fe46 	bl	8002bf4 <LL_ADC_GetCommonPathInternalCh>
 8003f68:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a56      	ldr	r2, [pc, #344]	; (80040cc <HAL_ADC_ConfigChannel+0x858>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_ADC_ConfigChannel+0x70c>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a55      	ldr	r2, [pc, #340]	; (80040d0 <HAL_ADC_ConfigChannel+0x85c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d13a      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d134      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f94:	d005      	beq.n	8003fa2 <HAL_ADC_ConfigChannel+0x72e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4e      	ldr	r2, [pc, #312]	; (80040d4 <HAL_ADC_ConfigChannel+0x860>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	f040 8085 	bne.w	80040ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003faa:	d004      	beq.n	8003fb6 <HAL_ADC_ConfigChannel+0x742>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a49      	ldr	r2, [pc, #292]	; (80040d8 <HAL_ADC_ConfigChannel+0x864>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x746>
 8003fb6:	4a49      	ldr	r2, [pc, #292]	; (80040dc <HAL_ADC_ConfigChannel+0x868>)
 8003fb8:	e000      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x748>
 8003fba:	4a43      	ldr	r2, [pc, #268]	; (80040c8 <HAL_ADC_ConfigChannel+0x854>)
 8003fbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fe fe01 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fcc:	4b44      	ldr	r3, [pc, #272]	; (80040e0 <HAL_ADC_ConfigChannel+0x86c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	4a44      	ldr	r2, [pc, #272]	; (80040e4 <HAL_ADC_ConfigChannel+0x870>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fe6:	e002      	b.n	8003fee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f9      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ff4:	e05a      	b.n	80040ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <HAL_ADC_ConfigChannel+0x874>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d125      	bne.n	800404c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11f      	bne.n	800404c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a31      	ldr	r2, [pc, #196]	; (80040d8 <HAL_ADC_ConfigChannel+0x864>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d104      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x7ac>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a34      	ldr	r2, [pc, #208]	; (80040ec <HAL_ADC_ConfigChannel+0x878>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d047      	beq.n	80040b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004028:	d004      	beq.n	8004034 <HAL_ADC_ConfigChannel+0x7c0>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <HAL_ADC_ConfigChannel+0x864>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x7c4>
 8004034:	4a29      	ldr	r2, [pc, #164]	; (80040dc <HAL_ADC_ConfigChannel+0x868>)
 8004036:	e000      	b.n	800403a <HAL_ADC_ConfigChannel+0x7c6>
 8004038:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <HAL_ADC_ConfigChannel+0x854>)
 800403a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800403e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe fdc2 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800404a:	e031      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <HAL_ADC_ConfigChannel+0x87c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d12d      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d127      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_ADC_ConfigChannel+0x864>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004074:	d004      	beq.n	8004080 <HAL_ADC_ConfigChannel+0x80c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_ADC_ConfigChannel+0x864>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x810>
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_ADC_ConfigChannel+0x868>)
 8004082:	e000      	b.n	8004086 <HAL_ADC_ConfigChannel+0x812>
 8004084:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <HAL_ADC_ConfigChannel+0x854>)
 8004086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800408a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7fe fd9c 	bl	8002bce <LL_ADC_SetCommonPathInternalCh>
 8004096:	e00c      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ac:	bf00      	nop
 80040ae:	e000      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040be:	4618      	mov	r0, r3
 80040c0:	37d8      	adds	r7, #216	; 0xd8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	50000700 	.word	0x50000700
 80040cc:	c3210000 	.word	0xc3210000
 80040d0:	90c00010 	.word	0x90c00010
 80040d4:	50000600 	.word	0x50000600
 80040d8:	50000100 	.word	0x50000100
 80040dc:	50000300 	.word	0x50000300
 80040e0:	20000000 	.word	0x20000000
 80040e4:	053e2d63 	.word	0x053e2d63
 80040e8:	c7520000 	.word	0xc7520000
 80040ec:	50000500 	.word	0x50000500
 80040f0:	cb840000 	.word	0xcb840000

080040f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe ff41 	bl	8002f8c <LL_ADC_IsEnabled>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d176      	bne.n	80041fe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <ADC_Enable+0x114>)
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	f043 0210 	orr.w	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	f043 0201 	orr.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e062      	b.n	8004200 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe ff10 	bl	8002f64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800414c:	d004      	beq.n	8004158 <ADC_Enable+0x64>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2e      	ldr	r2, [pc, #184]	; (800420c <ADC_Enable+0x118>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <ADC_Enable+0x68>
 8004158:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <ADC_Enable+0x11c>)
 800415a:	e000      	b.n	800415e <ADC_Enable+0x6a>
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <ADC_Enable+0x120>)
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe fd48 	bl	8002bf4 <LL_ADC_GetCommonPathInternalCh>
 8004164:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <ADC_Enable+0x124>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <ADC_Enable+0x128>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004188:	e002      	b.n	8004190 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3b01      	subs	r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f9      	bne.n	800418a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004196:	f7fe fcfb 	bl	8002b90 <HAL_GetTick>
 800419a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800419c:	e028      	b.n	80041f0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fef2 	bl	8002f8c <LL_ADC_IsEnabled>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fed6 	bl	8002f64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041b8:	f7fe fcea 	bl	8002b90 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d914      	bls.n	80041f0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d00d      	beq.n	80041f0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	f043 0210 	orr.w	r2, r3, #16
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	f043 0201 	orr.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e007      	b.n	8004200 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d1cf      	bne.n	800419e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	8000003f 	.word	0x8000003f
 800420c:	50000100 	.word	0x50000100
 8004210:	50000300 	.word	0x50000300
 8004214:	50000700 	.word	0x50000700
 8004218:	20000000 	.word	0x20000000
 800421c:	053e2d63 	.word	0x053e2d63

08004220 <LL_ADC_SetCommonPathInternalCh>:
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_ADC_GetCommonPathInternalCh>:
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <LL_ADC_SetOffset>:
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3360      	adds	r3, #96	; 0x60
 8004276:	461a      	mov	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <LL_ADC_SetOffset+0x44>)
 8004286:	4013      	ands	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	601a      	str	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	03fff000 	.word	0x03fff000

080042ac <LL_ADC_GetOffsetChannel>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3360      	adds	r3, #96	; 0x60
 80042ba:	461a      	mov	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_ADC_SetOffsetState>:
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3360      	adds	r3, #96	; 0x60
 80042e8:	461a      	mov	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	601a      	str	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_ADC_SetOffsetSign>:
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3360      	adds	r3, #96	; 0x60
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	431a      	orrs	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	601a      	str	r2, [r3, #0]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_ADC_SetOffsetSaturation>:
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3360      	adds	r3, #96	; 0x60
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	431a      	orrs	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	601a      	str	r2, [r3, #0]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	615a      	str	r2, [r3, #20]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_INJ_GetTrigAuto>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_ADC_SetChannelSamplingTime>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3314      	adds	r3, #20
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	0e5b      	lsrs	r3, r3, #25
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	4413      	add	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	0d1b      	lsrs	r3, r3, #20
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2107      	movs	r1, #7
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	401a      	ands	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	0d1b      	lsrs	r3, r3, #20
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	431a      	orrs	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <LL_ADC_SetChannelSingleDiff>:
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442c:	43db      	mvns	r3, r3
 800442e:	401a      	ands	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0318 	and.w	r3, r3, #24
 8004436:	4908      	ldr	r1, [pc, #32]	; (8004458 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004438:	40d9      	lsrs	r1, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	400b      	ands	r3, r1
 800443e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004442:	431a      	orrs	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	0007ffff 	.word	0x0007ffff

0800445c <LL_ADC_GetMultimode>:
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 031f 	and.w	r3, r3, #31
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_IsEnabled>:
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <LL_ADC_IsEnabled+0x18>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <LL_ADC_IsEnabled+0x1a>
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_ADC_REG_IsConversionOngoing>:
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_ADC_INJ_StartConversion>:
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044d8:	f043 0208 	orr.w	r2, r3, #8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_INJ_IsConversionOngoing>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d101      	bne.n	8004504 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004524:	d004      	beq.n	8004530 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a78      	ldr	r2, [pc, #480]	; (800470c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_ADCEx_InjectedStart_IT+0x20>
 8004530:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8004532:	e000      	b.n	8004536 <HAL_ADCEx_InjectedStart_IT+0x22>
 8004534:	4b77      	ldr	r3, [pc, #476]	; (8004714 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff90 	bl	800445c <LL_ADC_GetMultimode>
 800453c:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff ffd2 	bl	80044ec <LL_ADC_INJ_IsConversionOngoing>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
 8004550:	e0d8      	b.n	8004704 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800455c:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004564:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0c0      	b.n	8004704 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_ADCEx_InjectedStart_IT+0x7c>
 800458c:	2302      	movs	r3, #2
 800458e:	e0b9      	b.n	8004704 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff fdab 	bl	80040f4 <ADC_Enable>
 800459e:	4603      	mov	r3, r0
 80045a0:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 80a8 	bne.w	80046fa <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	f023 0208 	bic.w	r2, r3, #8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	661a      	str	r2, [r3, #96]	; 0x60
 80045c2:	e002      	b.n	80045ca <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4a      	ldr	r2, [pc, #296]	; (800470c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_ADCEx_InjectedStart_IT+0xe8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a4a      	ldr	r2, [pc, #296]	; (8004718 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d002      	beq.n	80045f8 <HAL_ADCEx_InjectedStart_IT+0xe4>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e003      	b.n	8004600 <HAL_ADCEx_InjectedStart_IT+0xec>
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_ADCEx_InjectedStart_IT+0x208>)
 80045fa:	e001      	b.n	8004600 <HAL_ADCEx_InjectedStart_IT+0xec>
 80045fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	4293      	cmp	r3, r2
 8004606:	d002      	beq.n	800460e <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2260      	movs	r2, #96	; 0x60
 8004620:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004646:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d110      	bne.n	8004672 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0220 	bic.w	r2, r2, #32
 800465e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466e:	605a      	str	r2, [r3, #4]
          break;
 8004670:	e010      	b.n	8004694 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004680:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0220 	orr.w	r2, r2, #32
 8004690:	605a      	str	r2, [r3, #4]
          break;
 8004692:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_ADCEx_InjectedStart_IT+0x19e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d002      	beq.n	80046ae <HAL_ADCEx_InjectedStart_IT+0x19a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	e003      	b.n	80046b6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_ADCEx_InjectedStart_IT+0x208>)
 80046b0:	e001      	b.n	80046b6 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 80046b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d008      	beq.n	80046d0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d002      	beq.n	80046d0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b07      	cmp	r3, #7
 80046ce:	d10d      	bne.n	80046ec <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fe63 	bl	80043a0 <LL_ADC_INJ_GetTrigAuto>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d110      	bne.n	8004702 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff feed 	bl	80044c4 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80046ea:	e00a      	b.n	8004702 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80046f8:	e003      	b.n	8004702 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	50000100 	.word	0x50000100
 8004710:	50000300 	.word	0x50000300
 8004714:	50000700 	.word	0x50000700
 8004718:	50000500 	.word	0x50000500
 800471c:	50000400 	.word	0x50000400

08004720 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0b6      	sub	sp, #216	; 0xd8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d102      	bne.n	80047ae <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80047a8:	2302      	movs	r3, #2
 80047aa:	f000 bcfd 	b.w	80051a8 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d130      	bne.n	8004828 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d179      	bne.n	80048c2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	0e9b      	lsrs	r3, r3, #26
 80047dc:	025b      	lsls	r3, r3, #9
 80047de:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80047ea:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f6:	e007      	b.n	8004808 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0e9b      	lsrs	r3, r3, #26
 80047fe:	025b      	lsls	r3, r3, #9
 8004800:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800480e:	4b84      	ldr	r3, [pc, #528]	; (8004a20 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800481a:	430b      	orrs	r3, r1
 800481c:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004824:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004826:	e04c      	b.n	80048c2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800482c:	2b00      	cmp	r3, #0
 800482e:	d11d      	bne.n	800486c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004854:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004860:	e004      	b.n	800486c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	3b01      	subs	r3, #1
 8004868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0e9b      	lsrs	r3, r3, #26
 8004872:	f003 021f 	and.w	r2, r3, #31
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800489a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048b2:	4b5b      	ldr	r3, [pc, #364]	; (8004a20 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	430b      	orrs	r3, r1
 80048c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fe10 	bl	80044ec <LL_ADC_INJ_IsConversionOngoing>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d124      	bne.n	800491c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d112      	bne.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80048ec:	055a      	lsls	r2, r3, #21
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048f4:	051b      	lsls	r3, r3, #20
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	e00c      	b.n	800491c <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004912:	055a      	lsls	r2, r3, #21
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fdbc 	bl	800449e <LL_ADC_REG_IsConversionOngoing>
 8004926:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fddc 	bl	80044ec <LL_ADC_INJ_IsConversionOngoing>
 8004934:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 822e 	bne.w	8004d9e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 8229 	bne.w	8004d9e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d116      	bne.n	800498a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004962:	2b01      	cmp	r3, #1
 8004964:	d108      	bne.n	8004978 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004974:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004976:	e01f      	b.n	80049b8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004986:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004988:	e016      	b.n	80049b8 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004990:	2b01      	cmp	r3, #1
 8004992:	d109      	bne.n	80049a8 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80049a6:	e007      	b.n	80049b8 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80049b6:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d110      	bne.n	80049e4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	430b      	orrs	r3, r1
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0202 	orr.w	r2, r2, #2
 80049e0:	611a      	str	r2, [r3, #16]
 80049e2:	e007      	b.n	80049f4 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0202 	bic.w	r2, r2, #2
 80049f2:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049fc:	d112      	bne.n	8004a24 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7ff fcd7 	bl	80043bc <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fcaf 	bl	800437a <LL_ADC_SetSamplingTimeCommonConfig>
 8004a1c:	e011      	b.n	8004a42 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004a1e:	bf00      	nop
 8004a20:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6819      	ldr	r1, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f7ff fcc3 	bl	80043bc <LL_ADC_SetChannelSamplingTime>
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fc9c 	bl	800437a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d022      	beq.n	8004aaa <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6919      	ldr	r1, [r3, #16]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a74:	f7ff fbf6 	bl	8004264 <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6919      	ldr	r1, [r3, #16]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	461a      	mov	r2, r3
 8004a86:	f7ff fc42 	bl	800430e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a9e:	e000      	b.n	8004aa2 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f7ff fc4e 	bl	8004344 <LL_ADC_SetOffsetSaturation>
 8004aa8:	e179      	b.n	8004d9e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fbfb 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fbf0 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004acc:	4603      	mov	r3, r0
 8004ace:	0e9b      	lsrs	r3, r3, #26
 8004ad0:	f003 021f 	and.w	r2, r3, #31
 8004ad4:	e01e      	b.n	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fbe5 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004af4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004afc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8004b04:	2320      	movs	r3, #32
 8004b06:	e004      	b.n	8004b12 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b0c:	fab3 f383 	clz	r3, r3
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	0e9b      	lsrs	r3, r3, #26
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	e018      	b.n	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b38:	fa93 f3a3 	rbit	r3, r3
 8004b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004b40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004b48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004b50:	2320      	movs	r3, #32
 8004b52:	e004      	b.n	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8004b54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b58:	fab3 f383 	clz	r3, r3
 8004b5c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d106      	bne.n	8004b70 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fbb4 	bl	80042d8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2101      	movs	r1, #1
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fb98 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fb8d 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004b92:	4603      	mov	r3, r0
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	f003 021f 	and.w	r2, r3, #31
 8004b9a:	e01e      	b.n	8004bda <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fb82 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004bca:	2320      	movs	r3, #32
 8004bcc:	e004      	b.n	8004bd8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d105      	bne.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	0e9b      	lsrs	r3, r3, #26
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	e018      	b.n	8004c24 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004c0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8004c16:	2320      	movs	r3, #32
 8004c18:	e004      	b.n	8004c24 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c1e:	fab3 f383 	clz	r3, r3
 8004c22:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d106      	bne.n	8004c36 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2101      	movs	r1, #1
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fb51 	bl	80042d8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fb35 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2102      	movs	r1, #2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fb2a 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	0e9b      	lsrs	r3, r3, #26
 8004c5c:	f003 021f 	and.w	r2, r3, #31
 8004c60:	e01e      	b.n	8004ca0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2102      	movs	r1, #2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fb1f 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004c90:	2320      	movs	r3, #32
 8004c92:	e004      	b.n	8004c9e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c98:	fab3 f383 	clz	r3, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	0e9b      	lsrs	r3, r3, #26
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	e014      	b.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	e004      	b.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d106      	bne.n	8004cf4 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff faf2 	bl	80042d8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fad6 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2103      	movs	r1, #3
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff facb 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004d16:	4603      	mov	r3, r0
 8004d18:	0e9b      	lsrs	r3, r3, #26
 8004d1a:	f003 021f 	and.w	r2, r3, #31
 8004d1e:	e017      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2103      	movs	r1, #3
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fac0 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8004d42:	2320      	movs	r3, #32
 8004d44:	e003      	b.n	8004d4e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8004d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0e9b      	lsrs	r3, r3, #26
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	e011      	b.n	8004d8c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d78:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004d80:	2320      	movs	r3, #32
 8004d82:	e003      	b.n	8004d8c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d106      	bne.n	8004d9e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2103      	movs	r1, #3
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fa9d 	bl	80042d8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fb68 	bl	8004478 <LL_ADC_IsEnabled>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f040 813d 	bne.w	800502a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f7ff fb29 	bl	8004414 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	4aa2      	ldr	r2, [pc, #648]	; (8005050 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	f040 812e 	bne.w	800502a <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	0e9b      	lsrs	r3, r3, #26
 8004de4:	3301      	adds	r3, #1
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2b09      	cmp	r3, #9
 8004dec:	bf94      	ite	ls
 8004dee:	2301      	movls	r3, #1
 8004df0:	2300      	movhi	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e019      	b.n	8004e2a <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e06:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004e0e:	2320      	movs	r3, #32
 8004e10:	e003      	b.n	8004e1a <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8004e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	2b09      	cmp	r3, #9
 8004e22:	bf94      	ite	ls
 8004e24:	2301      	movls	r3, #1
 8004e26:	2300      	movhi	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d079      	beq.n	8004f22 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d107      	bne.n	8004e4a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	0e9b      	lsrs	r3, r3, #26
 8004e40:	3301      	adds	r3, #1
 8004e42:	069b      	lsls	r3, r3, #26
 8004e44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e48:	e015      	b.n	8004e76 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8004e62:	2320      	movs	r3, #32
 8004e64:	e003      	b.n	8004e6e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	069b      	lsls	r3, r3, #26
 8004e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	0e9b      	lsrs	r3, r3, #26
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2101      	movs	r1, #1
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	e017      	b.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9e:	fa93 f3a3 	rbit	r3, r3
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004eae:	2320      	movs	r3, #32
 8004eb0:	e003      	b.n	8004eba <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8004eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	ea42 0103 	orr.w	r1, r2, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	0e9b      	lsrs	r3, r3, #26
 8004edc:	3301      	adds	r3, #1
 8004ede:	f003 021f 	and.w	r2, r3, #31
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	051b      	lsls	r3, r3, #20
 8004eea:	e018      	b.n	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8004f04:	2320      	movs	r3, #32
 8004f06:	e003      	b.n	8004f10 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	fab3 f383 	clz	r3, r3
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	3301      	adds	r3, #1
 8004f12:	f003 021f 	and.w	r2, r3, #31
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	e07e      	b.n	8005020 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d107      	bne.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	0e9b      	lsrs	r3, r3, #26
 8004f34:	3301      	adds	r3, #1
 8004f36:	069b      	lsls	r3, r3, #26
 8004f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f3c:	e015      	b.n	8004f6a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004f56:	2320      	movs	r3, #32
 8004f58:	e003      	b.n	8004f62 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3301      	adds	r3, #1
 8004f64:	069b      	lsls	r3, r3, #26
 8004f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	0e9b      	lsrs	r3, r3, #26
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2101      	movs	r1, #1
 8004f84:	fa01 f303 	lsl.w	r3, r1, r3
 8004f88:	e017      	b.n	8004fba <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	fa93 f3a3 	rbit	r3, r3
 8004f96:	61bb      	str	r3, [r7, #24]
  return result;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004fa2:	2320      	movs	r3, #32
 8004fa4:	e003      	b.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	fab3 f383 	clz	r3, r3
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	ea42 0103 	orr.w	r1, r2, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	0e9b      	lsrs	r3, r3, #26
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f003 021f 	and.w	r2, r3, #31
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	3b1e      	subs	r3, #30
 8004fde:	051b      	lsls	r3, r3, #20
 8004fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fe4:	e01b      	b.n	800501e <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	60fb      	str	r3, [r7, #12]
  return result;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004ffe:	2320      	movs	r3, #32
 8005000:	e003      	b.n	800500a <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	fab3 f383 	clz	r3, r3
 8005008:	b2db      	uxtb	r3, r3
 800500a:	3301      	adds	r3, #1
 800500c:	f003 021f 	and.w	r2, r3, #31
 8005010:	4613      	mov	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	3b1e      	subs	r3, #30
 8005018:	051b      	lsls	r3, r3, #20
 800501a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800501e:	430b      	orrs	r3, r1
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	6892      	ldr	r2, [r2, #8]
 8005024:	4619      	mov	r1, r3
 8005026:	f7ff f9c9 	bl	80043bc <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005030:	4013      	ands	r3, r2
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80b2 	beq.w	800519c <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005040:	d004      	beq.n	800504c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a04      	ldr	r2, [pc, #16]	; (8005058 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d109      	bne.n	8005060 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 800504e:	e008      	b.n	8005062 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8005050:	407f0000 	.word	0x407f0000
 8005054:	80080000 	.word	0x80080000
 8005058:	50000100 	.word	0x50000100
 800505c:	50000300 	.word	0x50000300
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f8ef 	bl	8004246 <LL_ADC_GetCommonPathInternalCh>
 8005068:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a50      	ldr	r2, [pc, #320]	; (80051b4 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a4f      	ldr	r2, [pc, #316]	; (80051b8 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d139      	bne.n	80050f4 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d133      	bne.n	80050f4 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005094:	d004      	beq.n	80050a0 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a48      	ldr	r2, [pc, #288]	; (80051bc <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d17a      	bne.n	8005196 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050a8:	d004      	beq.n	80050b4 <HAL_ADCEx_InjectedConfigChannel+0x930>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a44      	ldr	r2, [pc, #272]	; (80051c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_ADCEx_InjectedConfigChannel+0x934>
 80050b4:	4a43      	ldr	r2, [pc, #268]	; (80051c4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80050b6:	e000      	b.n	80050ba <HAL_ADCEx_InjectedConfigChannel+0x936>
 80050b8:	4a3d      	ldr	r2, [pc, #244]	; (80051b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80050ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f7ff f8ab 	bl	8004220 <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80050ca:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	4a3e      	ldr	r2, [pc, #248]	; (80051cc <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	099a      	lsrs	r2, r3, #6
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80050e2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80050e4:	e002      	b.n	80050ec <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f9      	bne.n	80050e6 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050f2:	e050      	b.n	8005196 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a35      	ldr	r2, [pc, #212]	; (80051d0 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d125      	bne.n	800514a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11f      	bne.n	800514a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d104      	bne.n	800511e <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2e      	ldr	r2, [pc, #184]	; (80051d4 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d03d      	beq.n	800519a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005126:	d004      	beq.n	8005132 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8005132:	4a24      	ldr	r2, [pc, #144]	; (80051c4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005134:	e000      	b.n	8005138 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8005136:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800513c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f7ff f86c 	bl	8004220 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005148:	e027      	b.n	800519a <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a22      	ldr	r2, [pc, #136]	; (80051d8 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d123      	bne.n	800519c <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11d      	bne.n	800519c <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005172:	d004      	beq.n	800517e <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800517e:	4a11      	ldr	r2, [pc, #68]	; (80051c4 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005180:	e000      	b.n	8005184 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8005182:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005188:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7ff f846 	bl	8004220 <LL_ADC_SetCommonPathInternalCh>
 8005194:	e002      	b.n	800519c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800519a:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80051a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	37d8      	adds	r7, #216	; 0xd8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	50000700 	.word	0x50000700
 80051b4:	c3210000 	.word	0xc3210000
 80051b8:	90c00010 	.word	0x90c00010
 80051bc:	50000600 	.word	0x50000600
 80051c0:	50000100 	.word	0x50000100
 80051c4:	50000300 	.word	0x50000300
 80051c8:	20000000 	.word	0x20000000
 80051cc:	053e2d63 	.word	0x053e2d63
 80051d0:	c7520000 	.word	0xc7520000
 80051d4:	50000500 	.word	0x50000500
 80051d8:	cb840000 	.word	0xcb840000

080051dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b0a1      	sub	sp, #132	; 0x84
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0e7      	b.n	80053ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005202:	2300      	movs	r3, #0
 8005204:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005206:	2300      	movs	r3, #0
 8005208:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005212:	d102      	bne.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005214:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	e009      	b.n	800522e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6e      	ldr	r2, [pc, #440]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d102      	bne.n	800522a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005224:	4b6d      	ldr	r3, [pc, #436]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	e001      	b.n	800522e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0be      	b.n	80053ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff f925 	bl	800449e <LL_ADC_REG_IsConversionOngoing>
 8005254:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff f91f 	bl	800449e <LL_ADC_REG_IsConversionOngoing>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 80a0 	bne.w	80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800526a:	2b00      	cmp	r3, #0
 800526c:	f040 809c 	bne.w	80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005278:	d004      	beq.n	8005284 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a55      	ldr	r2, [pc, #340]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005284:	4b56      	ldr	r3, [pc, #344]	; (80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005286:	e000      	b.n	800528a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005288:	4b56      	ldr	r3, [pc, #344]	; (80053e4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800528a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d04b      	beq.n	800532c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	6859      	ldr	r1, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052a6:	035b      	lsls	r3, r3, #13
 80052a8:	430b      	orrs	r3, r1
 80052aa:	431a      	orrs	r2, r3
 80052ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052b8:	d004      	beq.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a45      	ldr	r2, [pc, #276]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10f      	bne.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80052c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80052c8:	f7ff f8d6 	bl	8004478 <LL_ADC_IsEnabled>
 80052cc:	4604      	mov	r4, r0
 80052ce:	4841      	ldr	r0, [pc, #260]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052d0:	f7ff f8d2 	bl	8004478 <LL_ADC_IsEnabled>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4323      	orrs	r3, r4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e012      	b.n	800530a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80052e4:	483c      	ldr	r0, [pc, #240]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80052e6:	f7ff f8c7 	bl	8004478 <LL_ADC_IsEnabled>
 80052ea:	4604      	mov	r4, r0
 80052ec:	483b      	ldr	r0, [pc, #236]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80052ee:	f7ff f8c3 	bl	8004478 <LL_ADC_IsEnabled>
 80052f2:	4603      	mov	r3, r0
 80052f4:	431c      	orrs	r4, r3
 80052f6:	483c      	ldr	r0, [pc, #240]	; (80053e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80052f8:	f7ff f8be 	bl	8004478 <LL_ADC_IsEnabled>
 80052fc:	4603      	mov	r3, r0
 80052fe:	4323      	orrs	r3, r4
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d056      	beq.n	80053bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800530e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005316:	f023 030f 	bic.w	r3, r3, #15
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	6811      	ldr	r1, [r2, #0]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	6892      	ldr	r2, [r2, #8]
 8005322:	430a      	orrs	r2, r1
 8005324:	431a      	orrs	r2, r3
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800532a:	e047      	b.n	80053bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800532c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005336:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005340:	d004      	beq.n	800534c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d10f      	bne.n	800536c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800534c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005350:	f7ff f892 	bl	8004478 <LL_ADC_IsEnabled>
 8005354:	4604      	mov	r4, r0
 8005356:	481f      	ldr	r0, [pc, #124]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005358:	f7ff f88e 	bl	8004478 <LL_ADC_IsEnabled>
 800535c:	4603      	mov	r3, r0
 800535e:	4323      	orrs	r3, r4
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e012      	b.n	8005392 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800536c:	481a      	ldr	r0, [pc, #104]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800536e:	f7ff f883 	bl	8004478 <LL_ADC_IsEnabled>
 8005372:	4604      	mov	r4, r0
 8005374:	4819      	ldr	r0, [pc, #100]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005376:	f7ff f87f 	bl	8004478 <LL_ADC_IsEnabled>
 800537a:	4603      	mov	r3, r0
 800537c:	431c      	orrs	r4, r3
 800537e:	481a      	ldr	r0, [pc, #104]	; (80053e8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005380:	f7ff f87a 	bl	8004478 <LL_ADC_IsEnabled>
 8005384:	4603      	mov	r3, r0
 8005386:	4323      	orrs	r3, r4
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d012      	beq.n	80053bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80053a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053a6:	e009      	b.n	80053bc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80053ba:	e000      	b.n	80053be <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80053c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3784      	adds	r7, #132	; 0x84
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd90      	pop	{r4, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	50000100 	.word	0x50000100
 80053d8:	50000400 	.word	0x50000400
 80053dc:	50000500 	.word	0x50000500
 80053e0:	50000300 	.word	0x50000300
 80053e4:	50000700 	.word	0x50000700
 80053e8:	50000600 	.word	0x50000600

080053ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <__NVIC_SetPriorityGrouping+0x44>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005408:	4013      	ands	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800541e:	4a04      	ldr	r2, [pc, #16]	; (8005430 <__NVIC_SetPriorityGrouping+0x44>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	60d3      	str	r3, [r2, #12]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <__NVIC_GetPriorityGrouping+0x18>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	f003 0307 	and.w	r3, r3, #7
}
 8005442:	4618      	mov	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	e000ed00 	.word	0xe000ed00

08005450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545e:	2b00      	cmp	r3, #0
 8005460:	db0b      	blt.n	800547a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	f003 021f 	and.w	r2, r3, #31
 8005468:	4907      	ldr	r1, [pc, #28]	; (8005488 <__NVIC_EnableIRQ+0x38>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2001      	movs	r0, #1
 8005472:	fa00 f202 	lsl.w	r2, r0, r2
 8005476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000e100 	.word	0xe000e100

0800548c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	6039      	str	r1, [r7, #0]
 8005496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549c:	2b00      	cmp	r3, #0
 800549e:	db0a      	blt.n	80054b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	490c      	ldr	r1, [pc, #48]	; (80054d8 <__NVIC_SetPriority+0x4c>)
 80054a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054aa:	0112      	lsls	r2, r2, #4
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	440b      	add	r3, r1
 80054b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054b4:	e00a      	b.n	80054cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	4908      	ldr	r1, [pc, #32]	; (80054dc <__NVIC_SetPriority+0x50>)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	3b04      	subs	r3, #4
 80054c4:	0112      	lsls	r2, r2, #4
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	440b      	add	r3, r1
 80054ca:	761a      	strb	r2, [r3, #24]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	e000e100 	.word	0xe000e100
 80054dc:	e000ed00 	.word	0xe000ed00

080054e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b089      	sub	sp, #36	; 0x24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f1c3 0307 	rsb	r3, r3, #7
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	bf28      	it	cs
 80054fe:	2304      	movcs	r3, #4
 8005500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3304      	adds	r3, #4
 8005506:	2b06      	cmp	r3, #6
 8005508:	d902      	bls.n	8005510 <NVIC_EncodePriority+0x30>
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3b03      	subs	r3, #3
 800550e:	e000      	b.n	8005512 <NVIC_EncodePriority+0x32>
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005514:	f04f 32ff 	mov.w	r2, #4294967295
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43da      	mvns	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	401a      	ands	r2, r3
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005528:	f04f 31ff 	mov.w	r1, #4294967295
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	43d9      	mvns	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005538:	4313      	orrs	r3, r2
         );
}
 800553a:	4618      	mov	r0, r3
 800553c:	3724      	adds	r7, #36	; 0x24
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005558:	d301      	bcc.n	800555e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800555a:	2301      	movs	r3, #1
 800555c:	e00f      	b.n	800557e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <SysTick_Config+0x40>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3b01      	subs	r3, #1
 8005564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005566:	210f      	movs	r1, #15
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	f7ff ff8e 	bl	800548c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <SysTick_Config+0x40>)
 8005572:	2200      	movs	r2, #0
 8005574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005576:	4b04      	ldr	r3, [pc, #16]	; (8005588 <SysTick_Config+0x40>)
 8005578:	2207      	movs	r2, #7
 800557a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	e000e010 	.word	0xe000e010

0800558c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ff29 	bl	80053ec <__NVIC_SetPriorityGrouping>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	4603      	mov	r3, r0
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055b0:	f7ff ff40 	bl	8005434 <__NVIC_GetPriorityGrouping>
 80055b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	6978      	ldr	r0, [r7, #20]
 80055bc:	f7ff ff90 	bl	80054e0 <NVIC_EncodePriority>
 80055c0:	4602      	mov	r2, r0
 80055c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff ff5f 	bl	800548c <__NVIC_SetPriority>
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	4603      	mov	r3, r0
 80055de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff ff33 	bl	8005450 <__NVIC_EnableIRQ>
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ffa4 	bl	8005548 <SysTick_Config>
 8005600:	4603      	mov	r3, r0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800561a:	e15a      	b.n	80058d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2101      	movs	r1, #1
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 814c 	beq.w	80058cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d005      	beq.n	800564c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005648:	2b02      	cmp	r3, #2
 800564a:	d130      	bne.n	80056ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	2203      	movs	r2, #3
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005682:	2201      	movs	r2, #1
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	091b      	lsrs	r3, r3, #4
 8005698:	f003 0201 	and.w	r2, r3, #1
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d017      	beq.n	80056ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	2203      	movs	r2, #3
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4013      	ands	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d123      	bne.n	800573e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	08da      	lsrs	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3208      	adds	r2, #8
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	220f      	movs	r2, #15
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	08da      	lsrs	r2, r3, #3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3208      	adds	r2, #8
 8005738:	6939      	ldr	r1, [r7, #16]
 800573a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	2203      	movs	r2, #3
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4013      	ands	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 0203 	and.w	r2, r3, #3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80a6 	beq.w	80058cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005780:	4b5b      	ldr	r3, [pc, #364]	; (80058f0 <HAL_GPIO_Init+0x2e4>)
 8005782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005784:	4a5a      	ldr	r2, [pc, #360]	; (80058f0 <HAL_GPIO_Init+0x2e4>)
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	6613      	str	r3, [r2, #96]	; 0x60
 800578c:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <HAL_GPIO_Init+0x2e4>)
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005798:	4a56      	ldr	r2, [pc, #344]	; (80058f4 <HAL_GPIO_Init+0x2e8>)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	3302      	adds	r3, #2
 80057a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	220f      	movs	r2, #15
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057c2:	d01f      	beq.n	8005804 <HAL_GPIO_Init+0x1f8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a4c      	ldr	r2, [pc, #304]	; (80058f8 <HAL_GPIO_Init+0x2ec>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d019      	beq.n	8005800 <HAL_GPIO_Init+0x1f4>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a4b      	ldr	r2, [pc, #300]	; (80058fc <HAL_GPIO_Init+0x2f0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <HAL_GPIO_Init+0x1f0>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a4a      	ldr	r2, [pc, #296]	; (8005900 <HAL_GPIO_Init+0x2f4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00d      	beq.n	80057f8 <HAL_GPIO_Init+0x1ec>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a49      	ldr	r2, [pc, #292]	; (8005904 <HAL_GPIO_Init+0x2f8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <HAL_GPIO_Init+0x1e8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a48      	ldr	r2, [pc, #288]	; (8005908 <HAL_GPIO_Init+0x2fc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_GPIO_Init+0x1e4>
 80057ec:	2305      	movs	r3, #5
 80057ee:	e00a      	b.n	8005806 <HAL_GPIO_Init+0x1fa>
 80057f0:	2306      	movs	r3, #6
 80057f2:	e008      	b.n	8005806 <HAL_GPIO_Init+0x1fa>
 80057f4:	2304      	movs	r3, #4
 80057f6:	e006      	b.n	8005806 <HAL_GPIO_Init+0x1fa>
 80057f8:	2303      	movs	r3, #3
 80057fa:	e004      	b.n	8005806 <HAL_GPIO_Init+0x1fa>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e002      	b.n	8005806 <HAL_GPIO_Init+0x1fa>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_GPIO_Init+0x1fa>
 8005804:	2300      	movs	r3, #0
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	f002 0203 	and.w	r2, r2, #3
 800580c:	0092      	lsls	r2, r2, #2
 800580e:	4093      	lsls	r3, r2
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005816:	4937      	ldr	r1, [pc, #220]	; (80058f4 <HAL_GPIO_Init+0x2e8>)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	3302      	adds	r3, #2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005824:	4b39      	ldr	r3, [pc, #228]	; (800590c <HAL_GPIO_Init+0x300>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	43db      	mvns	r3, r3
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4013      	ands	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005848:	4a30      	ldr	r2, [pc, #192]	; (800590c <HAL_GPIO_Init+0x300>)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800584e:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_GPIO_Init+0x300>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	43db      	mvns	r3, r3
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4013      	ands	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005872:	4a26      	ldr	r2, [pc, #152]	; (800590c <HAL_GPIO_Init+0x300>)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005878:	4b24      	ldr	r3, [pc, #144]	; (800590c <HAL_GPIO_Init+0x300>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	43db      	mvns	r3, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800589c:	4a1b      	ldr	r2, [pc, #108]	; (800590c <HAL_GPIO_Init+0x300>)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <HAL_GPIO_Init+0x300>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4013      	ands	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058c6:	4a11      	ldr	r2, [pc, #68]	; (800590c <HAL_GPIO_Init+0x300>)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3301      	adds	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f47f ae9d 	bne.w	800561c <HAL_GPIO_Init+0x10>
  }
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40010000 	.word	0x40010000
 80058f8:	48000400 	.word	0x48000400
 80058fc:	48000800 	.word	0x48000800
 8005900:	48000c00 	.word	0x48000c00
 8005904:	48001000 	.word	0x48001000
 8005908:	48001400 	.word	0x48001400
 800590c:	40010400 	.word	0x40010400

08005910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	887b      	ldrh	r3, [r7, #2]
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
 800592c:	e001      	b.n	8005932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
 800594c:	4613      	mov	r3, r2
 800594e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005950:	787b      	ldrb	r3, [r7, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005956:	887a      	ldrh	r2, [r7, #2]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800595c:	e002      	b.n	8005964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800595e:	887a      	ldrh	r2, [r7, #2]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005982:	887a      	ldrh	r2, [r7, #2]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4013      	ands	r3, r2
 8005988:	041a      	lsls	r2, r3, #16
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	43d9      	mvns	r1, r3
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	400b      	ands	r3, r1
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059ae:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ba:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f806 	bl	80059d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40010400 	.word	0x40010400

080059d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d141      	bne.n	8005a7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059fa:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a06:	d131      	bne.n	8005a6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a08:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a0e:	4a46      	ldr	r2, [pc, #280]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a18:	4b43      	ldr	r3, [pc, #268]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a20:	4a41      	ldr	r2, [pc, #260]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a28:	4b40      	ldr	r3, [pc, #256]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2232      	movs	r2, #50	; 0x32
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	4a3f      	ldr	r2, [pc, #252]	; (8005b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	0c9b      	lsrs	r3, r3, #18
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a3e:	e002      	b.n	8005a46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a46:	4b38      	ldr	r3, [pc, #224]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a52:	d102      	bne.n	8005a5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f2      	bne.n	8005a40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a5a:	4b33      	ldr	r3, [pc, #204]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a66:	d158      	bne.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e057      	b.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a6c:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a72:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a7c:	e04d      	b.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a84:	d141      	bne.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a86:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d131      	bne.n	8005af8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a94:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a9a:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aa4:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005aac:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2232      	movs	r2, #50	; 0x32
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	0c9b      	lsrs	r3, r3, #18
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aca:	e002      	b.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ade:	d102      	bne.n	8005ae6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f2      	bne.n	8005acc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ae6:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d112      	bne.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e011      	b.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b08:	e007      	b.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b12:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40007000 	.word	0x40007000
 8005b2c:	20000000 	.word	0x20000000
 8005b30:	431bde83 	.word	0x431bde83

08005b34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b42:	6093      	str	r3, [r2, #8]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40007000 	.word	0x40007000

08005b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e2fe      	b.n	8006164 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d075      	beq.n	8005c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b72:	4b97      	ldr	r3, [pc, #604]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b7c:	4b94      	ldr	r3, [pc, #592]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	d102      	bne.n	8005b92 <HAL_RCC_OscConfig+0x3e>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d002      	beq.n	8005b98 <HAL_RCC_OscConfig+0x44>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d10b      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	4b8d      	ldr	r3, [pc, #564]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d05b      	beq.n	8005c5c <HAL_RCC_OscConfig+0x108>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d157      	bne.n	8005c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e2d9      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb8:	d106      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x74>
 8005bba:	4b85      	ldr	r3, [pc, #532]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a84      	ldr	r2, [pc, #528]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e01d      	b.n	8005c04 <HAL_RCC_OscConfig+0xb0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0x98>
 8005bd2:	4b7f      	ldr	r3, [pc, #508]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7e      	ldr	r2, [pc, #504]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4b7c      	ldr	r3, [pc, #496]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a7b      	ldr	r2, [pc, #492]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0xb0>
 8005bec:	4b78      	ldr	r3, [pc, #480]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a77      	ldr	r2, [pc, #476]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b75      	ldr	r3, [pc, #468]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a74      	ldr	r2, [pc, #464]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fc ffc0 	bl	8002b90 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fc ffbc 	bl	8002b90 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	; 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e29e      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c26:	4b6a      	ldr	r3, [pc, #424]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0xc0>
 8005c32:	e014      	b.n	8005c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fc ffac 	bl	8002b90 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c3c:	f7fc ffa8 	bl	8002b90 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b64      	cmp	r3, #100	; 0x64
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e28a      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c4e:	4b60      	ldr	r3, [pc, #384]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0xe8>
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d075      	beq.n	8005d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6a:	4b59      	ldr	r3, [pc, #356]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c74:	4b56      	ldr	r3, [pc, #344]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	d102      	bne.n	8005c8a <HAL_RCC_OscConfig+0x136>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d002      	beq.n	8005c90 <HAL_RCC_OscConfig+0x13c>
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d11f      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c90:	4b4f      	ldr	r3, [pc, #316]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x154>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e25d      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca8:	4b49      	ldr	r3, [pc, #292]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	061b      	lsls	r3, r3, #24
 8005cb6:	4946      	ldr	r1, [pc, #280]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005cbc:	4b45      	ldr	r3, [pc, #276]	; (8005dd4 <HAL_RCC_OscConfig+0x280>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fc ff19 	bl	8002af8 <HAL_InitTick>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d043      	beq.n	8005d54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e249      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d023      	beq.n	8005d20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cd8:	4b3d      	ldr	r3, [pc, #244]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3c      	ldr	r2, [pc, #240]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fc ff54 	bl	8002b90 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cec:	f7fc ff50 	bl	8002b90 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e232      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cfe:	4b34      	ldr	r3, [pc, #208]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0a:	4b31      	ldr	r3, [pc, #196]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	061b      	lsls	r3, r3, #24
 8005d18:	492d      	ldr	r1, [pc, #180]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	604b      	str	r3, [r1, #4]
 8005d1e:	e01a      	b.n	8005d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d20:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fc ff30 	bl	8002b90 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d34:	f7fc ff2c 	bl	8002b90 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e20e      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d46:	4b22      	ldr	r3, [pc, #136]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x1e0>
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d041      	beq.n	8005de6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01c      	beq.n	8005da4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6a:	4b19      	ldr	r3, [pc, #100]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d70:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7a:	f7fc ff09 	bl	8002b90 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d82:	f7fc ff05 	bl	8002b90 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e1e7      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ef      	beq.n	8005d82 <HAL_RCC_OscConfig+0x22e>
 8005da2:	e020      	b.n	8005de6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fc feec 	bl	8002b90 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dba:	e00d      	b.n	8005dd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbc:	f7fc fee8 	bl	8002b90 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d906      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e1ca      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd8:	4b8c      	ldr	r3, [pc, #560]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1ea      	bne.n	8005dbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80a6 	beq.w	8005f40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005df4:	2300      	movs	r3, #0
 8005df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005df8:	4b84      	ldr	r3, [pc, #528]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_OscConfig+0x2b4>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_RCC_OscConfig+0x2b6>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00d      	beq.n	8005e2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	4b7f      	ldr	r3, [pc, #508]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	4a7e      	ldr	r2, [pc, #504]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e18:	6593      	str	r3, [r2, #88]	; 0x58
 8005e1a:	4b7c      	ldr	r3, [pc, #496]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e26:	2301      	movs	r3, #1
 8005e28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e2a:	4b79      	ldr	r3, [pc, #484]	; (8006010 <HAL_RCC_OscConfig+0x4bc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d118      	bne.n	8005e68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e36:	4b76      	ldr	r3, [pc, #472]	; (8006010 <HAL_RCC_OscConfig+0x4bc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a75      	ldr	r2, [pc, #468]	; (8006010 <HAL_RCC_OscConfig+0x4bc>)
 8005e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e42:	f7fc fea5 	bl	8002b90 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e4a:	f7fc fea1 	bl	8002b90 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e183      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e5c:	4b6c      	ldr	r3, [pc, #432]	; (8006010 <HAL_RCC_OscConfig+0x4bc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d108      	bne.n	8005e82 <HAL_RCC_OscConfig+0x32e>
 8005e70:	4b66      	ldr	r3, [pc, #408]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	4a65      	ldr	r2, [pc, #404]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e80:	e024      	b.n	8005ecc <HAL_RCC_OscConfig+0x378>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d110      	bne.n	8005eac <HAL_RCC_OscConfig+0x358>
 8005e8a:	4b60      	ldr	r3, [pc, #384]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	4a5e      	ldr	r2, [pc, #376]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e92:	f043 0304 	orr.w	r3, r3, #4
 8005e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e9a:	4b5c      	ldr	r3, [pc, #368]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	4a5a      	ldr	r2, [pc, #360]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eaa:	e00f      	b.n	8005ecc <HAL_RCC_OscConfig+0x378>
 8005eac:	4b57      	ldr	r3, [pc, #348]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	4a56      	ldr	r2, [pc, #344]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ebc:	4b53      	ldr	r3, [pc, #332]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	4a52      	ldr	r2, [pc, #328]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005ec4:	f023 0304 	bic.w	r3, r3, #4
 8005ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d016      	beq.n	8005f02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed4:	f7fc fe5c 	bl	8002b90 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005edc:	f7fc fe58 	bl	8002b90 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e138      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef2:	4b46      	ldr	r3, [pc, #280]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0ed      	beq.n	8005edc <HAL_RCC_OscConfig+0x388>
 8005f00:	e015      	b.n	8005f2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f02:	f7fc fe45 	bl	8002b90 <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f08:	e00a      	b.n	8005f20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0a:	f7fc fe41 	bl	8002b90 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e121      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f20:	4b3a      	ldr	r3, [pc, #232]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1ed      	bne.n	8005f0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f2e:	7ffb      	ldrb	r3, [r7, #31]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f34:	4b35      	ldr	r3, [pc, #212]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f38:	4a34      	ldr	r2, [pc, #208]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d03c      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01c      	beq.n	8005f8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f54:	4b2d      	ldr	r3, [pc, #180]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f5a:	4a2c      	ldr	r2, [pc, #176]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fc fe14 	bl	8002b90 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f6c:	f7fc fe10 	bl	8002b90 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e0f2      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f7e:	4b23      	ldr	r3, [pc, #140]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ef      	beq.n	8005f6c <HAL_RCC_OscConfig+0x418>
 8005f8c:	e01b      	b.n	8005fc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f8e:	4b1f      	ldr	r3, [pc, #124]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f94:	4a1d      	ldr	r2, [pc, #116]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9e:	f7fc fdf7 	bl	8002b90 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fa6:	f7fc fdf3 	bl	8002b90 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0d5      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fb8:	4b14      	ldr	r3, [pc, #80]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1ef      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80c9 	beq.w	8006162 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fd0:	4b0e      	ldr	r3, [pc, #56]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 030c 	and.w	r3, r3, #12
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	f000 8083 	beq.w	80060e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d15e      	bne.n	80060a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a08      	ldr	r2, [pc, #32]	; (800600c <HAL_RCC_OscConfig+0x4b8>)
 8005fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff2:	f7fc fdcd 	bl	8002b90 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff8:	e00c      	b.n	8006014 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffa:	f7fc fdc9 	bl	8002b90 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d905      	bls.n	8006014 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e0ab      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
 800600c:	40021000 	.word	0x40021000
 8006010:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006014:	4b55      	ldr	r3, [pc, #340]	; (800616c <HAL_RCC_OscConfig+0x618>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ec      	bne.n	8005ffa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006020:	4b52      	ldr	r3, [pc, #328]	; (800616c <HAL_RCC_OscConfig+0x618>)
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	4b52      	ldr	r3, [pc, #328]	; (8006170 <HAL_RCC_OscConfig+0x61c>)
 8006026:	4013      	ands	r3, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6a11      	ldr	r1, [r2, #32]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006030:	3a01      	subs	r2, #1
 8006032:	0112      	lsls	r2, r2, #4
 8006034:	4311      	orrs	r1, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800603a:	0212      	lsls	r2, r2, #8
 800603c:	4311      	orrs	r1, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006042:	0852      	lsrs	r2, r2, #1
 8006044:	3a01      	subs	r2, #1
 8006046:	0552      	lsls	r2, r2, #21
 8006048:	4311      	orrs	r1, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800604e:	0852      	lsrs	r2, r2, #1
 8006050:	3a01      	subs	r2, #1
 8006052:	0652      	lsls	r2, r2, #25
 8006054:	4311      	orrs	r1, r2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800605a:	06d2      	lsls	r2, r2, #27
 800605c:	430a      	orrs	r2, r1
 800605e:	4943      	ldr	r1, [pc, #268]	; (800616c <HAL_RCC_OscConfig+0x618>)
 8006060:	4313      	orrs	r3, r2
 8006062:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006064:	4b41      	ldr	r3, [pc, #260]	; (800616c <HAL_RCC_OscConfig+0x618>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a40      	ldr	r2, [pc, #256]	; (800616c <HAL_RCC_OscConfig+0x618>)
 800606a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800606e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006070:	4b3e      	ldr	r3, [pc, #248]	; (800616c <HAL_RCC_OscConfig+0x618>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4a3d      	ldr	r2, [pc, #244]	; (800616c <HAL_RCC_OscConfig+0x618>)
 8006076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fc fd88 	bl	8002b90 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006084:	f7fc fd84 	bl	8002b90 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e066      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006096:	4b35      	ldr	r3, [pc, #212]	; (800616c <HAL_RCC_OscConfig+0x618>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCC_OscConfig+0x530>
 80060a2:	e05e      	b.n	8006162 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a4:	4b31      	ldr	r3, [pc, #196]	; (800616c <HAL_RCC_OscConfig+0x618>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a30      	ldr	r2, [pc, #192]	; (800616c <HAL_RCC_OscConfig+0x618>)
 80060aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fc fd6e 	bl	8002b90 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fc fd6a 	bl	8002b90 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e04c      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ca:	4b28      	ldr	r3, [pc, #160]	; (800616c <HAL_RCC_OscConfig+0x618>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80060d6:	4b25      	ldr	r3, [pc, #148]	; (800616c <HAL_RCC_OscConfig+0x618>)
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	4924      	ldr	r1, [pc, #144]	; (800616c <HAL_RCC_OscConfig+0x618>)
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <HAL_RCC_OscConfig+0x620>)
 80060de:	4013      	ands	r3, r2
 80060e0:	60cb      	str	r3, [r1, #12]
 80060e2:	e03e      	b.n	8006162 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e039      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80060f0:	4b1e      	ldr	r3, [pc, #120]	; (800616c <HAL_RCC_OscConfig+0x618>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f003 0203 	and.w	r2, r3, #3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	429a      	cmp	r2, r3
 8006102:	d12c      	bne.n	800615e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	3b01      	subs	r3, #1
 8006110:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d123      	bne.n	800615e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d11b      	bne.n	800615e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d113      	bne.n	800615e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	3b01      	subs	r3, #1
 8006144:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006146:	429a      	cmp	r2, r3
 8006148:	d109      	bne.n	800615e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	3b01      	subs	r3, #1
 8006158:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d001      	beq.n	8006162 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40021000 	.word	0x40021000
 8006170:	019f800c 	.word	0x019f800c
 8006174:	feeefffc 	.word	0xfeeefffc

08006178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e11e      	b.n	80063ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006190:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d910      	bls.n	80061c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619e:	4b8e      	ldr	r3, [pc, #568]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 020f 	bic.w	r2, r3, #15
 80061a6:	498c      	ldr	r1, [pc, #560]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ae:	4b8a      	ldr	r3, [pc, #552]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e106      	b.n	80063ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d073      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d129      	bne.n	8006228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d4:	4b81      	ldr	r3, [pc, #516]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0f4      	b.n	80063ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80061e4:	f000 f99e 	bl	8006524 <RCC_GetSysClockFreqFromPLLSource>
 80061e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4a7c      	ldr	r2, [pc, #496]	; (80063e0 <HAL_RCC_ClockConfig+0x268>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d93f      	bls.n	8006272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061f2:	4b7a      	ldr	r3, [pc, #488]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d009      	beq.n	8006212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006206:	2b00      	cmp	r3, #0
 8006208:	d033      	beq.n	8006272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800620e:	2b00      	cmp	r3, #0
 8006210:	d12f      	bne.n	8006272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006212:	4b72      	ldr	r3, [pc, #456]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621a:	4a70      	ldr	r2, [pc, #448]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e024      	b.n	8006272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d107      	bne.n	8006240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006230:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0c6      	b.n	80063ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006240:	4b66      	ldr	r3, [pc, #408]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0be      	b.n	80063ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006250:	f000 f8ce 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 8006254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	4a61      	ldr	r2, [pc, #388]	; (80063e0 <HAL_RCC_ClockConfig+0x268>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d909      	bls.n	8006272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800625e:	4b5f      	ldr	r3, [pc, #380]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006266:	4a5d      	ldr	r2, [pc, #372]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006272:	4b5a      	ldr	r3, [pc, #360]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f023 0203 	bic.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4957      	ldr	r1, [pc, #348]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006280:	4313      	orrs	r3, r2
 8006282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006284:	f7fc fc84 	bl	8002b90 <HAL_GetTick>
 8006288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628a:	e00a      	b.n	80062a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800628c:	f7fc fc80 	bl	8002b90 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f241 3288 	movw	r2, #5000	; 0x1388
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e095      	b.n	80063ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a2:	4b4e      	ldr	r3, [pc, #312]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 020c 	and.w	r2, r3, #12
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d1eb      	bne.n	800628c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d023      	beq.n	8006308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062cc:	4b43      	ldr	r3, [pc, #268]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	4a42      	ldr	r2, [pc, #264]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80062d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80062e4:	4b3d      	ldr	r3, [pc, #244]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062ec:	4a3b      	ldr	r2, [pc, #236]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80062ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f4:	4b39      	ldr	r3, [pc, #228]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4936      	ldr	r1, [pc, #216]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006302:	4313      	orrs	r3, r2
 8006304:	608b      	str	r3, [r1, #8]
 8006306:	e008      	b.n	800631a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d105      	bne.n	800631a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800630e:	4b33      	ldr	r3, [pc, #204]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	4a32      	ldr	r2, [pc, #200]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800631a:	4b2f      	ldr	r3, [pc, #188]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d21d      	bcs.n	8006364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006328:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f023 020f 	bic.w	r2, r3, #15
 8006330:	4929      	ldr	r1, [pc, #164]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	4313      	orrs	r3, r2
 8006336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006338:	f7fc fc2a 	bl	8002b90 <HAL_GetTick>
 800633c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	e00a      	b.n	8006356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006340:	f7fc fc26 	bl	8002b90 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f241 3288 	movw	r2, #5000	; 0x1388
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e03b      	b.n	80063ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006356:	4b20      	ldr	r3, [pc, #128]	; (80063d8 <HAL_RCC_ClockConfig+0x260>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d1ed      	bne.n	8006340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006370:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4917      	ldr	r1, [pc, #92]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d009      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	490f      	ldr	r1, [pc, #60]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063a2:	f000 f825 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 80063a6:	4602      	mov	r2, r0
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <HAL_RCC_ClockConfig+0x264>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	490c      	ldr	r1, [pc, #48]	; (80063e4 <HAL_RCC_ClockConfig+0x26c>)
 80063b4:	5ccb      	ldrb	r3, [r1, r3]
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	fa22 f303 	lsr.w	r3, r2, r3
 80063be:	4a0a      	ldr	r2, [pc, #40]	; (80063e8 <HAL_RCC_ClockConfig+0x270>)
 80063c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <HAL_RCC_ClockConfig+0x274>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fc fb96 	bl	8002af8 <HAL_InitTick>
 80063cc:	4603      	mov	r3, r0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40022000 	.word	0x40022000
 80063dc:	40021000 	.word	0x40021000
 80063e0:	04c4b400 	.word	0x04c4b400
 80063e4:	08009970 	.word	0x08009970
 80063e8:	20000000 	.word	0x20000000
 80063ec:	20000004 	.word	0x20000004

080063f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063f6:	4b2c      	ldr	r3, [pc, #176]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d102      	bne.n	8006408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006402:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	e047      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006408:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 030c 	and.w	r3, r3, #12
 8006410:	2b08      	cmp	r3, #8
 8006412:	d102      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006414:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	e03e      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800641a:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 030c 	and.w	r3, r3, #12
 8006422:	2b0c      	cmp	r3, #12
 8006424:	d136      	bne.n	8006494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006426:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006430:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	3301      	adds	r3, #1
 800643c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d10c      	bne.n	800645e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006444:	4a1a      	ldr	r2, [pc, #104]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800644e:	68d2      	ldr	r2, [r2, #12]
 8006450:	0a12      	lsrs	r2, r2, #8
 8006452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	617b      	str	r3, [r7, #20]
      break;
 800645c:	e00c      	b.n	8006478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800645e:	4a13      	ldr	r2, [pc, #76]	; (80064ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	4a10      	ldr	r2, [pc, #64]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006468:	68d2      	ldr	r2, [r2, #12]
 800646a:	0a12      	lsrs	r2, r2, #8
 800646c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006470:	fb02 f303 	mul.w	r3, r2, r3
 8006474:	617b      	str	r3, [r7, #20]
      break;
 8006476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	0e5b      	lsrs	r3, r3, #25
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	3301      	adds	r3, #1
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	e001      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006498:	693b      	ldr	r3, [r7, #16]
}
 800649a:	4618      	mov	r0, r3
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40021000 	.word	0x40021000
 80064ac:	00f42400 	.word	0x00f42400
 80064b0:	016e3600 	.word	0x016e3600

080064b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064b8:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064ba:	681b      	ldr	r3, [r3, #0]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000000 	.word	0x20000000

080064cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064d0:	f7ff fff0 	bl	80064b4 <HAL_RCC_GetHCLKFreq>
 80064d4:	4602      	mov	r2, r0
 80064d6:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	4904      	ldr	r1, [pc, #16]	; (80064f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064e2:	5ccb      	ldrb	r3, [r1, r3]
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40021000 	.word	0x40021000
 80064f4:	08009980 	.word	0x08009980

080064f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064fc:	f7ff ffda 	bl	80064b4 <HAL_RCC_GetHCLKFreq>
 8006500:	4602      	mov	r2, r0
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	0adb      	lsrs	r3, r3, #11
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	4904      	ldr	r1, [pc, #16]	; (8006520 <HAL_RCC_GetPCLK2Freq+0x28>)
 800650e:	5ccb      	ldrb	r3, [r1, r3]
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006518:	4618      	mov	r0, r3
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40021000 	.word	0x40021000
 8006520:	08009980 	.word	0x08009980

08006524 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800652a:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d10c      	bne.n	8006562 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006548:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	4a14      	ldr	r2, [pc, #80]	; (80065a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006552:	68d2      	ldr	r2, [r2, #12]
 8006554:	0a12      	lsrs	r2, r2, #8
 8006556:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800655a:	fb02 f303 	mul.w	r3, r2, r3
 800655e:	617b      	str	r3, [r7, #20]
    break;
 8006560:	e00c      	b.n	800657c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006562:	4a12      	ldr	r2, [pc, #72]	; (80065ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	fbb2 f3f3 	udiv	r3, r2, r3
 800656a:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800656c:	68d2      	ldr	r2, [r2, #12]
 800656e:	0a12      	lsrs	r2, r2, #8
 8006570:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006574:	fb02 f303 	mul.w	r3, r2, r3
 8006578:	617b      	str	r3, [r7, #20]
    break;
 800657a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	0e5b      	lsrs	r3, r3, #25
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	3301      	adds	r3, #1
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006596:	687b      	ldr	r3, [r7, #4]
}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	40021000 	.word	0x40021000
 80065a8:	016e3600 	.word	0x016e3600
 80065ac:	00f42400 	.word	0x00f42400

080065b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065b8:	2300      	movs	r3, #0
 80065ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065bc:	2300      	movs	r3, #0
 80065be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8098 	beq.w	80066fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d2:	4b43      	ldr	r3, [pc, #268]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10d      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	4b40      	ldr	r3, [pc, #256]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e2:	4a3f      	ldr	r2, [pc, #252]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e8:	6593      	str	r3, [r2, #88]	; 0x58
 80065ea:	4b3d      	ldr	r3, [pc, #244]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f6:	2301      	movs	r3, #1
 80065f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065fa:	4b3a      	ldr	r3, [pc, #232]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a39      	ldr	r2, [pc, #228]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006604:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006606:	f7fc fac3 	bl	8002b90 <HAL_GetTick>
 800660a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800660c:	e009      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660e:	f7fc fabf 	bl	8002b90 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d902      	bls.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	74fb      	strb	r3, [r7, #19]
        break;
 8006620:	e005      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006622:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ef      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800662e:	7cfb      	ldrb	r3, [r7, #19]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d159      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006634:	4b2a      	ldr	r3, [pc, #168]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01e      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	429a      	cmp	r2, r3
 800664e:	d019      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006650:	4b23      	ldr	r3, [pc, #140]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800665c:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800666c:	4b1c      	ldr	r3, [pc, #112]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006672:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fc fa7f 	bl	8002b90 <HAL_GetTick>
 8006692:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006694:	e00b      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006696:	f7fc fa7b 	bl	8002b90 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d902      	bls.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	74fb      	strb	r3, [r7, #19]
            break;
 80066ac:	e006      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0ec      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d0:	4903      	ldr	r1, [pc, #12]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066da:	7cfb      	ldrb	r3, [r7, #19]
 80066dc:	74bb      	strb	r3, [r7, #18]
 80066de:	e005      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066e0:	40021000 	.word	0x40021000
 80066e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066ec:	7c7b      	ldrb	r3, [r7, #17]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d105      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f2:	4ba7      	ldr	r3, [pc, #668]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f6:	4aa6      	ldr	r2, [pc, #664]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800670a:	4ba1      	ldr	r3, [pc, #644]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f023 0203 	bic.w	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	499d      	ldr	r1, [pc, #628]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800672c:	4b98      	ldr	r3, [pc, #608]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006732:	f023 020c 	bic.w	r2, r3, #12
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	4995      	ldr	r1, [pc, #596]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800674e:	4b90      	ldr	r3, [pc, #576]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	498c      	ldr	r1, [pc, #560]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006770:	4b87      	ldr	r3, [pc, #540]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	4984      	ldr	r1, [pc, #528]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006792:	4b7f      	ldr	r3, [pc, #508]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	497b      	ldr	r1, [pc, #492]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b4:	4b76      	ldr	r3, [pc, #472]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	4973      	ldr	r1, [pc, #460]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067d6:	4b6e      	ldr	r3, [pc, #440]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	496a      	ldr	r1, [pc, #424]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067f8:	4b65      	ldr	r3, [pc, #404]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4962      	ldr	r1, [pc, #392]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800681a:	4b5d      	ldr	r3, [pc, #372]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	4959      	ldr	r1, [pc, #356]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800683c:	4b54      	ldr	r3, [pc, #336]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006842:	f023 0203 	bic.w	r2, r3, #3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	4951      	ldr	r1, [pc, #324]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800685e:	4b4c      	ldr	r3, [pc, #304]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4948      	ldr	r1, [pc, #288]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	2b00      	cmp	r3, #0
 800687e:	d015      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006880:	4b43      	ldr	r3, [pc, #268]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	4940      	ldr	r1, [pc, #256]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689e:	d105      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a0:	4b3b      	ldr	r3, [pc, #236]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	4a3a      	ldr	r2, [pc, #232]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d015      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068b8:	4b35      	ldr	r3, [pc, #212]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c6:	4932      	ldr	r1, [pc, #200]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d6:	d105      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d015      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	4924      	ldr	r1, [pc, #144]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006900:	4313      	orrs	r3, r2
 8006902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800690e:	d105      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006910:	4b1f      	ldr	r3, [pc, #124]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800691a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d015      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006928:	4b19      	ldr	r3, [pc, #100]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	4916      	ldr	r1, [pc, #88]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006946:	d105      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4a10      	ldr	r2, [pc, #64]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006952:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d019      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	4908      	ldr	r1, [pc, #32]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800697e:	d109      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4a02      	ldr	r2, [pc, #8]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698a:	60d3      	str	r3, [r2, #12]
 800698c:	e002      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800698e:	bf00      	nop
 8006990:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069a0:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	4926      	ldr	r1, [pc, #152]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069be:	d105      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069c0:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d015      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e6:	4918      	ldr	r1, [pc, #96]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f6:	d105      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069f8:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d015      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a10:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1e:	490a      	ldr	r1, [pc, #40]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a2e:	d105      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006a3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40021000 	.word	0x40021000

08006a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d001      	beq.n	8006a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e054      	b.n	8006b0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a26      	ldr	r2, [pc, #152]	; (8006b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d022      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x80>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8e:	d01d      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a22      	ldr	r2, [pc, #136]	; (8006b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d018      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x80>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a21      	ldr	r2, [pc, #132]	; (8006b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d013      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x80>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <HAL_TIM_Base_Start_IT+0xdc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00e      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x80>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1e      	ldr	r2, [pc, #120]	; (8006b2c <HAL_TIM_Base_Start_IT+0xe0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d009      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x80>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <HAL_TIM_Base_Start_IT+0xe4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d004      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x80>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1b      	ldr	r2, [pc, #108]	; (8006b34 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d115      	bne.n	8006af8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	4b19      	ldr	r3, [pc, #100]	; (8006b38 <HAL_TIM_Base_Start_IT+0xec>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b06      	cmp	r3, #6
 8006adc:	d015      	beq.n	8006b0a <HAL_TIM_Base_Start_IT+0xbe>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae4:	d011      	beq.n	8006b0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af6:	e008      	b.n	8006b0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e000      	b.n	8006b0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40012c00 	.word	0x40012c00
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40013400 	.word	0x40013400
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40015000 	.word	0x40015000
 8006b38:	00010007 	.word	0x00010007

08006b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e049      	b.n	8006be2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fb fdf6 	bl	8002754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f000 fa5c 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_TIM_PWM_Start+0x24>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	bf14      	ite	ne
 8006c08:	2301      	movne	r3, #1
 8006c0a:	2300      	moveq	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e03c      	b.n	8006c8a <HAL_TIM_PWM_Start+0x9e>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d109      	bne.n	8006c2a <HAL_TIM_PWM_Start+0x3e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	bf14      	ite	ne
 8006c22:	2301      	movne	r3, #1
 8006c24:	2300      	moveq	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	e02f      	b.n	8006c8a <HAL_TIM_PWM_Start+0x9e>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d109      	bne.n	8006c44 <HAL_TIM_PWM_Start+0x58>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	e022      	b.n	8006c8a <HAL_TIM_PWM_Start+0x9e>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b0c      	cmp	r3, #12
 8006c48:	d109      	bne.n	8006c5e <HAL_TIM_PWM_Start+0x72>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	e015      	b.n	8006c8a <HAL_TIM_PWM_Start+0x9e>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d109      	bne.n	8006c78 <HAL_TIM_PWM_Start+0x8c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e008      	b.n	8006c8a <HAL_TIM_PWM_Start+0x9e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e0a6      	b.n	8006de0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_PWM_Start+0xb6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca0:	e023      	b.n	8006cea <HAL_TIM_PWM_Start+0xfe>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d104      	bne.n	8006cb2 <HAL_TIM_PWM_Start+0xc6>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cb0:	e01b      	b.n	8006cea <HAL_TIM_PWM_Start+0xfe>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d104      	bne.n	8006cc2 <HAL_TIM_PWM_Start+0xd6>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc0:	e013      	b.n	8006cea <HAL_TIM_PWM_Start+0xfe>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d104      	bne.n	8006cd2 <HAL_TIM_PWM_Start+0xe6>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd0:	e00b      	b.n	8006cea <HAL_TIM_PWM_Start+0xfe>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d104      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0xf6>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce0:	e003      	b.n	8006cea <HAL_TIM_PWM_Start+0xfe>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fd7e 	bl	80077f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <HAL_TIM_PWM_Start+0x1fc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d018      	beq.n	8006d34 <HAL_TIM_PWM_Start+0x148>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a39      	ldr	r2, [pc, #228]	; (8006dec <HAL_TIM_PWM_Start+0x200>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <HAL_TIM_PWM_Start+0x148>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a37      	ldr	r2, [pc, #220]	; (8006df0 <HAL_TIM_PWM_Start+0x204>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_TIM_PWM_Start+0x148>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a36      	ldr	r2, [pc, #216]	; (8006df4 <HAL_TIM_PWM_Start+0x208>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <HAL_TIM_PWM_Start+0x148>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a34      	ldr	r2, [pc, #208]	; (8006df8 <HAL_TIM_PWM_Start+0x20c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIM_PWM_Start+0x148>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a33      	ldr	r2, [pc, #204]	; (8006dfc <HAL_TIM_PWM_Start+0x210>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d101      	bne.n	8006d38 <HAL_TIM_PWM_Start+0x14c>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <HAL_TIM_PWM_Start+0x14e>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a25      	ldr	r2, [pc, #148]	; (8006de8 <HAL_TIM_PWM_Start+0x1fc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x1b2>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d60:	d01d      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x1b2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a26      	ldr	r2, [pc, #152]	; (8006e00 <HAL_TIM_PWM_Start+0x214>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x1b2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a24      	ldr	r2, [pc, #144]	; (8006e04 <HAL_TIM_PWM_Start+0x218>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x1b2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <HAL_TIM_PWM_Start+0x21c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x1b2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_TIM_PWM_Start+0x200>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x1b2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <HAL_TIM_PWM_Start+0x204>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_TIM_PWM_Start+0x1b2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <HAL_TIM_PWM_Start+0x210>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d115      	bne.n	8006dca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <HAL_TIM_PWM_Start+0x220>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b06      	cmp	r3, #6
 8006dae:	d015      	beq.n	8006ddc <HAL_TIM_PWM_Start+0x1f0>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db6:	d011      	beq.n	8006ddc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc8:	e008      	b.n	8006ddc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e000      	b.n	8006dde <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ddc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40013400 	.word	0x40013400
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40014400 	.word	0x40014400
 8006df8:	40014800 	.word	0x40014800
 8006dfc:	40015000 	.word	0x40015000
 8006e00:	40000400 	.word	0x40000400
 8006e04:	40000800 	.word	0x40000800
 8006e08:	40000c00 	.word	0x40000c00
 8006e0c:	00010007 	.word	0x00010007

08006e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e0ff      	b.n	800702e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b14      	cmp	r3, #20
 8006e3a:	f200 80f0 	bhi.w	800701e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	0800701f 	.word	0x0800701f
 8006e4c:	0800701f 	.word	0x0800701f
 8006e50:	0800701f 	.word	0x0800701f
 8006e54:	08006ed9 	.word	0x08006ed9
 8006e58:	0800701f 	.word	0x0800701f
 8006e5c:	0800701f 	.word	0x0800701f
 8006e60:	0800701f 	.word	0x0800701f
 8006e64:	08006f1b 	.word	0x08006f1b
 8006e68:	0800701f 	.word	0x0800701f
 8006e6c:	0800701f 	.word	0x0800701f
 8006e70:	0800701f 	.word	0x0800701f
 8006e74:	08006f5b 	.word	0x08006f5b
 8006e78:	0800701f 	.word	0x0800701f
 8006e7c:	0800701f 	.word	0x0800701f
 8006e80:	0800701f 	.word	0x0800701f
 8006e84:	08006f9d 	.word	0x08006f9d
 8006e88:	0800701f 	.word	0x0800701f
 8006e8c:	0800701f 	.word	0x0800701f
 8006e90:	0800701f 	.word	0x0800701f
 8006e94:	08006fdd 	.word	0x08006fdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 f97e 	bl	80071a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0208 	orr.w	r2, r2, #8
 8006eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0204 	bic.w	r2, r2, #4
 8006ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6999      	ldr	r1, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	619a      	str	r2, [r3, #24]
      break;
 8006ed6:	e0a5      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f9f8 	bl	80072d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6999      	ldr	r1, [r3, #24]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	021a      	lsls	r2, r3, #8
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	619a      	str	r2, [r3, #24]
      break;
 8006f18:	e084      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fa6b 	bl	80073fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0208 	orr.w	r2, r2, #8
 8006f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0204 	bic.w	r2, r2, #4
 8006f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69d9      	ldr	r1, [r3, #28]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	61da      	str	r2, [r3, #28]
      break;
 8006f58:	e064      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fadd 	bl	8007520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	021a      	lsls	r2, r3, #8
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	61da      	str	r2, [r3, #28]
      break;
 8006f9a:	e043      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fb50 	bl	8007648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0208 	orr.w	r2, r2, #8
 8006fb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0204 	bic.w	r2, r2, #4
 8006fc6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006fda:	e023      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fb9a 	bl	800771c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	021a      	lsls	r2, r3, #8
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800701c:	e002      	b.n	8007024 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	75fb      	strb	r3, [r7, #23]
      break;
 8007022:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a4c      	ldr	r2, [pc, #304]	; (800717c <TIM_Base_SetConfig+0x144>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d017      	beq.n	8007080 <TIM_Base_SetConfig+0x48>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d013      	beq.n	8007080 <TIM_Base_SetConfig+0x48>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a49      	ldr	r2, [pc, #292]	; (8007180 <TIM_Base_SetConfig+0x148>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00f      	beq.n	8007080 <TIM_Base_SetConfig+0x48>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a48      	ldr	r2, [pc, #288]	; (8007184 <TIM_Base_SetConfig+0x14c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00b      	beq.n	8007080 <TIM_Base_SetConfig+0x48>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a47      	ldr	r2, [pc, #284]	; (8007188 <TIM_Base_SetConfig+0x150>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d007      	beq.n	8007080 <TIM_Base_SetConfig+0x48>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a46      	ldr	r2, [pc, #280]	; (800718c <TIM_Base_SetConfig+0x154>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d003      	beq.n	8007080 <TIM_Base_SetConfig+0x48>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a45      	ldr	r2, [pc, #276]	; (8007190 <TIM_Base_SetConfig+0x158>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d108      	bne.n	8007092 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a39      	ldr	r2, [pc, #228]	; (800717c <TIM_Base_SetConfig+0x144>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d023      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a0:	d01f      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a36      	ldr	r2, [pc, #216]	; (8007180 <TIM_Base_SetConfig+0x148>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01b      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a35      	ldr	r2, [pc, #212]	; (8007184 <TIM_Base_SetConfig+0x14c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d017      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a34      	ldr	r2, [pc, #208]	; (8007188 <TIM_Base_SetConfig+0x150>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d013      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a33      	ldr	r2, [pc, #204]	; (800718c <TIM_Base_SetConfig+0x154>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00f      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a33      	ldr	r2, [pc, #204]	; (8007194 <TIM_Base_SetConfig+0x15c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00b      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a32      	ldr	r2, [pc, #200]	; (8007198 <TIM_Base_SetConfig+0x160>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d007      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a31      	ldr	r2, [pc, #196]	; (800719c <TIM_Base_SetConfig+0x164>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d003      	beq.n	80070e2 <TIM_Base_SetConfig+0xaa>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <TIM_Base_SetConfig+0x158>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d108      	bne.n	80070f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a18      	ldr	r2, [pc, #96]	; (800717c <TIM_Base_SetConfig+0x144>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <TIM_Base_SetConfig+0x110>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a1a      	ldr	r2, [pc, #104]	; (800718c <TIM_Base_SetConfig+0x154>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00f      	beq.n	8007148 <TIM_Base_SetConfig+0x110>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a1a      	ldr	r2, [pc, #104]	; (8007194 <TIM_Base_SetConfig+0x15c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00b      	beq.n	8007148 <TIM_Base_SetConfig+0x110>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a19      	ldr	r2, [pc, #100]	; (8007198 <TIM_Base_SetConfig+0x160>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d007      	beq.n	8007148 <TIM_Base_SetConfig+0x110>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a18      	ldr	r2, [pc, #96]	; (800719c <TIM_Base_SetConfig+0x164>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_Base_SetConfig+0x110>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a13      	ldr	r2, [pc, #76]	; (8007190 <TIM_Base_SetConfig+0x158>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d103      	bne.n	8007150 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d105      	bne.n	800716e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f023 0201 	bic.w	r2, r3, #1
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	611a      	str	r2, [r3, #16]
  }
}
 800716e:	bf00      	nop
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40000400 	.word	0x40000400
 8007184:	40000800 	.word	0x40000800
 8007188:	40000c00 	.word	0x40000c00
 800718c:	40013400 	.word	0x40013400
 8007190:	40015000 	.word	0x40015000
 8007194:	40014000 	.word	0x40014000
 8007198:	40014400 	.word	0x40014400
 800719c:	40014800 	.word	0x40014800

080071a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	f023 0201 	bic.w	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f023 0302 	bic.w	r3, r3, #2
 80071ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a30      	ldr	r2, [pc, #192]	; (80072bc <TIM_OC1_SetConfig+0x11c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d013      	beq.n	8007228 <TIM_OC1_SetConfig+0x88>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a2f      	ldr	r2, [pc, #188]	; (80072c0 <TIM_OC1_SetConfig+0x120>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00f      	beq.n	8007228 <TIM_OC1_SetConfig+0x88>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a2e      	ldr	r2, [pc, #184]	; (80072c4 <TIM_OC1_SetConfig+0x124>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00b      	beq.n	8007228 <TIM_OC1_SetConfig+0x88>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <TIM_OC1_SetConfig+0x128>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d007      	beq.n	8007228 <TIM_OC1_SetConfig+0x88>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <TIM_OC1_SetConfig+0x12c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_OC1_SetConfig+0x88>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a2b      	ldr	r2, [pc, #172]	; (80072d0 <TIM_OC1_SetConfig+0x130>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d10c      	bne.n	8007242 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0308 	bic.w	r3, r3, #8
 800722e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f023 0304 	bic.w	r3, r3, #4
 8007240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <TIM_OC1_SetConfig+0x11c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <TIM_OC1_SetConfig+0xd2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <TIM_OC1_SetConfig+0x120>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00f      	beq.n	8007272 <TIM_OC1_SetConfig+0xd2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <TIM_OC1_SetConfig+0x124>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00b      	beq.n	8007272 <TIM_OC1_SetConfig+0xd2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a1a      	ldr	r2, [pc, #104]	; (80072c8 <TIM_OC1_SetConfig+0x128>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <TIM_OC1_SetConfig+0xd2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a19      	ldr	r2, [pc, #100]	; (80072cc <TIM_OC1_SetConfig+0x12c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_OC1_SetConfig+0xd2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a18      	ldr	r2, [pc, #96]	; (80072d0 <TIM_OC1_SetConfig+0x130>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d111      	bne.n	8007296 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	621a      	str	r2, [r3, #32]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40013400 	.word	0x40013400
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40014400 	.word	0x40014400
 80072cc:	40014800 	.word	0x40014800
 80072d0:	40015000 	.word	0x40015000

080072d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f023 0210 	bic.w	r2, r3, #16
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 0320 	bic.w	r3, r3, #32
 8007322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a2c      	ldr	r2, [pc, #176]	; (80073e4 <TIM_OC2_SetConfig+0x110>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_OC2_SetConfig+0x74>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a2b      	ldr	r2, [pc, #172]	; (80073e8 <TIM_OC2_SetConfig+0x114>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC2_SetConfig+0x74>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <TIM_OC2_SetConfig+0x118>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d10d      	bne.n	8007364 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007362:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a1f      	ldr	r2, [pc, #124]	; (80073e4 <TIM_OC2_SetConfig+0x110>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d013      	beq.n	8007394 <TIM_OC2_SetConfig+0xc0>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a1e      	ldr	r2, [pc, #120]	; (80073e8 <TIM_OC2_SetConfig+0x114>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00f      	beq.n	8007394 <TIM_OC2_SetConfig+0xc0>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <TIM_OC2_SetConfig+0x11c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00b      	beq.n	8007394 <TIM_OC2_SetConfig+0xc0>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a1d      	ldr	r2, [pc, #116]	; (80073f4 <TIM_OC2_SetConfig+0x120>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d007      	beq.n	8007394 <TIM_OC2_SetConfig+0xc0>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <TIM_OC2_SetConfig+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_OC2_SetConfig+0xc0>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a17      	ldr	r2, [pc, #92]	; (80073ec <TIM_OC2_SetConfig+0x118>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d113      	bne.n	80073bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800739a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40013400 	.word	0x40013400
 80073ec:	40015000 	.word	0x40015000
 80073f0:	40014000 	.word	0x40014000
 80073f4:	40014400 	.word	0x40014400
 80073f8:	40014800 	.word	0x40014800

080073fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800742a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2b      	ldr	r2, [pc, #172]	; (8007508 <TIM_OC3_SetConfig+0x10c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d007      	beq.n	800746e <TIM_OC3_SetConfig+0x72>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a2a      	ldr	r2, [pc, #168]	; (800750c <TIM_OC3_SetConfig+0x110>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d003      	beq.n	800746e <TIM_OC3_SetConfig+0x72>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a29      	ldr	r2, [pc, #164]	; (8007510 <TIM_OC3_SetConfig+0x114>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d10d      	bne.n	800748a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <TIM_OC3_SetConfig+0x10c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <TIM_OC3_SetConfig+0xbe>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a1d      	ldr	r2, [pc, #116]	; (800750c <TIM_OC3_SetConfig+0x110>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00f      	beq.n	80074ba <TIM_OC3_SetConfig+0xbe>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <TIM_OC3_SetConfig+0x118>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00b      	beq.n	80074ba <TIM_OC3_SetConfig+0xbe>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <TIM_OC3_SetConfig+0x11c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d007      	beq.n	80074ba <TIM_OC3_SetConfig+0xbe>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a1b      	ldr	r2, [pc, #108]	; (800751c <TIM_OC3_SetConfig+0x120>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d003      	beq.n	80074ba <TIM_OC3_SetConfig+0xbe>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a16      	ldr	r2, [pc, #88]	; (8007510 <TIM_OC3_SetConfig+0x114>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d113      	bne.n	80074e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	621a      	str	r2, [r3, #32]
}
 80074fc:	bf00      	nop
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	40012c00 	.word	0x40012c00
 800750c:	40013400 	.word	0x40013400
 8007510:	40015000 	.word	0x40015000
 8007514:	40014000 	.word	0x40014000
 8007518:	40014400 	.word	0x40014400
 800751c:	40014800 	.word	0x40014800

08007520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800754e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800755a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800756e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	031b      	lsls	r3, r3, #12
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a2c      	ldr	r2, [pc, #176]	; (8007630 <TIM_OC4_SetConfig+0x110>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d007      	beq.n	8007594 <TIM_OC4_SetConfig+0x74>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a2b      	ldr	r2, [pc, #172]	; (8007634 <TIM_OC4_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_OC4_SetConfig+0x74>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a2a      	ldr	r2, [pc, #168]	; (8007638 <TIM_OC4_SetConfig+0x118>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d10d      	bne.n	80075b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800759a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	031b      	lsls	r3, r3, #12
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <TIM_OC4_SetConfig+0x110>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <TIM_OC4_SetConfig+0xc0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1e      	ldr	r2, [pc, #120]	; (8007634 <TIM_OC4_SetConfig+0x114>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00f      	beq.n	80075e0 <TIM_OC4_SetConfig+0xc0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a1e      	ldr	r2, [pc, #120]	; (800763c <TIM_OC4_SetConfig+0x11c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00b      	beq.n	80075e0 <TIM_OC4_SetConfig+0xc0>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <TIM_OC4_SetConfig+0x120>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d007      	beq.n	80075e0 <TIM_OC4_SetConfig+0xc0>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <TIM_OC4_SetConfig+0x124>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d003      	beq.n	80075e0 <TIM_OC4_SetConfig+0xc0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <TIM_OC4_SetConfig+0x118>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d113      	bne.n	8007608 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	019b      	lsls	r3, r3, #6
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	019b      	lsls	r3, r3, #6
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40012c00 	.word	0x40012c00
 8007634:	40013400 	.word	0x40013400
 8007638:	40015000 	.word	0x40015000
 800763c:	40014000 	.word	0x40014000
 8007640:	40014400 	.word	0x40014400
 8007644:	40014800 	.word	0x40014800

08007648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800768c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a19      	ldr	r2, [pc, #100]	; (8007704 <TIM_OC5_SetConfig+0xbc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <TIM_OC5_SetConfig+0x82>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a18      	ldr	r2, [pc, #96]	; (8007708 <TIM_OC5_SetConfig+0xc0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00f      	beq.n	80076ca <TIM_OC5_SetConfig+0x82>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a17      	ldr	r2, [pc, #92]	; (800770c <TIM_OC5_SetConfig+0xc4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00b      	beq.n	80076ca <TIM_OC5_SetConfig+0x82>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a16      	ldr	r2, [pc, #88]	; (8007710 <TIM_OC5_SetConfig+0xc8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d007      	beq.n	80076ca <TIM_OC5_SetConfig+0x82>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a15      	ldr	r2, [pc, #84]	; (8007714 <TIM_OC5_SetConfig+0xcc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d003      	beq.n	80076ca <TIM_OC5_SetConfig+0x82>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <TIM_OC5_SetConfig+0xd0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d109      	bne.n	80076de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40013400 	.word	0x40013400
 800770c:	40014000 	.word	0x40014000
 8007710:	40014400 	.word	0x40014400
 8007714:	40014800 	.word	0x40014800
 8007718:	40015000 	.word	0x40015000

0800771c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	051b      	lsls	r3, r3, #20
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <TIM_OC6_SetConfig+0xc0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <TIM_OC6_SetConfig+0x84>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <TIM_OC6_SetConfig+0xc4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00f      	beq.n	80077a0 <TIM_OC6_SetConfig+0x84>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <TIM_OC6_SetConfig+0xc8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00b      	beq.n	80077a0 <TIM_OC6_SetConfig+0x84>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <TIM_OC6_SetConfig+0xcc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d007      	beq.n	80077a0 <TIM_OC6_SetConfig+0x84>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <TIM_OC6_SetConfig+0xd0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d003      	beq.n	80077a0 <TIM_OC6_SetConfig+0x84>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a15      	ldr	r2, [pc, #84]	; (80077f0 <TIM_OC6_SetConfig+0xd4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d109      	bne.n	80077b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	621a      	str	r2, [r3, #32]
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40013400 	.word	0x40013400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40014400 	.word	0x40014400
 80077ec:	40014800 	.word	0x40014800
 80077f0:	40015000 	.word	0x40015000

080077f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2201      	movs	r2, #1
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1a      	ldr	r2, [r3, #32]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	43db      	mvns	r3, r3
 8007816:	401a      	ands	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1a      	ldr	r2, [r3, #32]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	fa01 f303 	lsl.w	r3, r1, r3
 800782c:	431a      	orrs	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
	...

08007840 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d109      	bne.n	8007864 <HAL_TIMEx_PWMN_Start+0x24>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e022      	b.n	80078aa <HAL_TIMEx_PWMN_Start+0x6a>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b04      	cmp	r3, #4
 8007868:	d109      	bne.n	800787e <HAL_TIMEx_PWMN_Start+0x3e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b01      	cmp	r3, #1
 8007874:	bf14      	ite	ne
 8007876:	2301      	movne	r3, #1
 8007878:	2300      	moveq	r3, #0
 800787a:	b2db      	uxtb	r3, r3
 800787c:	e015      	b.n	80078aa <HAL_TIMEx_PWMN_Start+0x6a>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b08      	cmp	r3, #8
 8007882:	d109      	bne.n	8007898 <HAL_TIMEx_PWMN_Start+0x58>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b01      	cmp	r3, #1
 800788e:	bf14      	ite	ne
 8007890:	2301      	movne	r3, #1
 8007892:	2300      	moveq	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	e008      	b.n	80078aa <HAL_TIMEx_PWMN_Start+0x6a>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	bf14      	ite	ne
 80078a4:	2301      	movne	r3, #1
 80078a6:	2300      	moveq	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e073      	b.n	800799a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <HAL_TIMEx_PWMN_Start+0x82>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c0:	e013      	b.n	80078ea <HAL_TIMEx_PWMN_Start+0xaa>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d104      	bne.n	80078d2 <HAL_TIMEx_PWMN_Start+0x92>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d0:	e00b      	b.n	80078ea <HAL_TIMEx_PWMN_Start+0xaa>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d104      	bne.n	80078e2 <HAL_TIMEx_PWMN_Start+0xa2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078e0:	e003      	b.n	80078ea <HAL_TIMEx_PWMN_Start+0xaa>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2204      	movs	r2, #4
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f990 	bl	8007c18 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007906:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a25      	ldr	r2, [pc, #148]	; (80079a4 <HAL_TIMEx_PWMN_Start+0x164>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d022      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x118>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791a:	d01d      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x118>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a21      	ldr	r2, [pc, #132]	; (80079a8 <HAL_TIMEx_PWMN_Start+0x168>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d018      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x118>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a20      	ldr	r2, [pc, #128]	; (80079ac <HAL_TIMEx_PWMN_Start+0x16c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d013      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x118>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <HAL_TIMEx_PWMN_Start+0x170>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x118>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <HAL_TIMEx_PWMN_Start+0x174>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x118>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1b      	ldr	r2, [pc, #108]	; (80079b8 <HAL_TIMEx_PWMN_Start+0x178>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_TIMEx_PWMN_Start+0x118>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1a      	ldr	r2, [pc, #104]	; (80079bc <HAL_TIMEx_PWMN_Start+0x17c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d115      	bne.n	8007984 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <HAL_TIMEx_PWMN_Start+0x180>)
 8007960:	4013      	ands	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b06      	cmp	r3, #6
 8007968:	d015      	beq.n	8007996 <HAL_TIMEx_PWMN_Start+0x156>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007970:	d011      	beq.n	8007996 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0201 	orr.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007982:	e008      	b.n	8007996 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0201 	orr.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e000      	b.n	8007998 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40012c00 	.word	0x40012c00
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40013400 	.word	0x40013400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40015000 	.word	0x40015000
 80079c0:	00010007 	.word	0x00010007

080079c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079d8:	2302      	movs	r3, #2
 80079da:	e074      	b.n	8007ac6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a34      	ldr	r2, [pc, #208]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a33      	ldr	r2, [pc, #204]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a31      	ldr	r2, [pc, #196]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d108      	bne.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a21      	ldr	r2, [pc, #132]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d022      	beq.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5c:	d01d      	beq.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d018      	beq.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d013      	beq.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1c      	ldr	r2, [pc, #112]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00e      	beq.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d009      	beq.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a18      	ldr	r2, [pc, #96]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d004      	beq.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a11      	ldr	r2, [pc, #68]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d10c      	bne.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	40012c00 	.word	0x40012c00
 8007ad8:	40013400 	.word	0x40013400
 8007adc:	40015000 	.word	0x40015000
 8007ae0:	40000400 	.word	0x40000400
 8007ae4:	40000800 	.word	0x40000800
 8007ae8:	40000c00 	.word	0x40000c00
 8007aec:	40014000 	.word	0x40014000

08007af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e078      	b.n	8007bfe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	041b      	lsls	r3, r3, #16
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1c      	ldr	r2, [pc, #112]	; (8007c0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a19      	ldr	r2, [pc, #100]	; (8007c14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d11c      	bne.n	8007bec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	051b      	lsls	r3, r3, #20
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40015000 	.word	0x40015000

08007c18 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	401a      	ands	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6a1a      	ldr	r2, [r3, #32]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c50:	431a      	orrs	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e042      	b.n	8007cfa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fa fd0c 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2224      	movs	r2, #36	; 0x24
 8007c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fb25 	bl	80082fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f826 	bl	8007d04 <UART_SetConfig>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d101      	bne.n	8007cc2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e01b      	b.n	8007cfa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ce0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0201 	orr.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fba4 	bl	8008440 <UART_CheckIdleState>
 8007cf8:	4603      	mov	r3, r0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d08:	b08c      	sub	sp, #48	; 0x30
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4baa      	ldr	r3, [pc, #680]	; (8007fdc <UART_SetConfig+0x2d8>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a9f      	ldr	r2, [pc, #636]	; (8007fe0 <UART_SetConfig+0x2dc>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d004      	beq.n	8007d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	f023 010f 	bic.w	r1, r3, #15
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a90      	ldr	r2, [pc, #576]	; (8007fe4 <UART_SetConfig+0x2e0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d125      	bne.n	8007df4 <UART_SetConfig+0xf0>
 8007da8:	4b8f      	ldr	r3, [pc, #572]	; (8007fe8 <UART_SetConfig+0x2e4>)
 8007daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d81a      	bhi.n	8007dec <UART_SetConfig+0xe8>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <UART_SetConfig+0xb8>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dcd 	.word	0x08007dcd
 8007dc0:	08007ddd 	.word	0x08007ddd
 8007dc4:	08007dd5 	.word	0x08007dd5
 8007dc8:	08007de5 	.word	0x08007de5
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd2:	e116      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dda:	e112      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de2:	e10e      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007de4:	2308      	movs	r3, #8
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dea:	e10a      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007dec:	2310      	movs	r3, #16
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df2:	e106      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a7c      	ldr	r2, [pc, #496]	; (8007fec <UART_SetConfig+0x2e8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d138      	bne.n	8007e70 <UART_SetConfig+0x16c>
 8007dfe:	4b7a      	ldr	r3, [pc, #488]	; (8007fe8 <UART_SetConfig+0x2e4>)
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	f003 030c 	and.w	r3, r3, #12
 8007e08:	2b0c      	cmp	r3, #12
 8007e0a:	d82d      	bhi.n	8007e68 <UART_SetConfig+0x164>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0x110>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e49 	.word	0x08007e49
 8007e18:	08007e69 	.word	0x08007e69
 8007e1c:	08007e69 	.word	0x08007e69
 8007e20:	08007e69 	.word	0x08007e69
 8007e24:	08007e59 	.word	0x08007e59
 8007e28:	08007e69 	.word	0x08007e69
 8007e2c:	08007e69 	.word	0x08007e69
 8007e30:	08007e69 	.word	0x08007e69
 8007e34:	08007e51 	.word	0x08007e51
 8007e38:	08007e69 	.word	0x08007e69
 8007e3c:	08007e69 	.word	0x08007e69
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e61 	.word	0x08007e61
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e4e:	e0d8      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007e50:	2302      	movs	r3, #2
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e56:	e0d4      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e5e:	e0d0      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007e60:	2308      	movs	r3, #8
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e66:	e0cc      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007e68:	2310      	movs	r3, #16
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e6e:	e0c8      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a5e      	ldr	r2, [pc, #376]	; (8007ff0 <UART_SetConfig+0x2ec>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d125      	bne.n	8007ec6 <UART_SetConfig+0x1c2>
 8007e7a:	4b5b      	ldr	r3, [pc, #364]	; (8007fe8 <UART_SetConfig+0x2e4>)
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e84:	2b30      	cmp	r3, #48	; 0x30
 8007e86:	d016      	beq.n	8007eb6 <UART_SetConfig+0x1b2>
 8007e88:	2b30      	cmp	r3, #48	; 0x30
 8007e8a:	d818      	bhi.n	8007ebe <UART_SetConfig+0x1ba>
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d00a      	beq.n	8007ea6 <UART_SetConfig+0x1a2>
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d814      	bhi.n	8007ebe <UART_SetConfig+0x1ba>
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <UART_SetConfig+0x19a>
 8007e98:	2b10      	cmp	r3, #16
 8007e9a:	d008      	beq.n	8007eae <UART_SetConfig+0x1aa>
 8007e9c:	e00f      	b.n	8007ebe <UART_SetConfig+0x1ba>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea4:	e0ad      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eac:	e0a9      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007eae:	2304      	movs	r3, #4
 8007eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb4:	e0a5      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ebc:	e0a1      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007ebe:	2310      	movs	r3, #16
 8007ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ec4:	e09d      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a4a      	ldr	r2, [pc, #296]	; (8007ff4 <UART_SetConfig+0x2f0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d125      	bne.n	8007f1c <UART_SetConfig+0x218>
 8007ed0:	4b45      	ldr	r3, [pc, #276]	; (8007fe8 <UART_SetConfig+0x2e4>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007eda:	2bc0      	cmp	r3, #192	; 0xc0
 8007edc:	d016      	beq.n	8007f0c <UART_SetConfig+0x208>
 8007ede:	2bc0      	cmp	r3, #192	; 0xc0
 8007ee0:	d818      	bhi.n	8007f14 <UART_SetConfig+0x210>
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d00a      	beq.n	8007efc <UART_SetConfig+0x1f8>
 8007ee6:	2b80      	cmp	r3, #128	; 0x80
 8007ee8:	d814      	bhi.n	8007f14 <UART_SetConfig+0x210>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <UART_SetConfig+0x1f0>
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d008      	beq.n	8007f04 <UART_SetConfig+0x200>
 8007ef2:	e00f      	b.n	8007f14 <UART_SetConfig+0x210>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efa:	e082      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007efc:	2302      	movs	r3, #2
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f02:	e07e      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f04:	2304      	movs	r3, #4
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0a:	e07a      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f12:	e076      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f14:	2310      	movs	r3, #16
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f1a:	e072      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a35      	ldr	r2, [pc, #212]	; (8007ff8 <UART_SetConfig+0x2f4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d12a      	bne.n	8007f7c <UART_SetConfig+0x278>
 8007f26:	4b30      	ldr	r3, [pc, #192]	; (8007fe8 <UART_SetConfig+0x2e4>)
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f34:	d01a      	beq.n	8007f6c <UART_SetConfig+0x268>
 8007f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3a:	d81b      	bhi.n	8007f74 <UART_SetConfig+0x270>
 8007f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f40:	d00c      	beq.n	8007f5c <UART_SetConfig+0x258>
 8007f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f46:	d815      	bhi.n	8007f74 <UART_SetConfig+0x270>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <UART_SetConfig+0x250>
 8007f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f50:	d008      	beq.n	8007f64 <UART_SetConfig+0x260>
 8007f52:	e00f      	b.n	8007f74 <UART_SetConfig+0x270>
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f5a:	e052      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f62:	e04e      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f64:	2304      	movs	r3, #4
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6a:	e04a      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f72:	e046      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f74:	2310      	movs	r3, #16
 8007f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f7a:	e042      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <UART_SetConfig+0x2dc>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d13a      	bne.n	8007ffc <UART_SetConfig+0x2f8>
 8007f86:	4b18      	ldr	r3, [pc, #96]	; (8007fe8 <UART_SetConfig+0x2e4>)
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f94:	d01a      	beq.n	8007fcc <UART_SetConfig+0x2c8>
 8007f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f9a:	d81b      	bhi.n	8007fd4 <UART_SetConfig+0x2d0>
 8007f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa0:	d00c      	beq.n	8007fbc <UART_SetConfig+0x2b8>
 8007fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa6:	d815      	bhi.n	8007fd4 <UART_SetConfig+0x2d0>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <UART_SetConfig+0x2b0>
 8007fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb0:	d008      	beq.n	8007fc4 <UART_SetConfig+0x2c0>
 8007fb2:	e00f      	b.n	8007fd4 <UART_SetConfig+0x2d0>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fba:	e022      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e01e      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007fc4:	2304      	movs	r3, #4
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fca:	e01a      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007fcc:	2308      	movs	r3, #8
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd2:	e016      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007fd4:	2310      	movs	r3, #16
 8007fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fda:	e012      	b.n	8008002 <UART_SetConfig+0x2fe>
 8007fdc:	cfff69f3 	.word	0xcfff69f3
 8007fe0:	40008000 	.word	0x40008000
 8007fe4:	40013800 	.word	0x40013800
 8007fe8:	40021000 	.word	0x40021000
 8007fec:	40004400 	.word	0x40004400
 8007ff0:	40004800 	.word	0x40004800
 8007ff4:	40004c00 	.word	0x40004c00
 8007ff8:	40005000 	.word	0x40005000
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4aae      	ldr	r2, [pc, #696]	; (80082c0 <UART_SetConfig+0x5bc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	f040 8097 	bne.w	800813c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800800e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008012:	2b08      	cmp	r3, #8
 8008014:	d823      	bhi.n	800805e <UART_SetConfig+0x35a>
 8008016:	a201      	add	r2, pc, #4	; (adr r2, 800801c <UART_SetConfig+0x318>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008041 	.word	0x08008041
 8008020:	0800805f 	.word	0x0800805f
 8008024:	08008049 	.word	0x08008049
 8008028:	0800805f 	.word	0x0800805f
 800802c:	0800804f 	.word	0x0800804f
 8008030:	0800805f 	.word	0x0800805f
 8008034:	0800805f 	.word	0x0800805f
 8008038:	0800805f 	.word	0x0800805f
 800803c:	08008057 	.word	0x08008057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008040:	f7fe fa44 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 8008044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008046:	e010      	b.n	800806a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008048:	4b9e      	ldr	r3, [pc, #632]	; (80082c4 <UART_SetConfig+0x5c0>)
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800804c:	e00d      	b.n	800806a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800804e:	f7fe f9cf 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 8008052:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008054:	e009      	b.n	800806a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800805c:	e005      	b.n	800806a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008068:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8130 	beq.w	80082d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	4a94      	ldr	r2, [pc, #592]	; (80082c8 <UART_SetConfig+0x5c4>)
 8008078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800807c:	461a      	mov	r2, r3
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	fbb3 f3f2 	udiv	r3, r3, r2
 8008084:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	4613      	mov	r3, r2
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	4413      	add	r3, r2
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	429a      	cmp	r2, r3
 8008094:	d305      	bcc.n	80080a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d903      	bls.n	80080aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080a8:	e113      	b.n	80082d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	2200      	movs	r2, #0
 80080ae:	60bb      	str	r3, [r7, #8]
 80080b0:	60fa      	str	r2, [r7, #12]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	4a84      	ldr	r2, [pc, #528]	; (80082c8 <UART_SetConfig+0x5c4>)
 80080b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2200      	movs	r2, #0
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080cc:	f7f8 f8a4 	bl	8000218 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4610      	mov	r0, r2
 80080d6:	4619      	mov	r1, r3
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	020b      	lsls	r3, r1, #8
 80080e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080e6:	0202      	lsls	r2, r0, #8
 80080e8:	6979      	ldr	r1, [r7, #20]
 80080ea:	6849      	ldr	r1, [r1, #4]
 80080ec:	0849      	lsrs	r1, r1, #1
 80080ee:	2000      	movs	r0, #0
 80080f0:	460c      	mov	r4, r1
 80080f2:	4605      	mov	r5, r0
 80080f4:	eb12 0804 	adds.w	r8, r2, r4
 80080f8:	eb43 0905 	adc.w	r9, r3, r5
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	469a      	mov	sl, r3
 8008104:	4693      	mov	fp, r2
 8008106:	4652      	mov	r2, sl
 8008108:	465b      	mov	r3, fp
 800810a:	4640      	mov	r0, r8
 800810c:	4649      	mov	r1, r9
 800810e:	f7f8 f883 	bl	8000218 <__aeabi_uldivmod>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4613      	mov	r3, r2
 8008118:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008120:	d308      	bcc.n	8008134 <UART_SetConfig+0x430>
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008128:	d204      	bcs.n	8008134 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a3a      	ldr	r2, [r7, #32]
 8008130:	60da      	str	r2, [r3, #12]
 8008132:	e0ce      	b.n	80082d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800813a:	e0ca      	b.n	80082d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008144:	d166      	bne.n	8008214 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008146:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800814a:	2b08      	cmp	r3, #8
 800814c:	d827      	bhi.n	800819e <UART_SetConfig+0x49a>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <UART_SetConfig+0x450>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	08008179 	.word	0x08008179
 8008158:	08008181 	.word	0x08008181
 800815c:	08008189 	.word	0x08008189
 8008160:	0800819f 	.word	0x0800819f
 8008164:	0800818f 	.word	0x0800818f
 8008168:	0800819f 	.word	0x0800819f
 800816c:	0800819f 	.word	0x0800819f
 8008170:	0800819f 	.word	0x0800819f
 8008174:	08008197 	.word	0x08008197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008178:	f7fe f9a8 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 800817c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800817e:	e014      	b.n	80081aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008180:	f7fe f9ba 	bl	80064f8 <HAL_RCC_GetPCLK2Freq>
 8008184:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008186:	e010      	b.n	80081aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008188:	4b4e      	ldr	r3, [pc, #312]	; (80082c4 <UART_SetConfig+0x5c0>)
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800818c:	e00d      	b.n	80081aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818e:	f7fe f92f 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 8008192:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008194:	e009      	b.n	80081aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800819c:	e005      	b.n	80081aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8090 	beq.w	80082d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	4a44      	ldr	r2, [pc, #272]	; (80082c8 <UART_SetConfig+0x5c4>)
 80081b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081bc:	461a      	mov	r2, r3
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c4:	005a      	lsls	r2, r3, #1
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	441a      	add	r2, r3
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	2b0f      	cmp	r3, #15
 80081dc:	d916      	bls.n	800820c <UART_SetConfig+0x508>
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e4:	d212      	bcs.n	800820c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f023 030f 	bic.w	r3, r3, #15
 80081ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	8bfb      	ldrh	r3, [r7, #30]
 80081fe:	4313      	orrs	r3, r2
 8008200:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	8bfa      	ldrh	r2, [r7, #30]
 8008208:	60da      	str	r2, [r3, #12]
 800820a:	e062      	b.n	80082d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008212:	e05e      	b.n	80082d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008218:	2b08      	cmp	r3, #8
 800821a:	d828      	bhi.n	800826e <UART_SetConfig+0x56a>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <UART_SetConfig+0x520>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008249 	.word	0x08008249
 8008228:	08008251 	.word	0x08008251
 800822c:	08008259 	.word	0x08008259
 8008230:	0800826f 	.word	0x0800826f
 8008234:	0800825f 	.word	0x0800825f
 8008238:	0800826f 	.word	0x0800826f
 800823c:	0800826f 	.word	0x0800826f
 8008240:	0800826f 	.word	0x0800826f
 8008244:	08008267 	.word	0x08008267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008248:	f7fe f940 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 800824c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800824e:	e014      	b.n	800827a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008250:	f7fe f952 	bl	80064f8 <HAL_RCC_GetPCLK2Freq>
 8008254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008256:	e010      	b.n	800827a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <UART_SetConfig+0x5c0>)
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800825c:	e00d      	b.n	800827a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800825e:	f7fe f8c7 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 8008262:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008264:	e009      	b.n	800827a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800826c:	e005      	b.n	800827a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008278:	bf00      	nop
    }

    if (pclk != 0U)
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d028      	beq.n	80082d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	4a10      	ldr	r2, [pc, #64]	; (80082c8 <UART_SetConfig+0x5c4>)
 8008286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800828a:	461a      	mov	r2, r3
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	441a      	add	r2, r3
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	2b0f      	cmp	r3, #15
 80082a8:	d910      	bls.n	80082cc <UART_SetConfig+0x5c8>
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b0:	d20c      	bcs.n	80082cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60da      	str	r2, [r3, #12]
 80082bc:	e009      	b.n	80082d2 <UART_SetConfig+0x5ce>
 80082be:	bf00      	nop
 80082c0:	40008000 	.word	0x40008000
 80082c4:	00f42400 	.word	0x00f42400
 80082c8:	08009988 	.word	0x08009988
      }
      else
      {
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2201      	movs	r2, #1
 80082de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2200      	movs	r2, #0
 80082e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2200      	movs	r2, #0
 80082ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80082ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3730      	adds	r7, #48	; 0x30
 80082f6:	46bd      	mov	sp, r7
 80082f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01a      	beq.n	8008412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083fa:	d10a      	bne.n	8008412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	605a      	str	r2, [r3, #4]
  }
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b098      	sub	sp, #96	; 0x60
 8008444:	af02      	add	r7, sp, #8
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008450:	f7fa fb9e 	bl	8002b90 <HAL_GetTick>
 8008454:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b08      	cmp	r3, #8
 8008462:	d12f      	bne.n	80084c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800846c:	2200      	movs	r2, #0
 800846e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f88e 	bl	8008594 <UART_WaitOnFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d022      	beq.n	80084c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008492:	653b      	str	r3, [r7, #80]	; 0x50
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800849c:	647b      	str	r3, [r7, #68]	; 0x44
 800849e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e6      	bne.n	800847e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e063      	b.n	800858c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d149      	bne.n	8008566 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084da:	2200      	movs	r2, #0
 80084dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f857 	bl	8008594 <UART_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d03c      	beq.n	8008566 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	623b      	str	r3, [r7, #32]
   return(result);
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800850a:	633b      	str	r3, [r7, #48]	; 0x30
 800850c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e6      	bne.n	80084ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	60fb      	str	r3, [r7, #12]
   return(result);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	64bb      	str	r3, [r7, #72]	; 0x48
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800853e:	61fa      	str	r2, [r7, #28]
 8008540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	69b9      	ldr	r1, [r7, #24]
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	617b      	str	r3, [r7, #20]
   return(result);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e5      	bne.n	800851e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e012      	b.n	800858c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3758      	adds	r7, #88	; 0x58
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	4613      	mov	r3, r2
 80085a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a4:	e04f      	b.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ac:	d04b      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ae:	f7fa faef 	bl	8002b90 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d302      	bcc.n	80085c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e04e      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0304 	and.w	r3, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d037      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b80      	cmp	r3, #128	; 0x80
 80085da:	d034      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b40      	cmp	r3, #64	; 0x40
 80085e0:	d031      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d110      	bne.n	8008612 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2208      	movs	r2, #8
 80085f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f838 	bl	800866e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2208      	movs	r2, #8
 8008602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e029      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800861c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008620:	d111      	bne.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800862a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f81e 	bl	800866e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2220      	movs	r2, #32
 8008636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e00f      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	429a      	cmp	r2, r3
 8008662:	d0a0      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800866e:	b480      	push	{r7}
 8008670:	b095      	sub	sp, #84	; 0x54
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800868a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008694:	643b      	str	r3, [r7, #64]	; 0x40
 8008696:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800869a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e6      	bne.n	8008676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	e853 3f00 	ldrex	r3, [r3]
 80086b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086be:	f023 0301 	bic.w	r3, r3, #1
 80086c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3308      	adds	r3, #8
 80086ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e3      	bne.n	80086a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d118      	bne.n	800871a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f023 0310 	bic.w	r3, r3, #16
 80086fc:	647b      	str	r3, [r7, #68]	; 0x44
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008706:	61bb      	str	r3, [r7, #24]
 8008708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	6979      	ldr	r1, [r7, #20]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	613b      	str	r3, [r7, #16]
   return(result);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e6      	bne.n	80086e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800872e:	bf00      	nop
 8008730:	3754      	adds	r7, #84	; 0x54
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_UARTEx_DisableFifoMode+0x16>
 800874c:	2302      	movs	r3, #2
 800874e:	e027      	b.n	80087a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2224      	movs	r2, #36	; 0x24
 800875c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0201 	bic.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800877e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e02d      	b.n	8008820 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2224      	movs	r2, #36	; 0x24
 80087d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0201 	bic.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f84f 	bl	80088a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800883c:	2302      	movs	r3, #2
 800883e:	e02d      	b.n	800889c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2224      	movs	r2, #36	; 0x24
 800884c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f811 	bl	80088a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d108      	bne.n	80088c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088c4:	e031      	b.n	800892a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088c6:	2308      	movs	r3, #8
 80088c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088ca:	2308      	movs	r3, #8
 80088cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	0e5b      	lsrs	r3, r3, #25
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	0f5b      	lsrs	r3, r3, #29
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	7b3a      	ldrb	r2, [r7, #12]
 80088f2:	4911      	ldr	r1, [pc, #68]	; (8008938 <UARTEx_SetNbDataToProcess+0x94>)
 80088f4:	5c8a      	ldrb	r2, [r1, r2]
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088fa:	7b3a      	ldrb	r2, [r7, #12]
 80088fc:	490f      	ldr	r1, [pc, #60]	; (800893c <UARTEx_SetNbDataToProcess+0x98>)
 80088fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008900:	fb93 f3f2 	sdiv	r3, r3, r2
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	7b7a      	ldrb	r2, [r7, #13]
 8008910:	4909      	ldr	r1, [pc, #36]	; (8008938 <UARTEx_SetNbDataToProcess+0x94>)
 8008912:	5c8a      	ldrb	r2, [r1, r2]
 8008914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008918:	7b7a      	ldrb	r2, [r7, #13]
 800891a:	4908      	ldr	r1, [pc, #32]	; (800893c <UARTEx_SetNbDataToProcess+0x98>)
 800891c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800891e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	080099a0 	.word	0x080099a0
 800893c:	080099a8 	.word	0x080099a8

08008940 <__errno>:
 8008940:	4b01      	ldr	r3, [pc, #4]	; (8008948 <__errno+0x8>)
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	2000000c 	.word	0x2000000c

0800894c <__libc_init_array>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4d0d      	ldr	r5, [pc, #52]	; (8008984 <__libc_init_array+0x38>)
 8008950:	4c0d      	ldr	r4, [pc, #52]	; (8008988 <__libc_init_array+0x3c>)
 8008952:	1b64      	subs	r4, r4, r5
 8008954:	10a4      	asrs	r4, r4, #2
 8008956:	2600      	movs	r6, #0
 8008958:	42a6      	cmp	r6, r4
 800895a:	d109      	bne.n	8008970 <__libc_init_array+0x24>
 800895c:	4d0b      	ldr	r5, [pc, #44]	; (800898c <__libc_init_array+0x40>)
 800895e:	4c0c      	ldr	r4, [pc, #48]	; (8008990 <__libc_init_array+0x44>)
 8008960:	f000 fffa 	bl	8009958 <_init>
 8008964:	1b64      	subs	r4, r4, r5
 8008966:	10a4      	asrs	r4, r4, #2
 8008968:	2600      	movs	r6, #0
 800896a:	42a6      	cmp	r6, r4
 800896c:	d105      	bne.n	800897a <__libc_init_array+0x2e>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	f855 3b04 	ldr.w	r3, [r5], #4
 8008974:	4798      	blx	r3
 8008976:	3601      	adds	r6, #1
 8008978:	e7ee      	b.n	8008958 <__libc_init_array+0xc>
 800897a:	f855 3b04 	ldr.w	r3, [r5], #4
 800897e:	4798      	blx	r3
 8008980:	3601      	adds	r6, #1
 8008982:	e7f2      	b.n	800896a <__libc_init_array+0x1e>
 8008984:	08009dc8 	.word	0x08009dc8
 8008988:	08009dc8 	.word	0x08009dc8
 800898c:	08009dc8 	.word	0x08009dc8
 8008990:	08009dcc 	.word	0x08009dcc

08008994 <memset>:
 8008994:	4402      	add	r2, r0
 8008996:	4603      	mov	r3, r0
 8008998:	4293      	cmp	r3, r2
 800899a:	d100      	bne.n	800899e <memset+0xa>
 800899c:	4770      	bx	lr
 800899e:	f803 1b01 	strb.w	r1, [r3], #1
 80089a2:	e7f9      	b.n	8008998 <memset+0x4>

080089a4 <cosf>:
 80089a4:	ee10 3a10 	vmov	r3, s0
 80089a8:	b507      	push	{r0, r1, r2, lr}
 80089aa:	4a1e      	ldr	r2, [pc, #120]	; (8008a24 <cosf+0x80>)
 80089ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089b0:	4293      	cmp	r3, r2
 80089b2:	dc06      	bgt.n	80089c2 <cosf+0x1e>
 80089b4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8008a28 <cosf+0x84>
 80089b8:	b003      	add	sp, #12
 80089ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80089be:	f000 bb1d 	b.w	8008ffc <__kernel_cosf>
 80089c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80089c6:	db04      	blt.n	80089d2 <cosf+0x2e>
 80089c8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80089cc:	b003      	add	sp, #12
 80089ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80089d2:	4668      	mov	r0, sp
 80089d4:	f000 f9d2 	bl	8008d7c <__ieee754_rem_pio2f>
 80089d8:	f000 0003 	and.w	r0, r0, #3
 80089dc:	2801      	cmp	r0, #1
 80089de:	d009      	beq.n	80089f4 <cosf+0x50>
 80089e0:	2802      	cmp	r0, #2
 80089e2:	d010      	beq.n	8008a06 <cosf+0x62>
 80089e4:	b9b0      	cbnz	r0, 8008a14 <cosf+0x70>
 80089e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80089ea:	ed9d 0a00 	vldr	s0, [sp]
 80089ee:	f000 fb05 	bl	8008ffc <__kernel_cosf>
 80089f2:	e7eb      	b.n	80089cc <cosf+0x28>
 80089f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80089f8:	ed9d 0a00 	vldr	s0, [sp]
 80089fc:	f000 fdd4 	bl	80095a8 <__kernel_sinf>
 8008a00:	eeb1 0a40 	vneg.f32	s0, s0
 8008a04:	e7e2      	b.n	80089cc <cosf+0x28>
 8008a06:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a0a:	ed9d 0a00 	vldr	s0, [sp]
 8008a0e:	f000 faf5 	bl	8008ffc <__kernel_cosf>
 8008a12:	e7f5      	b.n	8008a00 <cosf+0x5c>
 8008a14:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a18:	ed9d 0a00 	vldr	s0, [sp]
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	f000 fdc3 	bl	80095a8 <__kernel_sinf>
 8008a22:	e7d3      	b.n	80089cc <cosf+0x28>
 8008a24:	3f490fd8 	.word	0x3f490fd8
 8008a28:	00000000 	.word	0x00000000

08008a2c <sinf>:
 8008a2c:	ee10 3a10 	vmov	r3, s0
 8008a30:	b507      	push	{r0, r1, r2, lr}
 8008a32:	4a1f      	ldr	r2, [pc, #124]	; (8008ab0 <sinf+0x84>)
 8008a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	dc07      	bgt.n	8008a4c <sinf+0x20>
 8008a3c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008ab4 <sinf+0x88>
 8008a40:	2000      	movs	r0, #0
 8008a42:	b003      	add	sp, #12
 8008a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a48:	f000 bdae 	b.w	80095a8 <__kernel_sinf>
 8008a4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a50:	db04      	blt.n	8008a5c <sinf+0x30>
 8008a52:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008a56:	b003      	add	sp, #12
 8008a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a5c:	4668      	mov	r0, sp
 8008a5e:	f000 f98d 	bl	8008d7c <__ieee754_rem_pio2f>
 8008a62:	f000 0003 	and.w	r0, r0, #3
 8008a66:	2801      	cmp	r0, #1
 8008a68:	d00a      	beq.n	8008a80 <sinf+0x54>
 8008a6a:	2802      	cmp	r0, #2
 8008a6c:	d00f      	beq.n	8008a8e <sinf+0x62>
 8008a6e:	b9c0      	cbnz	r0, 8008aa2 <sinf+0x76>
 8008a70:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a74:	ed9d 0a00 	vldr	s0, [sp]
 8008a78:	2001      	movs	r0, #1
 8008a7a:	f000 fd95 	bl	80095a8 <__kernel_sinf>
 8008a7e:	e7ea      	b.n	8008a56 <sinf+0x2a>
 8008a80:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a84:	ed9d 0a00 	vldr	s0, [sp]
 8008a88:	f000 fab8 	bl	8008ffc <__kernel_cosf>
 8008a8c:	e7e3      	b.n	8008a56 <sinf+0x2a>
 8008a8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008a92:	ed9d 0a00 	vldr	s0, [sp]
 8008a96:	2001      	movs	r0, #1
 8008a98:	f000 fd86 	bl	80095a8 <__kernel_sinf>
 8008a9c:	eeb1 0a40 	vneg.f32	s0, s0
 8008aa0:	e7d9      	b.n	8008a56 <sinf+0x2a>
 8008aa2:	eddd 0a01 	vldr	s1, [sp, #4]
 8008aa6:	ed9d 0a00 	vldr	s0, [sp]
 8008aaa:	f000 faa7 	bl	8008ffc <__kernel_cosf>
 8008aae:	e7f5      	b.n	8008a9c <sinf+0x70>
 8008ab0:	3f490fd8 	.word	0x3f490fd8
 8008ab4:	00000000 	.word	0x00000000

08008ab8 <atan2f>:
 8008ab8:	f000 b83e 	b.w	8008b38 <__ieee754_atan2f>

08008abc <fmodf>:
 8008abc:	b508      	push	{r3, lr}
 8008abe:	ed2d 8b02 	vpush	{d8}
 8008ac2:	eef0 8a40 	vmov.f32	s17, s0
 8008ac6:	eeb0 8a60 	vmov.f32	s16, s1
 8008aca:	f000 f8d5 	bl	8008c78 <__ieee754_fmodf>
 8008ace:	eef4 8a48 	vcmp.f32	s17, s16
 8008ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad6:	d60c      	bvs.n	8008af2 <fmodf+0x36>
 8008ad8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008af8 <fmodf+0x3c>
 8008adc:	eeb4 8a68 	vcmp.f32	s16, s17
 8008ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae4:	d105      	bne.n	8008af2 <fmodf+0x36>
 8008ae6:	f7ff ff2b 	bl	8008940 <__errno>
 8008aea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008aee:	2321      	movs	r3, #33	; 0x21
 8008af0:	6003      	str	r3, [r0, #0]
 8008af2:	ecbd 8b02 	vpop	{d8}
 8008af6:	bd08      	pop	{r3, pc}
 8008af8:	00000000 	.word	0x00000000

08008afc <sqrtf>:
 8008afc:	b508      	push	{r3, lr}
 8008afe:	ed2d 8b02 	vpush	{d8}
 8008b02:	eeb0 8a40 	vmov.f32	s16, s0
 8008b06:	f000 fa75 	bl	8008ff4 <__ieee754_sqrtf>
 8008b0a:	eeb4 8a48 	vcmp.f32	s16, s16
 8008b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b12:	d60c      	bvs.n	8008b2e <sqrtf+0x32>
 8008b14:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008b34 <sqrtf+0x38>
 8008b18:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b20:	d505      	bpl.n	8008b2e <sqrtf+0x32>
 8008b22:	f7ff ff0d 	bl	8008940 <__errno>
 8008b26:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008b2a:	2321      	movs	r3, #33	; 0x21
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	ecbd 8b02 	vpop	{d8}
 8008b32:	bd08      	pop	{r3, pc}
 8008b34:	00000000 	.word	0x00000000

08008b38 <__ieee754_atan2f>:
 8008b38:	ee10 2a90 	vmov	r2, s1
 8008b3c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008b40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008b44:	b510      	push	{r4, lr}
 8008b46:	eef0 7a40 	vmov.f32	s15, s0
 8008b4a:	dc06      	bgt.n	8008b5a <__ieee754_atan2f+0x22>
 8008b4c:	ee10 0a10 	vmov	r0, s0
 8008b50:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008b54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008b58:	dd04      	ble.n	8008b64 <__ieee754_atan2f+0x2c>
 8008b5a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b62:	bd10      	pop	{r4, pc}
 8008b64:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008b68:	d103      	bne.n	8008b72 <__ieee754_atan2f+0x3a>
 8008b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b6e:	f000 bd63 	b.w	8009638 <atanf>
 8008b72:	1794      	asrs	r4, r2, #30
 8008b74:	f004 0402 	and.w	r4, r4, #2
 8008b78:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008b7c:	b943      	cbnz	r3, 8008b90 <__ieee754_atan2f+0x58>
 8008b7e:	2c02      	cmp	r4, #2
 8008b80:	d05e      	beq.n	8008c40 <__ieee754_atan2f+0x108>
 8008b82:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008c54 <__ieee754_atan2f+0x11c>
 8008b86:	2c03      	cmp	r4, #3
 8008b88:	bf08      	it	eq
 8008b8a:	eef0 7a47 	vmoveq.f32	s15, s14
 8008b8e:	e7e6      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008b90:	b941      	cbnz	r1, 8008ba4 <__ieee754_atan2f+0x6c>
 8008b92:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008c58 <__ieee754_atan2f+0x120>
 8008b96:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008c5c <__ieee754_atan2f+0x124>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	bfb8      	it	lt
 8008b9e:	eef0 7a40 	vmovlt.f32	s15, s0
 8008ba2:	e7dc      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008ba4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008ba8:	d110      	bne.n	8008bcc <__ieee754_atan2f+0x94>
 8008baa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008bae:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bb2:	d107      	bne.n	8008bc4 <__ieee754_atan2f+0x8c>
 8008bb4:	2c02      	cmp	r4, #2
 8008bb6:	d846      	bhi.n	8008c46 <__ieee754_atan2f+0x10e>
 8008bb8:	4b29      	ldr	r3, [pc, #164]	; (8008c60 <__ieee754_atan2f+0x128>)
 8008bba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bbe:	edd4 7a00 	vldr	s15, [r4]
 8008bc2:	e7cc      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008bc4:	2c02      	cmp	r4, #2
 8008bc6:	d841      	bhi.n	8008c4c <__ieee754_atan2f+0x114>
 8008bc8:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <__ieee754_atan2f+0x12c>)
 8008bca:	e7f6      	b.n	8008bba <__ieee754_atan2f+0x82>
 8008bcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008bd0:	d0df      	beq.n	8008b92 <__ieee754_atan2f+0x5a>
 8008bd2:	1a5b      	subs	r3, r3, r1
 8008bd4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008bd8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008bdc:	da1a      	bge.n	8008c14 <__ieee754_atan2f+0xdc>
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	da01      	bge.n	8008be6 <__ieee754_atan2f+0xae>
 8008be2:	313c      	adds	r1, #60	; 0x3c
 8008be4:	db19      	blt.n	8008c1a <__ieee754_atan2f+0xe2>
 8008be6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008bea:	f000 fdf9 	bl	80097e0 <fabsf>
 8008bee:	f000 fd23 	bl	8009638 <atanf>
 8008bf2:	eef0 7a40 	vmov.f32	s15, s0
 8008bf6:	2c01      	cmp	r4, #1
 8008bf8:	d012      	beq.n	8008c20 <__ieee754_atan2f+0xe8>
 8008bfa:	2c02      	cmp	r4, #2
 8008bfc:	d017      	beq.n	8008c2e <__ieee754_atan2f+0xf6>
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d0ad      	beq.n	8008b5e <__ieee754_atan2f+0x26>
 8008c02:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008c68 <__ieee754_atan2f+0x130>
 8008c06:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008c0a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008c6c <__ieee754_atan2f+0x134>
 8008c0e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008c12:	e7a4      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008c14:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008c58 <__ieee754_atan2f+0x120>
 8008c18:	e7ed      	b.n	8008bf6 <__ieee754_atan2f+0xbe>
 8008c1a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008c70 <__ieee754_atan2f+0x138>
 8008c1e:	e7ea      	b.n	8008bf6 <__ieee754_atan2f+0xbe>
 8008c20:	ee17 3a90 	vmov	r3, s15
 8008c24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c28:	ee07 3a90 	vmov	s15, r3
 8008c2c:	e797      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008c2e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008c68 <__ieee754_atan2f+0x130>
 8008c32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008c36:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008c6c <__ieee754_atan2f+0x134>
 8008c3a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008c3e:	e78e      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008c40:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008c6c <__ieee754_atan2f+0x134>
 8008c44:	e78b      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008c46:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008c74 <__ieee754_atan2f+0x13c>
 8008c4a:	e788      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008c4c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008c70 <__ieee754_atan2f+0x138>
 8008c50:	e785      	b.n	8008b5e <__ieee754_atan2f+0x26>
 8008c52:	bf00      	nop
 8008c54:	c0490fdb 	.word	0xc0490fdb
 8008c58:	3fc90fdb 	.word	0x3fc90fdb
 8008c5c:	bfc90fdb 	.word	0xbfc90fdb
 8008c60:	080099b0 	.word	0x080099b0
 8008c64:	080099bc 	.word	0x080099bc
 8008c68:	33bbbd2e 	.word	0x33bbbd2e
 8008c6c:	40490fdb 	.word	0x40490fdb
 8008c70:	00000000 	.word	0x00000000
 8008c74:	3f490fdb 	.word	0x3f490fdb

08008c78 <__ieee754_fmodf>:
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	ee10 5a90 	vmov	r5, s1
 8008c7e:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8008c82:	d009      	beq.n	8008c98 <__ieee754_fmodf+0x20>
 8008c84:	ee10 2a10 	vmov	r2, s0
 8008c88:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008c8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008c90:	da02      	bge.n	8008c98 <__ieee754_fmodf+0x20>
 8008c92:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008c96:	dd04      	ble.n	8008ca2 <__ieee754_fmodf+0x2a>
 8008c98:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008c9c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8008ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca2:	42a3      	cmp	r3, r4
 8008ca4:	dbfc      	blt.n	8008ca0 <__ieee754_fmodf+0x28>
 8008ca6:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8008caa:	d105      	bne.n	8008cb8 <__ieee754_fmodf+0x40>
 8008cac:	4b32      	ldr	r3, [pc, #200]	; (8008d78 <__ieee754_fmodf+0x100>)
 8008cae:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8008cb2:	ed93 0a00 	vldr	s0, [r3]
 8008cb6:	e7f3      	b.n	8008ca0 <__ieee754_fmodf+0x28>
 8008cb8:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8008cbc:	d13f      	bne.n	8008d3e <__ieee754_fmodf+0xc6>
 8008cbe:	0219      	lsls	r1, r3, #8
 8008cc0:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	dc37      	bgt.n	8008d38 <__ieee754_fmodf+0xc0>
 8008cc8:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8008ccc:	d13d      	bne.n	8008d4a <__ieee754_fmodf+0xd2>
 8008cce:	0227      	lsls	r7, r4, #8
 8008cd0:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008cd4:	2f00      	cmp	r7, #0
 8008cd6:	da35      	bge.n	8008d44 <__ieee754_fmodf+0xcc>
 8008cd8:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8008cdc:	bfbb      	ittet	lt
 8008cde:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008ce2:	1a12      	sublt	r2, r2, r0
 8008ce4:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8008ce8:	4093      	lsllt	r3, r2
 8008cea:	bfa8      	it	ge
 8008cec:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8008cf0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008cf4:	bfb5      	itete	lt
 8008cf6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008cfa:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8008cfe:	1a52      	sublt	r2, r2, r1
 8008d00:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8008d04:	bfb8      	it	lt
 8008d06:	4094      	lsllt	r4, r2
 8008d08:	1a40      	subs	r0, r0, r1
 8008d0a:	1b1a      	subs	r2, r3, r4
 8008d0c:	bb00      	cbnz	r0, 8008d50 <__ieee754_fmodf+0xd8>
 8008d0e:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8008d12:	bf38      	it	cc
 8008d14:	4613      	movcc	r3, r2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0c8      	beq.n	8008cac <__ieee754_fmodf+0x34>
 8008d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d1e:	db1f      	blt.n	8008d60 <__ieee754_fmodf+0xe8>
 8008d20:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008d24:	db1f      	blt.n	8008d66 <__ieee754_fmodf+0xee>
 8008d26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008d2a:	317f      	adds	r1, #127	; 0x7f
 8008d2c:	4333      	orrs	r3, r6
 8008d2e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8008d32:	ee00 3a10 	vmov	s0, r3
 8008d36:	e7b3      	b.n	8008ca0 <__ieee754_fmodf+0x28>
 8008d38:	3801      	subs	r0, #1
 8008d3a:	0049      	lsls	r1, r1, #1
 8008d3c:	e7c2      	b.n	8008cc4 <__ieee754_fmodf+0x4c>
 8008d3e:	15d8      	asrs	r0, r3, #23
 8008d40:	387f      	subs	r0, #127	; 0x7f
 8008d42:	e7c1      	b.n	8008cc8 <__ieee754_fmodf+0x50>
 8008d44:	3901      	subs	r1, #1
 8008d46:	007f      	lsls	r7, r7, #1
 8008d48:	e7c4      	b.n	8008cd4 <__ieee754_fmodf+0x5c>
 8008d4a:	15e1      	asrs	r1, r4, #23
 8008d4c:	397f      	subs	r1, #127	; 0x7f
 8008d4e:	e7c3      	b.n	8008cd8 <__ieee754_fmodf+0x60>
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	da02      	bge.n	8008d5a <__ieee754_fmodf+0xe2>
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	3801      	subs	r0, #1
 8008d58:	e7d7      	b.n	8008d0a <__ieee754_fmodf+0x92>
 8008d5a:	d0a7      	beq.n	8008cac <__ieee754_fmodf+0x34>
 8008d5c:	0053      	lsls	r3, r2, #1
 8008d5e:	e7fa      	b.n	8008d56 <__ieee754_fmodf+0xde>
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	3901      	subs	r1, #1
 8008d64:	e7d9      	b.n	8008d1a <__ieee754_fmodf+0xa2>
 8008d66:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8008d6a:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8008d6e:	3182      	adds	r1, #130	; 0x82
 8008d70:	410b      	asrs	r3, r1
 8008d72:	4333      	orrs	r3, r6
 8008d74:	e7dd      	b.n	8008d32 <__ieee754_fmodf+0xba>
 8008d76:	bf00      	nop
 8008d78:	080099c8 	.word	0x080099c8

08008d7c <__ieee754_rem_pio2f>:
 8008d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d7e:	ee10 6a10 	vmov	r6, s0
 8008d82:	4b8e      	ldr	r3, [pc, #568]	; (8008fbc <__ieee754_rem_pio2f+0x240>)
 8008d84:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008d88:	429d      	cmp	r5, r3
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	eef0 7a40 	vmov.f32	s15, s0
 8008d90:	4604      	mov	r4, r0
 8008d92:	dc05      	bgt.n	8008da0 <__ieee754_rem_pio2f+0x24>
 8008d94:	2300      	movs	r3, #0
 8008d96:	ed80 0a00 	vstr	s0, [r0]
 8008d9a:	6043      	str	r3, [r0, #4]
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e01a      	b.n	8008dd6 <__ieee754_rem_pio2f+0x5a>
 8008da0:	4b87      	ldr	r3, [pc, #540]	; (8008fc0 <__ieee754_rem_pio2f+0x244>)
 8008da2:	429d      	cmp	r5, r3
 8008da4:	dc46      	bgt.n	8008e34 <__ieee754_rem_pio2f+0xb8>
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008fc4 <__ieee754_rem_pio2f+0x248>
 8008dac:	4b86      	ldr	r3, [pc, #536]	; (8008fc8 <__ieee754_rem_pio2f+0x24c>)
 8008dae:	f025 050f 	bic.w	r5, r5, #15
 8008db2:	dd1f      	ble.n	8008df4 <__ieee754_rem_pio2f+0x78>
 8008db4:	429d      	cmp	r5, r3
 8008db6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008dba:	d00e      	beq.n	8008dda <__ieee754_rem_pio2f+0x5e>
 8008dbc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008fcc <__ieee754_rem_pio2f+0x250>
 8008dc0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008dc4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008dc8:	ed80 0a00 	vstr	s0, [r0]
 8008dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	edc4 7a01 	vstr	s15, [r4, #4]
 8008dd6:	b007      	add	sp, #28
 8008dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dda:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008fd0 <__ieee754_rem_pio2f+0x254>
 8008dde:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008fd4 <__ieee754_rem_pio2f+0x258>
 8008de2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008de6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008dea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dee:	edc0 6a00 	vstr	s13, [r0]
 8008df2:	e7eb      	b.n	8008dcc <__ieee754_rem_pio2f+0x50>
 8008df4:	429d      	cmp	r5, r3
 8008df6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008dfa:	d00e      	beq.n	8008e1a <__ieee754_rem_pio2f+0x9e>
 8008dfc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008fcc <__ieee754_rem_pio2f+0x250>
 8008e00:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008e04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008e08:	ed80 0a00 	vstr	s0, [r0]
 8008e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295
 8008e14:	edc4 7a01 	vstr	s15, [r4, #4]
 8008e18:	e7dd      	b.n	8008dd6 <__ieee754_rem_pio2f+0x5a>
 8008e1a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008fd0 <__ieee754_rem_pio2f+0x254>
 8008e1e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008fd4 <__ieee754_rem_pio2f+0x258>
 8008e22:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008e26:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008e2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e2e:	edc0 6a00 	vstr	s13, [r0]
 8008e32:	e7eb      	b.n	8008e0c <__ieee754_rem_pio2f+0x90>
 8008e34:	4b68      	ldr	r3, [pc, #416]	; (8008fd8 <__ieee754_rem_pio2f+0x25c>)
 8008e36:	429d      	cmp	r5, r3
 8008e38:	dc72      	bgt.n	8008f20 <__ieee754_rem_pio2f+0x1a4>
 8008e3a:	f000 fcd1 	bl	80097e0 <fabsf>
 8008e3e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008fdc <__ieee754_rem_pio2f+0x260>
 8008e42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008e46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e52:	ee17 0a90 	vmov	r0, s15
 8008e56:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008fc4 <__ieee754_rem_pio2f+0x248>
 8008e5a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008e5e:	281f      	cmp	r0, #31
 8008e60:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008fcc <__ieee754_rem_pio2f+0x250>
 8008e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e68:	eeb1 6a47 	vneg.f32	s12, s14
 8008e6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008e70:	ee16 2a90 	vmov	r2, s13
 8008e74:	dc1c      	bgt.n	8008eb0 <__ieee754_rem_pio2f+0x134>
 8008e76:	495a      	ldr	r1, [pc, #360]	; (8008fe0 <__ieee754_rem_pio2f+0x264>)
 8008e78:	1e47      	subs	r7, r0, #1
 8008e7a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008e7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008e82:	428b      	cmp	r3, r1
 8008e84:	d014      	beq.n	8008eb0 <__ieee754_rem_pio2f+0x134>
 8008e86:	6022      	str	r2, [r4, #0]
 8008e88:	ed94 7a00 	vldr	s14, [r4]
 8008e8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008e96:	ed84 0a01 	vstr	s0, [r4, #4]
 8008e9a:	da9c      	bge.n	8008dd6 <__ieee754_rem_pio2f+0x5a>
 8008e9c:	eeb1 7a47 	vneg.f32	s14, s14
 8008ea0:	eeb1 0a40 	vneg.f32	s0, s0
 8008ea4:	ed84 7a00 	vstr	s14, [r4]
 8008ea8:	ed84 0a01 	vstr	s0, [r4, #4]
 8008eac:	4240      	negs	r0, r0
 8008eae:	e792      	b.n	8008dd6 <__ieee754_rem_pio2f+0x5a>
 8008eb0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008eb4:	15eb      	asrs	r3, r5, #23
 8008eb6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008eba:	2d08      	cmp	r5, #8
 8008ebc:	dde3      	ble.n	8008e86 <__ieee754_rem_pio2f+0x10a>
 8008ebe:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008fd0 <__ieee754_rem_pio2f+0x254>
 8008ec2:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fd4 <__ieee754_rem_pio2f+0x258>
 8008ec6:	eef0 6a40 	vmov.f32	s13, s0
 8008eca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008ece:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008ed2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008ed6:	eef0 7a40 	vmov.f32	s15, s0
 8008eda:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008ede:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008ee2:	ee15 2a90 	vmov	r2, s11
 8008ee6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	2b19      	cmp	r3, #25
 8008eee:	dc04      	bgt.n	8008efa <__ieee754_rem_pio2f+0x17e>
 8008ef0:	edc4 5a00 	vstr	s11, [r4]
 8008ef4:	eeb0 0a66 	vmov.f32	s0, s13
 8008ef8:	e7c6      	b.n	8008e88 <__ieee754_rem_pio2f+0x10c>
 8008efa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008fe4 <__ieee754_rem_pio2f+0x268>
 8008efe:	eeb0 0a66 	vmov.f32	s0, s13
 8008f02:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008f06:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008f0a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008fe8 <__ieee754_rem_pio2f+0x26c>
 8008f0e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008f12:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008f16:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008f1a:	ed84 7a00 	vstr	s14, [r4]
 8008f1e:	e7b3      	b.n	8008e88 <__ieee754_rem_pio2f+0x10c>
 8008f20:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008f24:	db06      	blt.n	8008f34 <__ieee754_rem_pio2f+0x1b8>
 8008f26:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008f2a:	edc0 7a01 	vstr	s15, [r0, #4]
 8008f2e:	edc0 7a00 	vstr	s15, [r0]
 8008f32:	e733      	b.n	8008d9c <__ieee754_rem_pio2f+0x20>
 8008f34:	15ea      	asrs	r2, r5, #23
 8008f36:	3a86      	subs	r2, #134	; 0x86
 8008f38:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008f3c:	ee07 3a90 	vmov	s15, r3
 8008f40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f44:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008fec <__ieee754_rem_pio2f+0x270>
 8008f48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f50:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f64:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008f68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	edcd 7a05 	vstr	s15, [sp, #20]
 8008f78:	d11e      	bne.n	8008fb8 <__ieee754_rem_pio2f+0x23c>
 8008f7a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f82:	bf14      	ite	ne
 8008f84:	2302      	movne	r3, #2
 8008f86:	2301      	moveq	r3, #1
 8008f88:	4919      	ldr	r1, [pc, #100]	; (8008ff0 <__ieee754_rem_pio2f+0x274>)
 8008f8a:	9101      	str	r1, [sp, #4]
 8008f8c:	2102      	movs	r1, #2
 8008f8e:	9100      	str	r1, [sp, #0]
 8008f90:	a803      	add	r0, sp, #12
 8008f92:	4621      	mov	r1, r4
 8008f94:	f000 f892 	bl	80090bc <__kernel_rem_pio2f>
 8008f98:	2e00      	cmp	r6, #0
 8008f9a:	f6bf af1c 	bge.w	8008dd6 <__ieee754_rem_pio2f+0x5a>
 8008f9e:	edd4 7a00 	vldr	s15, [r4]
 8008fa2:	eef1 7a67 	vneg.f32	s15, s15
 8008fa6:	edc4 7a00 	vstr	s15, [r4]
 8008faa:	edd4 7a01 	vldr	s15, [r4, #4]
 8008fae:	eef1 7a67 	vneg.f32	s15, s15
 8008fb2:	edc4 7a01 	vstr	s15, [r4, #4]
 8008fb6:	e779      	b.n	8008eac <__ieee754_rem_pio2f+0x130>
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e7e5      	b.n	8008f88 <__ieee754_rem_pio2f+0x20c>
 8008fbc:	3f490fd8 	.word	0x3f490fd8
 8008fc0:	4016cbe3 	.word	0x4016cbe3
 8008fc4:	3fc90f80 	.word	0x3fc90f80
 8008fc8:	3fc90fd0 	.word	0x3fc90fd0
 8008fcc:	37354443 	.word	0x37354443
 8008fd0:	37354400 	.word	0x37354400
 8008fd4:	2e85a308 	.word	0x2e85a308
 8008fd8:	43490f80 	.word	0x43490f80
 8008fdc:	3f22f984 	.word	0x3f22f984
 8008fe0:	080099d0 	.word	0x080099d0
 8008fe4:	2e85a300 	.word	0x2e85a300
 8008fe8:	248d3132 	.word	0x248d3132
 8008fec:	43800000 	.word	0x43800000
 8008ff0:	08009a50 	.word	0x08009a50

08008ff4 <__ieee754_sqrtf>:
 8008ff4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008ff8:	4770      	bx	lr
	...

08008ffc <__kernel_cosf>:
 8008ffc:	ee10 3a10 	vmov	r3, s0
 8009000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009004:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009008:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800900c:	da05      	bge.n	800901a <__kernel_cosf+0x1e>
 800900e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009012:	ee17 2a90 	vmov	r2, s15
 8009016:	2a00      	cmp	r2, #0
 8009018:	d03d      	beq.n	8009096 <__kernel_cosf+0x9a>
 800901a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800901e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800909c <__kernel_cosf+0xa0>
 8009022:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80090a0 <__kernel_cosf+0xa4>
 8009026:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80090a4 <__kernel_cosf+0xa8>
 800902a:	4a1f      	ldr	r2, [pc, #124]	; (80090a8 <__kernel_cosf+0xac>)
 800902c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009030:	4293      	cmp	r3, r2
 8009032:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80090ac <__kernel_cosf+0xb0>
 8009036:	eee7 7a25 	vfma.f32	s15, s14, s11
 800903a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80090b0 <__kernel_cosf+0xb4>
 800903e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009042:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80090b4 <__kernel_cosf+0xb8>
 8009046:	eee7 7a25 	vfma.f32	s15, s14, s11
 800904a:	eeb0 7a66 	vmov.f32	s14, s13
 800904e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009052:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009056:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800905a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800905e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8009062:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009066:	dc04      	bgt.n	8009072 <__kernel_cosf+0x76>
 8009068:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800906c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8009070:	4770      	bx	lr
 8009072:	4a11      	ldr	r2, [pc, #68]	; (80090b8 <__kernel_cosf+0xbc>)
 8009074:	4293      	cmp	r3, r2
 8009076:	bfda      	itte	le
 8009078:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800907c:	ee06 3a90 	vmovle	s13, r3
 8009080:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8009084:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009088:	ee36 0a66 	vsub.f32	s0, s12, s13
 800908c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009090:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009094:	4770      	bx	lr
 8009096:	eeb0 0a46 	vmov.f32	s0, s12
 800909a:	4770      	bx	lr
 800909c:	ad47d74e 	.word	0xad47d74e
 80090a0:	310f74f6 	.word	0x310f74f6
 80090a4:	3d2aaaab 	.word	0x3d2aaaab
 80090a8:	3e999999 	.word	0x3e999999
 80090ac:	b493f27c 	.word	0xb493f27c
 80090b0:	37d00d01 	.word	0x37d00d01
 80090b4:	bab60b61 	.word	0xbab60b61
 80090b8:	3f480000 	.word	0x3f480000

080090bc <__kernel_rem_pio2f>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	ed2d 8b04 	vpush	{d8-d9}
 80090c4:	b0d9      	sub	sp, #356	; 0x164
 80090c6:	4688      	mov	r8, r1
 80090c8:	9002      	str	r0, [sp, #8]
 80090ca:	49bb      	ldr	r1, [pc, #748]	; (80093b8 <__kernel_rem_pio2f+0x2fc>)
 80090cc:	9866      	ldr	r0, [sp, #408]	; 0x198
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80090d4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80090d8:	1e59      	subs	r1, r3, #1
 80090da:	1d13      	adds	r3, r2, #4
 80090dc:	db27      	blt.n	800912e <__kernel_rem_pio2f+0x72>
 80090de:	f1b2 0b03 	subs.w	fp, r2, #3
 80090e2:	bf48      	it	mi
 80090e4:	f102 0b04 	addmi.w	fp, r2, #4
 80090e8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80090ec:	1c45      	adds	r5, r0, #1
 80090ee:	00ec      	lsls	r4, r5, #3
 80090f0:	1a47      	subs	r7, r0, r1
 80090f2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80093c8 <__kernel_rem_pio2f+0x30c>
 80090f6:	9403      	str	r4, [sp, #12]
 80090f8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80090fc:	eb0a 0c01 	add.w	ip, sl, r1
 8009100:	ae1c      	add	r6, sp, #112	; 0x70
 8009102:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009106:	2400      	movs	r4, #0
 8009108:	4564      	cmp	r4, ip
 800910a:	dd12      	ble.n	8009132 <__kernel_rem_pio2f+0x76>
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	ac1c      	add	r4, sp, #112	; 0x70
 8009110:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009114:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009118:	f04f 0c00 	mov.w	ip, #0
 800911c:	45d4      	cmp	ip, sl
 800911e:	dc27      	bgt.n	8009170 <__kernel_rem_pio2f+0xb4>
 8009120:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009124:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80093c8 <__kernel_rem_pio2f+0x30c>
 8009128:	4627      	mov	r7, r4
 800912a:	2600      	movs	r6, #0
 800912c:	e016      	b.n	800915c <__kernel_rem_pio2f+0xa0>
 800912e:	2000      	movs	r0, #0
 8009130:	e7dc      	b.n	80090ec <__kernel_rem_pio2f+0x30>
 8009132:	42e7      	cmn	r7, r4
 8009134:	bf5d      	ittte	pl
 8009136:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800913a:	ee07 3a90 	vmovpl	s15, r3
 800913e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009142:	eef0 7a47 	vmovmi.f32	s15, s14
 8009146:	ece6 7a01 	vstmia	r6!, {s15}
 800914a:	3401      	adds	r4, #1
 800914c:	e7dc      	b.n	8009108 <__kernel_rem_pio2f+0x4c>
 800914e:	ecf9 6a01 	vldmia	r9!, {s13}
 8009152:	ed97 7a00 	vldr	s14, [r7]
 8009156:	eee6 7a87 	vfma.f32	s15, s13, s14
 800915a:	3601      	adds	r6, #1
 800915c:	428e      	cmp	r6, r1
 800915e:	f1a7 0704 	sub.w	r7, r7, #4
 8009162:	ddf4      	ble.n	800914e <__kernel_rem_pio2f+0x92>
 8009164:	eceb 7a01 	vstmia	fp!, {s15}
 8009168:	f10c 0c01 	add.w	ip, ip, #1
 800916c:	3404      	adds	r4, #4
 800916e:	e7d5      	b.n	800911c <__kernel_rem_pio2f+0x60>
 8009170:	ab08      	add	r3, sp, #32
 8009172:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009176:	eddf 8a93 	vldr	s17, [pc, #588]	; 80093c4 <__kernel_rem_pio2f+0x308>
 800917a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80093c0 <__kernel_rem_pio2f+0x304>
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8009184:	4656      	mov	r6, sl
 8009186:	00b3      	lsls	r3, r6, #2
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	ab58      	add	r3, sp, #352	; 0x160
 800918c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8009190:	ac08      	add	r4, sp, #32
 8009192:	ab44      	add	r3, sp, #272	; 0x110
 8009194:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8009198:	46a4      	mov	ip, r4
 800919a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800919e:	4637      	mov	r7, r6
 80091a0:	2f00      	cmp	r7, #0
 80091a2:	f1a0 0004 	sub.w	r0, r0, #4
 80091a6:	dc4f      	bgt.n	8009248 <__kernel_rem_pio2f+0x18c>
 80091a8:	4628      	mov	r0, r5
 80091aa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80091ae:	f000 fb61 	bl	8009874 <scalbnf>
 80091b2:	eeb0 8a40 	vmov.f32	s16, s0
 80091b6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80091ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 80091be:	f000 fb17 	bl	80097f0 <floorf>
 80091c2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80091c6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80091d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80091d4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80091d8:	ee17 9a90 	vmov	r9, s15
 80091dc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80091e0:	dd44      	ble.n	800926c <__kernel_rem_pio2f+0x1b0>
 80091e2:	f106 3cff 	add.w	ip, r6, #4294967295
 80091e6:	ab08      	add	r3, sp, #32
 80091e8:	f1c5 0e08 	rsb	lr, r5, #8
 80091ec:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80091f0:	fa47 f00e 	asr.w	r0, r7, lr
 80091f4:	4481      	add	r9, r0
 80091f6:	fa00 f00e 	lsl.w	r0, r0, lr
 80091fa:	1a3f      	subs	r7, r7, r0
 80091fc:	f1c5 0007 	rsb	r0, r5, #7
 8009200:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009204:	4107      	asrs	r7, r0
 8009206:	2f00      	cmp	r7, #0
 8009208:	dd3f      	ble.n	800928a <__kernel_rem_pio2f+0x1ce>
 800920a:	f04f 0e00 	mov.w	lr, #0
 800920e:	f109 0901 	add.w	r9, r9, #1
 8009212:	4673      	mov	r3, lr
 8009214:	4576      	cmp	r6, lr
 8009216:	dc6b      	bgt.n	80092f0 <__kernel_rem_pio2f+0x234>
 8009218:	2d00      	cmp	r5, #0
 800921a:	dd04      	ble.n	8009226 <__kernel_rem_pio2f+0x16a>
 800921c:	2d01      	cmp	r5, #1
 800921e:	d078      	beq.n	8009312 <__kernel_rem_pio2f+0x256>
 8009220:	2d02      	cmp	r5, #2
 8009222:	f000 8081 	beq.w	8009328 <__kernel_rem_pio2f+0x26c>
 8009226:	2f02      	cmp	r7, #2
 8009228:	d12f      	bne.n	800928a <__kernel_rem_pio2f+0x1ce>
 800922a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800922e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009232:	b353      	cbz	r3, 800928a <__kernel_rem_pio2f+0x1ce>
 8009234:	4628      	mov	r0, r5
 8009236:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800923a:	f000 fb1b 	bl	8009874 <scalbnf>
 800923e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009242:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009246:	e020      	b.n	800928a <__kernel_rem_pio2f+0x1ce>
 8009248:	ee60 7a28 	vmul.f32	s15, s0, s17
 800924c:	3f01      	subs	r7, #1
 800924e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009256:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800925a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800925e:	ecac 0a01 	vstmia	ip!, {s0}
 8009262:	ed90 0a00 	vldr	s0, [r0]
 8009266:	ee37 0a80 	vadd.f32	s0, s15, s0
 800926a:	e799      	b.n	80091a0 <__kernel_rem_pio2f+0xe4>
 800926c:	d105      	bne.n	800927a <__kernel_rem_pio2f+0x1be>
 800926e:	1e70      	subs	r0, r6, #1
 8009270:	ab08      	add	r3, sp, #32
 8009272:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009276:	11ff      	asrs	r7, r7, #7
 8009278:	e7c5      	b.n	8009206 <__kernel_rem_pio2f+0x14a>
 800927a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800927e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	da31      	bge.n	80092ec <__kernel_rem_pio2f+0x230>
 8009288:	2700      	movs	r7, #0
 800928a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800928e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009292:	f040 809b 	bne.w	80093cc <__kernel_rem_pio2f+0x310>
 8009296:	1e74      	subs	r4, r6, #1
 8009298:	46a4      	mov	ip, r4
 800929a:	2000      	movs	r0, #0
 800929c:	45d4      	cmp	ip, sl
 800929e:	da4a      	bge.n	8009336 <__kernel_rem_pio2f+0x27a>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d07a      	beq.n	800939a <__kernel_rem_pio2f+0x2de>
 80092a4:	ab08      	add	r3, sp, #32
 80092a6:	3d08      	subs	r5, #8
 80092a8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 8081 	beq.w	80093b4 <__kernel_rem_pio2f+0x2f8>
 80092b2:	4628      	mov	r0, r5
 80092b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80092b8:	00a5      	lsls	r5, r4, #2
 80092ba:	f000 fadb 	bl	8009874 <scalbnf>
 80092be:	aa44      	add	r2, sp, #272	; 0x110
 80092c0:	1d2b      	adds	r3, r5, #4
 80092c2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80093c4 <__kernel_rem_pio2f+0x308>
 80092c6:	18d1      	adds	r1, r2, r3
 80092c8:	4622      	mov	r2, r4
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	f280 80ae 	bge.w	800942c <__kernel_rem_pio2f+0x370>
 80092d0:	4622      	mov	r2, r4
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	f2c0 80cc 	blt.w	8009470 <__kernel_rem_pio2f+0x3b4>
 80092d8:	a944      	add	r1, sp, #272	; 0x110
 80092da:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80092de:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80093bc <__kernel_rem_pio2f+0x300>
 80092e2:	eddf 7a39 	vldr	s15, [pc, #228]	; 80093c8 <__kernel_rem_pio2f+0x30c>
 80092e6:	2000      	movs	r0, #0
 80092e8:	1aa1      	subs	r1, r4, r2
 80092ea:	e0b6      	b.n	800945a <__kernel_rem_pio2f+0x39e>
 80092ec:	2702      	movs	r7, #2
 80092ee:	e78c      	b.n	800920a <__kernel_rem_pio2f+0x14e>
 80092f0:	6820      	ldr	r0, [r4, #0]
 80092f2:	b94b      	cbnz	r3, 8009308 <__kernel_rem_pio2f+0x24c>
 80092f4:	b118      	cbz	r0, 80092fe <__kernel_rem_pio2f+0x242>
 80092f6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	2001      	movs	r0, #1
 80092fe:	f10e 0e01 	add.w	lr, lr, #1
 8009302:	3404      	adds	r4, #4
 8009304:	4603      	mov	r3, r0
 8009306:	e785      	b.n	8009214 <__kernel_rem_pio2f+0x158>
 8009308:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800930c:	6020      	str	r0, [r4, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	e7f5      	b.n	80092fe <__kernel_rem_pio2f+0x242>
 8009312:	1e74      	subs	r4, r6, #1
 8009314:	a808      	add	r0, sp, #32
 8009316:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800931a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800931e:	f10d 0c20 	add.w	ip, sp, #32
 8009322:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8009326:	e77e      	b.n	8009226 <__kernel_rem_pio2f+0x16a>
 8009328:	1e74      	subs	r4, r6, #1
 800932a:	a808      	add	r0, sp, #32
 800932c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009330:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009334:	e7f3      	b.n	800931e <__kernel_rem_pio2f+0x262>
 8009336:	ab08      	add	r3, sp, #32
 8009338:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800933c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009340:	4318      	orrs	r0, r3
 8009342:	e7ab      	b.n	800929c <__kernel_rem_pio2f+0x1e0>
 8009344:	f10c 0c01 	add.w	ip, ip, #1
 8009348:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800934c:	2c00      	cmp	r4, #0
 800934e:	d0f9      	beq.n	8009344 <__kernel_rem_pio2f+0x288>
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009356:	eb0d 0003 	add.w	r0, sp, r3
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	18f4      	adds	r4, r6, r3
 800935e:	ab1c      	add	r3, sp, #112	; 0x70
 8009360:	1c77      	adds	r7, r6, #1
 8009362:	384c      	subs	r0, #76	; 0x4c
 8009364:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009368:	4466      	add	r6, ip
 800936a:	42be      	cmp	r6, r7
 800936c:	f6ff af0b 	blt.w	8009186 <__kernel_rem_pio2f+0xca>
 8009370:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009374:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009380:	f04f 0c00 	mov.w	ip, #0
 8009384:	ece4 7a01 	vstmia	r4!, {s15}
 8009388:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80093c8 <__kernel_rem_pio2f+0x30c>
 800938c:	46a1      	mov	r9, r4
 800938e:	458c      	cmp	ip, r1
 8009390:	dd07      	ble.n	80093a2 <__kernel_rem_pio2f+0x2e6>
 8009392:	ece0 7a01 	vstmia	r0!, {s15}
 8009396:	3701      	adds	r7, #1
 8009398:	e7e7      	b.n	800936a <__kernel_rem_pio2f+0x2ae>
 800939a:	9804      	ldr	r0, [sp, #16]
 800939c:	f04f 0c01 	mov.w	ip, #1
 80093a0:	e7d2      	b.n	8009348 <__kernel_rem_pio2f+0x28c>
 80093a2:	ecfe 6a01 	vldmia	lr!, {s13}
 80093a6:	ed39 7a01 	vldmdb	r9!, {s14}
 80093aa:	f10c 0c01 	add.w	ip, ip, #1
 80093ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80093b2:	e7ec      	b.n	800938e <__kernel_rem_pio2f+0x2d2>
 80093b4:	3c01      	subs	r4, #1
 80093b6:	e775      	b.n	80092a4 <__kernel_rem_pio2f+0x1e8>
 80093b8:	08009d94 	.word	0x08009d94
 80093bc:	08009d68 	.word	0x08009d68
 80093c0:	43800000 	.word	0x43800000
 80093c4:	3b800000 	.word	0x3b800000
 80093c8:	00000000 	.word	0x00000000
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	eeb0 0a48 	vmov.f32	s0, s16
 80093d2:	1a98      	subs	r0, r3, r2
 80093d4:	f000 fa4e 	bl	8009874 <scalbnf>
 80093d8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80093c0 <__kernel_rem_pio2f+0x304>
 80093dc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80093e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e4:	db19      	blt.n	800941a <__kernel_rem_pio2f+0x35e>
 80093e6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80093c4 <__kernel_rem_pio2f+0x308>
 80093ea:	ee60 7a27 	vmul.f32	s15, s0, s15
 80093ee:	aa08      	add	r2, sp, #32
 80093f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093f4:	1c74      	adds	r4, r6, #1
 80093f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093fa:	3508      	adds	r5, #8
 80093fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009404:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009408:	ee10 3a10 	vmov	r3, s0
 800940c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009410:	ee17 3a90 	vmov	r3, s15
 8009414:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009418:	e74b      	b.n	80092b2 <__kernel_rem_pio2f+0x1f6>
 800941a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800941e:	aa08      	add	r2, sp, #32
 8009420:	ee10 3a10 	vmov	r3, s0
 8009424:	4634      	mov	r4, r6
 8009426:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800942a:	e742      	b.n	80092b2 <__kernel_rem_pio2f+0x1f6>
 800942c:	a808      	add	r0, sp, #32
 800942e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009432:	9001      	str	r0, [sp, #4]
 8009434:	ee07 0a90 	vmov	s15, r0
 8009438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800943c:	3a01      	subs	r2, #1
 800943e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009442:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009446:	ed61 7a01 	vstmdb	r1!, {s15}
 800944a:	e73e      	b.n	80092ca <__kernel_rem_pio2f+0x20e>
 800944c:	ecfc 6a01 	vldmia	ip!, {s13}
 8009450:	ecb6 7a01 	vldmia	r6!, {s14}
 8009454:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009458:	3001      	adds	r0, #1
 800945a:	4550      	cmp	r0, sl
 800945c:	dc01      	bgt.n	8009462 <__kernel_rem_pio2f+0x3a6>
 800945e:	4288      	cmp	r0, r1
 8009460:	ddf4      	ble.n	800944c <__kernel_rem_pio2f+0x390>
 8009462:	a858      	add	r0, sp, #352	; 0x160
 8009464:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009468:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800946c:	3a01      	subs	r2, #1
 800946e:	e730      	b.n	80092d2 <__kernel_rem_pio2f+0x216>
 8009470:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8009472:	2a02      	cmp	r2, #2
 8009474:	dc09      	bgt.n	800948a <__kernel_rem_pio2f+0x3ce>
 8009476:	2a00      	cmp	r2, #0
 8009478:	dc2a      	bgt.n	80094d0 <__kernel_rem_pio2f+0x414>
 800947a:	d043      	beq.n	8009504 <__kernel_rem_pio2f+0x448>
 800947c:	f009 0007 	and.w	r0, r9, #7
 8009480:	b059      	add	sp, #356	; 0x164
 8009482:	ecbd 8b04 	vpop	{d8-d9}
 8009486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800948c:	2b03      	cmp	r3, #3
 800948e:	d1f5      	bne.n	800947c <__kernel_rem_pio2f+0x3c0>
 8009490:	ab30      	add	r3, sp, #192	; 0xc0
 8009492:	442b      	add	r3, r5
 8009494:	461a      	mov	r2, r3
 8009496:	4619      	mov	r1, r3
 8009498:	4620      	mov	r0, r4
 800949a:	2800      	cmp	r0, #0
 800949c:	f1a1 0104 	sub.w	r1, r1, #4
 80094a0:	dc51      	bgt.n	8009546 <__kernel_rem_pio2f+0x48a>
 80094a2:	4621      	mov	r1, r4
 80094a4:	2901      	cmp	r1, #1
 80094a6:	f1a2 0204 	sub.w	r2, r2, #4
 80094aa:	dc5c      	bgt.n	8009566 <__kernel_rem_pio2f+0x4aa>
 80094ac:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80093c8 <__kernel_rem_pio2f+0x30c>
 80094b0:	3304      	adds	r3, #4
 80094b2:	2c01      	cmp	r4, #1
 80094b4:	dc67      	bgt.n	8009586 <__kernel_rem_pio2f+0x4ca>
 80094b6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80094ba:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80094be:	2f00      	cmp	r7, #0
 80094c0:	d167      	bne.n	8009592 <__kernel_rem_pio2f+0x4d6>
 80094c2:	edc8 6a00 	vstr	s13, [r8]
 80094c6:	ed88 7a01 	vstr	s14, [r8, #4]
 80094ca:	edc8 7a02 	vstr	s15, [r8, #8]
 80094ce:	e7d5      	b.n	800947c <__kernel_rem_pio2f+0x3c0>
 80094d0:	aa30      	add	r2, sp, #192	; 0xc0
 80094d2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80093c8 <__kernel_rem_pio2f+0x30c>
 80094d6:	4413      	add	r3, r2
 80094d8:	4622      	mov	r2, r4
 80094da:	2a00      	cmp	r2, #0
 80094dc:	da24      	bge.n	8009528 <__kernel_rem_pio2f+0x46c>
 80094de:	b34f      	cbz	r7, 8009534 <__kernel_rem_pio2f+0x478>
 80094e0:	eef1 7a47 	vneg.f32	s15, s14
 80094e4:	edc8 7a00 	vstr	s15, [r8]
 80094e8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80094ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094f0:	aa31      	add	r2, sp, #196	; 0xc4
 80094f2:	2301      	movs	r3, #1
 80094f4:	429c      	cmp	r4, r3
 80094f6:	da20      	bge.n	800953a <__kernel_rem_pio2f+0x47e>
 80094f8:	b10f      	cbz	r7, 80094fe <__kernel_rem_pio2f+0x442>
 80094fa:	eef1 7a67 	vneg.f32	s15, s15
 80094fe:	edc8 7a01 	vstr	s15, [r8, #4]
 8009502:	e7bb      	b.n	800947c <__kernel_rem_pio2f+0x3c0>
 8009504:	aa30      	add	r2, sp, #192	; 0xc0
 8009506:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80093c8 <__kernel_rem_pio2f+0x30c>
 800950a:	4413      	add	r3, r2
 800950c:	2c00      	cmp	r4, #0
 800950e:	da05      	bge.n	800951c <__kernel_rem_pio2f+0x460>
 8009510:	b10f      	cbz	r7, 8009516 <__kernel_rem_pio2f+0x45a>
 8009512:	eef1 7a67 	vneg.f32	s15, s15
 8009516:	edc8 7a00 	vstr	s15, [r8]
 800951a:	e7af      	b.n	800947c <__kernel_rem_pio2f+0x3c0>
 800951c:	ed33 7a01 	vldmdb	r3!, {s14}
 8009520:	3c01      	subs	r4, #1
 8009522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009526:	e7f1      	b.n	800950c <__kernel_rem_pio2f+0x450>
 8009528:	ed73 7a01 	vldmdb	r3!, {s15}
 800952c:	3a01      	subs	r2, #1
 800952e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009532:	e7d2      	b.n	80094da <__kernel_rem_pio2f+0x41e>
 8009534:	eef0 7a47 	vmov.f32	s15, s14
 8009538:	e7d4      	b.n	80094e4 <__kernel_rem_pio2f+0x428>
 800953a:	ecb2 7a01 	vldmia	r2!, {s14}
 800953e:	3301      	adds	r3, #1
 8009540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009544:	e7d6      	b.n	80094f4 <__kernel_rem_pio2f+0x438>
 8009546:	edd1 7a00 	vldr	s15, [r1]
 800954a:	edd1 6a01 	vldr	s13, [r1, #4]
 800954e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009552:	3801      	subs	r0, #1
 8009554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009558:	ed81 7a00 	vstr	s14, [r1]
 800955c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009560:	edc1 7a01 	vstr	s15, [r1, #4]
 8009564:	e799      	b.n	800949a <__kernel_rem_pio2f+0x3de>
 8009566:	edd2 7a00 	vldr	s15, [r2]
 800956a:	edd2 6a01 	vldr	s13, [r2, #4]
 800956e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009572:	3901      	subs	r1, #1
 8009574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009578:	ed82 7a00 	vstr	s14, [r2]
 800957c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009580:	edc2 7a01 	vstr	s15, [r2, #4]
 8009584:	e78e      	b.n	80094a4 <__kernel_rem_pio2f+0x3e8>
 8009586:	ed33 7a01 	vldmdb	r3!, {s14}
 800958a:	3c01      	subs	r4, #1
 800958c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009590:	e78f      	b.n	80094b2 <__kernel_rem_pio2f+0x3f6>
 8009592:	eef1 6a66 	vneg.f32	s13, s13
 8009596:	eeb1 7a47 	vneg.f32	s14, s14
 800959a:	edc8 6a00 	vstr	s13, [r8]
 800959e:	ed88 7a01 	vstr	s14, [r8, #4]
 80095a2:	eef1 7a67 	vneg.f32	s15, s15
 80095a6:	e790      	b.n	80094ca <__kernel_rem_pio2f+0x40e>

080095a8 <__kernel_sinf>:
 80095a8:	ee10 3a10 	vmov	r3, s0
 80095ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80095b4:	da04      	bge.n	80095c0 <__kernel_sinf+0x18>
 80095b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80095ba:	ee17 3a90 	vmov	r3, s15
 80095be:	b35b      	cbz	r3, 8009618 <__kernel_sinf+0x70>
 80095c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80095c4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800961c <__kernel_sinf+0x74>
 80095c8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009620 <__kernel_sinf+0x78>
 80095cc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80095d0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009624 <__kernel_sinf+0x7c>
 80095d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80095d8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009628 <__kernel_sinf+0x80>
 80095dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80095e0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800962c <__kernel_sinf+0x84>
 80095e4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80095e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80095ec:	b930      	cbnz	r0, 80095fc <__kernel_sinf+0x54>
 80095ee:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009630 <__kernel_sinf+0x88>
 80095f2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80095f6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80095fa:	4770      	bx	lr
 80095fc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009600:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009604:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009608:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800960c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009634 <__kernel_sinf+0x8c>
 8009610:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009614:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009620:	b2d72f34 	.word	0xb2d72f34
 8009624:	3638ef1b 	.word	0x3638ef1b
 8009628:	b9500d01 	.word	0xb9500d01
 800962c:	3c088889 	.word	0x3c088889
 8009630:	be2aaaab 	.word	0xbe2aaaab
 8009634:	3e2aaaab 	.word	0x3e2aaaab

08009638 <atanf>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	ee10 5a10 	vmov	r5, s0
 800963e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009642:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009646:	eef0 7a40 	vmov.f32	s15, s0
 800964a:	db10      	blt.n	800966e <atanf+0x36>
 800964c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009650:	dd04      	ble.n	800965c <atanf+0x24>
 8009652:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009656:	eeb0 0a67 	vmov.f32	s0, s15
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009794 <atanf+0x15c>
 8009660:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009798 <atanf+0x160>
 8009664:	2d00      	cmp	r5, #0
 8009666:	bfd8      	it	le
 8009668:	eef0 7a40 	vmovle.f32	s15, s0
 800966c:	e7f3      	b.n	8009656 <atanf+0x1e>
 800966e:	4b4b      	ldr	r3, [pc, #300]	; (800979c <atanf+0x164>)
 8009670:	429c      	cmp	r4, r3
 8009672:	dc10      	bgt.n	8009696 <atanf+0x5e>
 8009674:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009678:	da0a      	bge.n	8009690 <atanf+0x58>
 800967a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80097a0 <atanf+0x168>
 800967e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009686:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800968a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968e:	dce2      	bgt.n	8009656 <atanf+0x1e>
 8009690:	f04f 33ff 	mov.w	r3, #4294967295
 8009694:	e013      	b.n	80096be <atanf+0x86>
 8009696:	f000 f8a3 	bl	80097e0 <fabsf>
 800969a:	4b42      	ldr	r3, [pc, #264]	; (80097a4 <atanf+0x16c>)
 800969c:	429c      	cmp	r4, r3
 800969e:	dc4f      	bgt.n	8009740 <atanf+0x108>
 80096a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80096a4:	429c      	cmp	r4, r3
 80096a6:	dc41      	bgt.n	800972c <atanf+0xf4>
 80096a8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80096ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80096b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80096b4:	2300      	movs	r3, #0
 80096b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80096c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80097a8 <atanf+0x170>
 80096c8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80097ac <atanf+0x174>
 80096cc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80097b0 <atanf+0x178>
 80096d0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80096d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80096d8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80097b4 <atanf+0x17c>
 80096dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80096e0:	eddf 5a35 	vldr	s11, [pc, #212]	; 80097b8 <atanf+0x180>
 80096e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80096e8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80097bc <atanf+0x184>
 80096ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80096f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80097c0 <atanf+0x188>
 80096f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80096f8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80097c4 <atanf+0x18c>
 80096fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009700:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80097c8 <atanf+0x190>
 8009704:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009708:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80097cc <atanf+0x194>
 800970c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009710:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80097d0 <atanf+0x198>
 8009714:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009718:	ee27 7a26 	vmul.f32	s14, s14, s13
 800971c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009724:	d121      	bne.n	800976a <atanf+0x132>
 8009726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800972a:	e794      	b.n	8009656 <atanf+0x1e>
 800972c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009730:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009734:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009738:	2301      	movs	r3, #1
 800973a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800973e:	e7be      	b.n	80096be <atanf+0x86>
 8009740:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <atanf+0x19c>)
 8009742:	429c      	cmp	r4, r3
 8009744:	dc0b      	bgt.n	800975e <atanf+0x126>
 8009746:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800974a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800974e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009752:	2302      	movs	r3, #2
 8009754:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975c:	e7af      	b.n	80096be <atanf+0x86>
 800975e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009762:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009766:	2303      	movs	r3, #3
 8009768:	e7a9      	b.n	80096be <atanf+0x86>
 800976a:	4a1b      	ldr	r2, [pc, #108]	; (80097d8 <atanf+0x1a0>)
 800976c:	491b      	ldr	r1, [pc, #108]	; (80097dc <atanf+0x1a4>)
 800976e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009772:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009776:	ed93 0a00 	vldr	s0, [r3]
 800977a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800977e:	ed92 0a00 	vldr	s0, [r2]
 8009782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009786:	2d00      	cmp	r5, #0
 8009788:	ee70 7a67 	vsub.f32	s15, s0, s15
 800978c:	bfb8      	it	lt
 800978e:	eef1 7a67 	vneglt.f32	s15, s15
 8009792:	e760      	b.n	8009656 <atanf+0x1e>
 8009794:	3fc90fdb 	.word	0x3fc90fdb
 8009798:	bfc90fdb 	.word	0xbfc90fdb
 800979c:	3edfffff 	.word	0x3edfffff
 80097a0:	7149f2ca 	.word	0x7149f2ca
 80097a4:	3f97ffff 	.word	0x3f97ffff
 80097a8:	3c8569d7 	.word	0x3c8569d7
 80097ac:	3d4bda59 	.word	0x3d4bda59
 80097b0:	bd6ef16b 	.word	0xbd6ef16b
 80097b4:	3d886b35 	.word	0x3d886b35
 80097b8:	3dba2e6e 	.word	0x3dba2e6e
 80097bc:	3e124925 	.word	0x3e124925
 80097c0:	3eaaaaab 	.word	0x3eaaaaab
 80097c4:	bd15a221 	.word	0xbd15a221
 80097c8:	bd9d8795 	.word	0xbd9d8795
 80097cc:	bde38e38 	.word	0xbde38e38
 80097d0:	be4ccccd 	.word	0xbe4ccccd
 80097d4:	401bffff 	.word	0x401bffff
 80097d8:	08009da0 	.word	0x08009da0
 80097dc:	08009db0 	.word	0x08009db0

080097e0 <fabsf>:
 80097e0:	ee10 3a10 	vmov	r3, s0
 80097e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097e8:	ee00 3a10 	vmov	s0, r3
 80097ec:	4770      	bx	lr
	...

080097f0 <floorf>:
 80097f0:	ee10 3a10 	vmov	r3, s0
 80097f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80097f8:	3a7f      	subs	r2, #127	; 0x7f
 80097fa:	2a16      	cmp	r2, #22
 80097fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009800:	dc2a      	bgt.n	8009858 <floorf+0x68>
 8009802:	2a00      	cmp	r2, #0
 8009804:	da11      	bge.n	800982a <floorf+0x3a>
 8009806:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009868 <floorf+0x78>
 800980a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800980e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009816:	dd05      	ble.n	8009824 <floorf+0x34>
 8009818:	2b00      	cmp	r3, #0
 800981a:	da23      	bge.n	8009864 <floorf+0x74>
 800981c:	4a13      	ldr	r2, [pc, #76]	; (800986c <floorf+0x7c>)
 800981e:	2900      	cmp	r1, #0
 8009820:	bf18      	it	ne
 8009822:	4613      	movne	r3, r2
 8009824:	ee00 3a10 	vmov	s0, r3
 8009828:	4770      	bx	lr
 800982a:	4911      	ldr	r1, [pc, #68]	; (8009870 <floorf+0x80>)
 800982c:	4111      	asrs	r1, r2
 800982e:	420b      	tst	r3, r1
 8009830:	d0fa      	beq.n	8009828 <floorf+0x38>
 8009832:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009868 <floorf+0x78>
 8009836:	ee30 0a27 	vadd.f32	s0, s0, s15
 800983a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009842:	ddef      	ble.n	8009824 <floorf+0x34>
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfbe      	ittt	lt
 8009848:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800984c:	fa40 f202 	asrlt.w	r2, r0, r2
 8009850:	189b      	addlt	r3, r3, r2
 8009852:	ea23 0301 	bic.w	r3, r3, r1
 8009856:	e7e5      	b.n	8009824 <floorf+0x34>
 8009858:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800985c:	d3e4      	bcc.n	8009828 <floorf+0x38>
 800985e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009862:	4770      	bx	lr
 8009864:	2300      	movs	r3, #0
 8009866:	e7dd      	b.n	8009824 <floorf+0x34>
 8009868:	7149f2ca 	.word	0x7149f2ca
 800986c:	bf800000 	.word	0xbf800000
 8009870:	007fffff 	.word	0x007fffff

08009874 <scalbnf>:
 8009874:	ee10 3a10 	vmov	r3, s0
 8009878:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800987c:	d025      	beq.n	80098ca <scalbnf+0x56>
 800987e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009882:	d302      	bcc.n	800988a <scalbnf+0x16>
 8009884:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009888:	4770      	bx	lr
 800988a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800988e:	d122      	bne.n	80098d6 <scalbnf+0x62>
 8009890:	4b2a      	ldr	r3, [pc, #168]	; (800993c <scalbnf+0xc8>)
 8009892:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009940 <scalbnf+0xcc>
 8009896:	4298      	cmp	r0, r3
 8009898:	ee20 0a27 	vmul.f32	s0, s0, s15
 800989c:	db16      	blt.n	80098cc <scalbnf+0x58>
 800989e:	ee10 3a10 	vmov	r3, s0
 80098a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80098a6:	3a19      	subs	r2, #25
 80098a8:	4402      	add	r2, r0
 80098aa:	2afe      	cmp	r2, #254	; 0xfe
 80098ac:	dd15      	ble.n	80098da <scalbnf+0x66>
 80098ae:	ee10 3a10 	vmov	r3, s0
 80098b2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009944 <scalbnf+0xd0>
 80098b6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009948 <scalbnf+0xd4>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	eeb0 7a67 	vmov.f32	s14, s15
 80098c0:	bfb8      	it	lt
 80098c2:	eef0 7a66 	vmovlt.f32	s15, s13
 80098c6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80098ca:	4770      	bx	lr
 80098cc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800994c <scalbnf+0xd8>
 80098d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80098d4:	4770      	bx	lr
 80098d6:	0dd2      	lsrs	r2, r2, #23
 80098d8:	e7e6      	b.n	80098a8 <scalbnf+0x34>
 80098da:	2a00      	cmp	r2, #0
 80098dc:	dd06      	ble.n	80098ec <scalbnf+0x78>
 80098de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80098e6:	ee00 3a10 	vmov	s0, r3
 80098ea:	4770      	bx	lr
 80098ec:	f112 0f16 	cmn.w	r2, #22
 80098f0:	da1a      	bge.n	8009928 <scalbnf+0xb4>
 80098f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098f6:	4298      	cmp	r0, r3
 80098f8:	ee10 3a10 	vmov	r3, s0
 80098fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009900:	dd0a      	ble.n	8009918 <scalbnf+0xa4>
 8009902:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009944 <scalbnf+0xd0>
 8009906:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009948 <scalbnf+0xd4>
 800990a:	eef0 7a40 	vmov.f32	s15, s0
 800990e:	2b00      	cmp	r3, #0
 8009910:	bf18      	it	ne
 8009912:	eeb0 0a47 	vmovne.f32	s0, s14
 8009916:	e7db      	b.n	80098d0 <scalbnf+0x5c>
 8009918:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800994c <scalbnf+0xd8>
 800991c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009950 <scalbnf+0xdc>
 8009920:	eef0 7a40 	vmov.f32	s15, s0
 8009924:	2b00      	cmp	r3, #0
 8009926:	e7f3      	b.n	8009910 <scalbnf+0x9c>
 8009928:	3219      	adds	r2, #25
 800992a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800992e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009932:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009954 <scalbnf+0xe0>
 8009936:	ee07 3a10 	vmov	s14, r3
 800993a:	e7c4      	b.n	80098c6 <scalbnf+0x52>
 800993c:	ffff3cb0 	.word	0xffff3cb0
 8009940:	4c000000 	.word	0x4c000000
 8009944:	7149f2ca 	.word	0x7149f2ca
 8009948:	f149f2ca 	.word	0xf149f2ca
 800994c:	0da24260 	.word	0x0da24260
 8009950:	8da24260 	.word	0x8da24260
 8009954:	33000000 	.word	0x33000000

08009958 <_init>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	bf00      	nop
 800995c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995e:	bc08      	pop	{r3}
 8009960:	469e      	mov	lr, r3
 8009962:	4770      	bx	lr

08009964 <_fini>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	bf00      	nop
 8009968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996a:	bc08      	pop	{r3}
 800996c:	469e      	mov	lr, r3
 800996e:	4770      	bx	lr
